# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)


variables:
  SOURCE_DIR: '$(System.DefaultWorkingDirectory)' # eg /home/vsts/work/1/s
  BUILD_DIR: '$(SOURCE_DIR)/build'
  INSTALL_DIR: '$(SOURCE_DIR)/roadrunner-$(Agent.OS)'
  LLVM_INSTALL_PREFIX: '$(SOURCE_DIR)/llvm' # e.g./home/vsts/work/1
  DEPS_INSTALL_PREFIX: '$(SOURCE_DIR)/libroadrunner-deps' # e.g./home/vsts/work/1
  SWIG_SOURCE_DIR: '$(SOURCE_DIR)/swig'
  SWIG_INSTALL_PREFIX: '$(SWIG_SOURCE_DIR)/install-azure'
  SWIG_EXECUTABLE: '$(SWIG_INSTALL_PREFIX)/bin/swig'

stages:
########################################################################
# MacOS Build
#
  - stage: MacBuildRoadrunnerCpp
    dependsOn: []
    jobs:
      - job: MacBuildRoadrunnerCpp
        timeoutInMinutes: "0"
        displayName: MacBuildRoadrunnerCpp
        continueOnError: "false"
        pool:
          vmImage: 'macOS-10.15'
        strategy:
          matrix:
            64-bit Mac Release:
              BuildType: Release
            64-bit Mac Debug:
              BuildType: Debug
        variables:
          LLVM_CACHE: 'false'
        steps:
          - script: |
              echo "SOURCE_DIR $(SOURCE_DIR)"
              echo "BUILD_DIR $(BUILD_DIR)"
              echo "INSTALL_DIR $(INSTALL_DIR)"
              echo "LLVM_INSTALL_PREFIX $(LLVM_INSTALL_PREFIX)"
              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
              echo "Build.DefinitionName $(Build.DefinitionName)"
              echo "System.DefinitionId	 $(System.DefinitionId)"
              echo "Agent.OS $(Agent.OS)"

              echo "System.AccessToken  $(System.AccessToken)"
              echo "System.CollectionId $(System.CollectionId)"
              echo "System.CollectionUri  $(System.CollectionUri)"
              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
              echo "System.DefinitionId $(System.DefinitionId)"
              echo "System.HostType $(System.HostType)"
              echo "System.JobAttempt $(System.JobAttempt)"
              echo "System.JobDisplayName $(System.JobDisplayName)"
              echo "System.JobId  $(System.JobId)"
              echo "System.JobName  $(System.JobName)"
              echo "System.PhaseAttempt $(System.PhaseAttempt)"
              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
              echo "System.PhaseName  $(System.PhaseName)"
              echo "System.StageAttempt $(System.StageAttempt)"
              echo "System.StageDisplayName $(System.StageDisplayName)"
              echo "System.StageName  $(System.StageName)"
              echo "System.PullRequest.IsFork $(System.PullRequest.IsFork)"
              echo "System.PullRequest.PullRequestId $(System.PullRequest.PullRequestId)"
              echo "System.PullRequest.PullRequestNumber $(System.PullRequest.PullRequestNumber)"
              echo "System.PullRequest.SourceBranch $(System.PullRequest.SourceBranch)"
              echo "System.PullRequest.SourceRepositoryURI $(System.PullRequest.SourceRepositoryURI)"
              echo "System.PullRequest.TargetBranch $(System.PullRequest.TargetBranch)"
              echo "System.TeamFoundationCollectionUri $(System.TeamFoundationCollectionUri)"
              echo "System.TeamProject $(System.TeamProject)"
              echo "System.TeamProjectId $(System.TeamProjectId)"
              echo "TF_BUILD $(TF_BUILD)"
            displayName: Print Variables
          - script: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - task: Cache@2
            inputs:
              key: "llvm | $(Agent.OS)"
              path: $(LLVM_INSTALL_PREFIX)
              cacheHitVar: LLVM_CACHE
            displayName: Load cached llvm
          - script: |
              # todo put into actual script
              echo "current driectory is: $(pwd)"
              echo "ls $(ls)"
              wget -q https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-clang11.0.3-x64-release.zip
              unzip llvm-6.x-clang11.0.3-x64-release.zip
              mv llvm-6.x-clang11.0.3-x64-release/** '$(LLVM_INSTALL_PREFIX)'
              echo "cd to LLVM_INSTALL_PREFIX: $(LLVM_INSTALL_PREFIX)"
              cd $(LLVM_INSTALL_PREFIX)
              echo "ls:"
              ls
            displayName: "Get LLVM"
            condition: ne(variables.LLVM_CACHE, 'true')
          - task: DownloadPipelineArtifact@2
            # In this task we go and grab the build artefacts from
            # the libroadrunner-dependencies package
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              # pipeline is found in the url when looking at azure in browser.
              # for example, it looks like this:
              # - https://dev.azure.com/TheRoadrunnerProject/libroadrunner-deps/_build?definitionId=9
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - script: |
              echo "Configuring roadrunner"
              echo "mkdir build directory: $(BUILD_DIR)"
              mkdir $(BUILD_DIR)
              echo "CD to build dir: $(BUILD_DIR)"
              cd $(BUILD_DIR)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=$(BuildType) ..
            displayName: Run CMake Configure Command
          - script: |
              echo "Building roadrunner"
              echo "cd to build dir"
              cd $(BUILD_DIR)
              cmake --build . --target install --config $(BuildType) -j 12
            displayName: Run CMake Build Command
          - script: |
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ctest --verbose --extra-verbose --progress
            displayName: RunCTest
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)
            displayName: Copy to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: _roadrunner-$(Agent.OS)-$(BuildType)
            displayName: Publish

  - stage: MacBuildRoadrunnerPython
    dependsOn: []
    jobs:
      - job: MacBuildRoadrunnerPython
        timeoutInMinutes: "0"
        displayName: MacBuildRoadrunnerPython
        continueOnError: "false"
        pool:
          vmImage: 'macOS-10.15'
        strategy:
          matrix:
            py36:
              PythonVersion: 3.6
              PythonName: py36
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        variables:
          MinicondaRoot : '/usr/local/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/bin/python'
          CondaExecutable: '$(MinicondaRoot)/condabin/conda'
          PipExecutable: '$(PythonRoot)/bin/pip'

          LLVM_CACHE: 'false'
          SWIG_CACHE: 'false'
          MINICONDA_CACHE: 'false'
        steps:
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
          # We need to take ownership if we want to update conda or install packages globally
          - bash: sudo chown -R $USER $CONDA
            displayName: Take ownership of conda installation
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              echo "which conda"
              which conda
              echo "cd miniconda root: $(MinicondaRoot)"
              cd $(MinicondaRoot)
              echo "ls"
              ls
              $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion)
              echo "running: $(PipExecutable) install numpy"
              $(PipExecutable) install numpy
            displayName: InstallCondaEnv
          - script: |
              which conda
              which python
              echo "PythonVersion $(PythonVersion)"
              echo "PythonName $(PythonName)"
              echo "MinicondaRoot $(MinicondaRoot)"
              echo "PythonRoot $(PythonRoot)"
              echo "PythonLibDir $(PythonLibDir)"
              echo "CondaExecutable $(CondaExecutable)"
#              $(CondaExecutable) -h
            displayName: PrintPythonVariables
          - script: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - task: Cache@2
            inputs:
              key: "llvm | $(Agent.OS)"
              path: $(LLVM_INSTALL_PREFIX)
              cacheHitVar: LLVM_CACHE
            displayName: Load cached llvm
          - script: |
              # todo put into actual script
              echo "current driectory is: $(pwd)"
              echo "ls $(ls)"
              wget -q https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-clang11.0.3-x64-release.zip
              unzip llvm-6.x-clang11.0.3-x64-release.zip
              mv llvm-6.x-clang11.0.3-x64-release/** '$(LLVM_INSTALL_PREFIX)'
              echo "cd to LLVM_INSTALL_PREFIX: $(LLVM_INSTALL_PREFIX)"
              cd $(LLVM_INSTALL_PREFIX)
              echo "ls:"
              ls
            displayName: "Get LLVM"
            condition: ne(variables.LLVM_CACHE, 'true')
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-Release
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/Release/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - task: Cache@2
            inputs:
              key: "Swig | $(Agent.OS)"
              path: $(SWIG_INSTALL_PREFIX)
              cacheHitVar: SWIG_CACHE
            displayName: Cache Swig-3.0.0
          - script: |
              echo "installing pcre"
              sudo apt install -y libpcre3 libpcre3-dev
              mkdir -p $(SWIG_SOURCE_DIR)
              echo "cd to swig source dir: $(SWIG_SOURCE_DIR)"
              cd $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              wget -q https://sourceforge.net/projects/swig/files/swig/swig-3.0.0/swig-3.0.0.tar.gz $(SWIG_SOURCE_DIR)
              tar -xf swig-3.0.0.tar.gz
              ls -lh
              echo "Copying swig content from swig-3.0.0 to SWIG_SOURCE_DIR"
              mv swig-3.0.0/** $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls -lh
              ./configure --prefix=$(SWIG_INSTALL_PREFIX)
              make -j 12
              make install
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls
              echo "cd to swig install dir: $(SWIG_INSTALL_PREFIX)"
              cd $(SWIG_INSTALL_PREFIX)
              echo "ls from SWIG_INSTALL_PREFIX: $(SWIG_INSTALL_PREFIX)"
              ls
              if [ ! -f "$(SWIG_EXECUTABLE)" ]; then
                echo "did not locate swig executable, exiting"
                exit
              fi
            displayName: Install Swig
            condition: ne(variables.SWIG_CACHE, 'true')
          - script: |
              mkdir -p $(SOURCE_DIR)
              mkdir -p $(BUILD_DIR)
              mkdir -p $(INSTALL_DIR)
            displayName: Make directories
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              echo "Variable PythonRoot set to $(PythonRoot)"
              echo "Checking to see whether I can CD to PythonRoot"
              cd $(PythonRoot)
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ls
              export LD_LIBRARY_PATH=$(PythonLibDir)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DSWIG_EXECUTABLE=$(SWIG_EXECUTABLE) ..
              cmake --build . --target install --config Release -j 12
            displayName: BuildRoadrunnerWithPython
          - script: |
              echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
              export LD_LIBRARY_PATH=$(PythonLibDir)
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              $(PythonExecutable) site-packages/roadrunner/testing/__main__.py
            displayName: RunPythonTests
          - script: |
              # todo workout whether the top few lines are needed now I'm using $(PythonExecutable)
              #eval "$(conda shell.bash hook)"
              #source activate $(PythonName)
              #echo "which python: $(which python)"
              #echo "which conda: $(which conda)"
              #python_exe="$(which python)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              echo "$(PythonExecutable) setup.py bdist_wheel"
              $(PythonExecutable) setup.py bdist_wheel
              echo "$(PythonExecutable) setup_rrplugins.py bdist_wheel"
              $(PythonExecutable) setup_rrplugins.py bdist_wheel
            displayName: Generate pip wheel

          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/Install-$(PythonName)
            displayName: Copy Install Tree to Staging Area
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/dist/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
            displayName: Copy Pip Wheels to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: PipWheels-$(Agent.OS)-$(PythonName)
            displayName: Publish Pip Wheels Artifacts

########################################################################
# Windows Build
#
  - stage: WindowsBuildRoadrunnerCpp
    dependsOn: []
    jobs:
      - job: WindowsBuildRoadrunnerCpp
        timeoutInMinutes: "0"
        displayName: WindowsBuildRoadrunnerCpp
        continueOnError: "false"
        pool:
          vmImage: 'windows-2019'
        strategy:
          matrix:
            64-bit Windows Release:
              BuildType: Release
        variables:
          LLVM_CACHE: 'false'
        steps:
          - powershell: |
              echo "SOURCE_DIR $(SOURCE_DIR)"
              echo "BUILD_DIR $(BUILD_DIR)"
              echo "INSTALL_DIR $(INSTALL_DIR)"
              echo "LLVM_INSTALL_PREFIX $(LLVM_INSTALL_PREFIX)"
              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
              echo "Build.DefinitionName $(Build.DefinitionName)"
              echo "System.DefinitionId	 $(System.DefinitionId)"
              echo "Agent.OS $(Agent.OS)"

              echo "System.AccessToken  $(System.AccessToken)"
              echo "System.CollectionId $(System.CollectionId)"
              echo "System.CollectionUri  $(System.CollectionUri)"
              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
              echo "System.DefinitionId $(System.DefinitionId)"
              echo "System.HostType $(System.HostType)"
              echo "System.JobAttempt $(System.JobAttempt)"
              echo "System.JobDisplayName $(System.JobDisplayName)"
              echo "System.JobId  $(System.JobId)"
              echo "System.JobName  $(System.JobName)"
              echo "System.PhaseAttempt $(System.PhaseAttempt)"
              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
              echo "System.PhaseName  $(System.PhaseName)"
              echo "System.StageAttempt $(System.StageAttempt)"
              echo "System.StageDisplayName $(System.StageDisplayName)"
              echo "System.StageName  $(System.StageName)"
              echo "System.TeamProject $(System.TeamProject)"
              echo "System.TeamProjectId $(System.TeamProjectId)"
              echo "TF_BUILD $(TF_BUILD)"
            displayName: Print Variables
          - powershell: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - task: Cache@2
            inputs:
              key: "llvm | $(Agent.OS)"
              path: $(LLVM_INSTALL_PREFIX)
              cacheHitVar: LLVM_CACHE
          - powershell: |
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-release.zip -OutFile llvm-6.x-msvc2019-x64-release.zip
              Expand-Archive  llvm-6.x-msvc2019-x64-release.zip -Destination $(LLVM_INSTALL_PREFIX)
              rm llvm-6.x-msvc2019-x64-release.zip # since we are limited to 10gb space per job we clean up zips
              cd $(LLVM_INSTALL_PREFIX)\llvm-6.x-msvc2019-x64-release
              echo "pwd: $(pwd)"
              ls
              mv * ..
              cd ..
              rm -R llvm-6.x-msvc2019-x64-release
              echo "ls in l_dir: $(LLVM_INSTALL_PREFIX)"
              ls
            displayName: "Get LLVM"
            condition: ne(variables.LLVM_CACHE, 'true')
            errorActionPreference: 'stop'
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - powershell: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
              rm -R $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - powershell: |
              echo "Configuring roadrunner"
              echo "mkdir build directory: $(BUILD_DIR)"
              mkdir $(BUILD_DIR)
              echo "CD to build dir: $(BUILD_DIR)"
              cd $(BUILD_DIR)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=$(BuildType) ..
            displayName: Run CMake Configure Command
          - powershell: |
              echo "Building roadrunner"
              echo "cd to build dir"
              cd $(BUILD_DIR)
              cmake --build . --target install --config $(BuildType) -j 12
            displayName: Run CMake Build Command
          - powershell: |
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ctest --verbose --extra-verbose --progress
            displayName: RunCTest
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)
            displayName: Copy to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: _roadrunner-$(Agent.OS)-$(BuildType)
            displayName: Publish

  - stage: WindowsBuildRoadrunnerPython
    dependsOn: []
    jobs:
      - job: WindowsBuildRoadrunnerPython
        timeoutInMinutes: "0"
        displayName: WindowsBuildRoadrunnerPython
        continueOnError: "false"
        pool:
          vmImage: 'windows-2019'
        strategy:
          matrix:
            py36:
              PythonVersion: 3.6
              PythonName: py36
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        variables:
          MinicondaRoot : 'C:\Miniconda'
          PythonRoot: '$(MinicondaRoot)\envs\$(PythonName)'
          PythonLibDir: '$(PythonRoot)\Lib'
          PythonScriptsDir: '$(PythonRoot)\Scripts'
          PythonExecutable: '$(PythonRoot)\python.exe'
          PipExecutable: '$(PythonScriptsDir)\pip.exe'

          # override the variable for swigwin since swig exe is in different place
          SWIG_EXECUTABLE: '$(SWIG_INSTALL_PREFIX)/swig'
          SWIG_CACHE: 'false'
          LLVM_CACHE: 'false'

        steps:
          - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
            displayName: Add conda to PATH
          - powershell: |
              where.exe conda
              where.exe python
              echo "PythonVersion $(PythonVersion)"
              echo "PythonName $(PythonName)"
              echo "MinicondaRoot $(MinicondaRoot)"
              echo "PythonRoot $(PythonRoot)"
              echo "PythonLibDir $(PythonLibDir)"
            displayName: PrintPythonVariables
          - powershell: |
              mkdir -p $(LLVM_INSTALL_PREFIX)
              mkdir -p $(SWIG_INSTALL_PREFIX)
              mkdir -p $(DEPS_INSTALL_PREFIX)
              mkdir -p $(INSTALL_DIR)
              mkdir -p $(BUILD_DIR)
            displayName: Make Directories
          - task: Cache@2
            inputs:
              key: "llvm | $(Agent.OS)"
              path: $(LLVM_INSTALL_PREFIX)
              cacheHitVar: LLVM_CACHE
          - powershell: |
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-release.zip -OutFile llvm-6.x-msvc2019-x64-release.zip
              Expand-Archive  llvm-6.x-msvc2019-x64-release.zip -Destination $(LLVM_INSTALL_PREFIX)
              rm llvm-6.x-msvc2019-x64-release.zip # since we are limited to 10gb space per job we clean up zips
              cd $(LLVM_INSTALL_PREFIX)\llvm-6.x-msvc2019-x64-release
              echo "pwd: $(pwd)"
              ls
              mv * ..
              cd ..
              rm -R llvm-6.x-msvc2019-x64-release
              echo "ls in l_dir: $(LLVM_INSTALL_PREFIX)"
              ls
            displayName: "Get LLVM"
            condition: ne(variables.LLVM_CACHE, 'true')
            errorActionPreference: 'stop'
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-Release
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - powershell: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/Release/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - task: Cache@2
            inputs:
              key: "Swig | $(Agent.OS)"
              path: $(SWIG_INSTALL_PREFIX)
              cacheHitVar: SWIG_CACHE
            displayName: Cache Swig-3.0.0
          - powershell: |
              echo "cd to swig source dir: $(SWIG_SOURCE_DIR)"
              cd $(SWIG_SOURCE_DIR)
              echo "ls"
              ls
              echo "Invoke-WebRequest"
              Invoke-WebRequest "https://versaweb.dl.sourceforge.net/project/swig/swigwin/swigwin-3.0.0/swigwin-3.0.0.zip" -OutFile swigwin-3.0.0.zip
              echo "Expand-Archive"
              Expand-Archive swigwin-3.0.0.zip -Destination $(SWIG_INSTALL_PREFIX)
              echo "CD to swig install prefix $(SWIG_INSTALL_PREFIX)"
              cd $(SWIG_INSTALL_PREFIX)
              echo "ls"
              ls
              echo "cd swigwwin-3.0.0"
              cd swigwin-3.0.0
              echo " moving contents of swigwin-3.0.0 to .."
              mv * ..
              cd ..
              rm -R swigwin-3.0.0
              echo "ls"
              ls
              # Note: swig is already built when we download on windows.
            displayName: Install Swig
            # this condition ensures this task only gets executed when swig cache does not exist
            # Note, this may cause a problem if we ever update swig. In this case change the value of the cache key
            condition: ne(variables.SWIG_CACHE, 'true')
          - powershell: |
              echo "where.exe conda"
              where.exe conda
              echo "where.exe python"
              where.exe python
              echo "Variable PythonRoot set to $(PythonRoot)"
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              echo "Creating new conda environment"
              conda create --quiet --yes --name $(PythonName) python=$(PythonVersion)
              echo "pip help:"
              $(PipExecutable) install --help
              echo "Installing nose and numpy: $(PipExecutable) install --yes nose numpy"
              $(PipExecutable) install -q nose numpy
              $ENV:PATH="$ENV:PATH;$(PythonScriptsDir)"
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ls
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DSWIG_EXECUTABLE=$(SWIG_EXECUTABLE) ..
              cmake --build . --target install --config Release -j 12
            displayName: BuildRoadrunnerWithPython
          - powershell: |
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "python exe $(PythonExecutable)"
              echo "ls in install dir"
              ls
              $(PythonExecutable) site-packages/roadrunner/testing/__main__.py
            displayName: RunPythonTests
          - powershell: |
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              $(PythonExecutable) setup.py bdist_wheel
              $(PythonExecutable) setup_rrplugins.py bdist_wheel
            displayName: Generate pip wheel

          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/Install-$(PythonName)
            displayName: Copy Install Tree to Staging Area
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/dist/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
            displayName: Copy Pip Wheels to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: PipWheels-$(Agent.OS)-$(PythonName)
            displayName: Publish Pip Wheels Artifacts


#########################################################################
## Linux Build
##
  - stage: LinuxBuildRoadrunnerCpp
    dependsOn: []
    jobs:
      - job: LinuxBuildRoadrunnerCpp
        timeoutInMinutes: "0"
        displayName: LinuxBuildRoadrunnerCpp
        continueOnError: "false"
        pool:
          vmImage: 'Ubuntu-18.04'
        strategy:
          matrix:
            64-bit Linux Release:
              BuildType: Release
            64-bit Linux Debug:
              BuildType: Debug
        steps:
          # we cannot upload prebuilt binaries onto github for linux debug version because of github file size limits.
          # therefore we do this build with Release llvm for both debug and release. Oddly enough it seems to work.
          - script: |
              echo "SOURCE_DIR $(SOURCE_DIR)"
              echo "BUILD_DIR $(BUILD_DIR)"
              echo "INSTALL_DIR $(INSTALL_DIR)"
              echo "LLVM_INSTALL_PREFIX $(LLVM_INSTALL_PREFIX)"
              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
              echo "Build.DefinitionName $(Build.DefinitionName)"
              echo "System.DefinitionId	 $(System.DefinitionId)"
              echo "Agent.OS $(Agent.OS)"

              echo "System.AccessToken  $(System.AccessToken)"
              echo "System.CollectionId $(System.CollectionId)"
              echo "System.CollectionUri  $(System.CollectionUri)"
              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
              echo "System.DefinitionId $(System.DefinitionId)"
              echo "System.HostType $(System.HostType)"
              echo "System.JobAttempt $(System.JobAttempt)"
              echo "System.JobDisplayName $(System.JobDisplayName)"
              echo "System.JobId  $(System.JobId)"
              echo "System.JobName  $(System.JobName)"
              echo "System.PhaseAttempt $(System.PhaseAttempt)"
              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
              echo "System.PhaseName  $(System.PhaseName)"
              echo "System.StageAttempt $(System.StageAttempt)"
              echo "System.StageDisplayName $(System.StageDisplayName)"
              echo "System.StageName  $(System.StageName)"
              echo "System.PullRequest.IsFork $(System.PullRequest.IsFork)"
              echo "System.PullRequest.PullRequestId $(System.PullRequest.PullRequestId)"
              echo "System.PullRequest.PullRequestNumber $(System.PullRequest.PullRequestNumber)"
              echo "System.PullRequest.SourceBranch $(System.PullRequest.SourceBranch)"
              echo "System.PullRequest.SourceRepositoryURI $(System.PullRequest.SourceRepositoryURI)"
              echo "System.PullRequest.TargetBranch $(System.PullRequest.TargetBranch)"
              echo "System.TeamFoundationCollectionUri $(System.TeamFoundationCollectionUri)"
              echo "System.TeamProject $(System.TeamProject)"
              echo "System.TeamProjectId $(System.TeamProjectId)"
              echo "TF_BUILD $(TF_BUILD)"
            displayName: Print Variables
          - script: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - task: Cache@2
            inputs:
              key: "llvm | $(Agent.OS)"
              path: $(LLVM_INSTALL_PREFIX)
              cacheHitVar: LLVM_CACHE
            displayName: Cache llvm
          - script: |
              # todo put into actual script
              echo "current driectory is: $(pwd)"
              echo "ls $(ls)"
              wget -q https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-gcc7.5-x64-release.tar.gz
              tar -zxf llvm-6.x-gcc7.5-x64-release.tar.gz
              mv llvm-6.x-gcc7.5-x64-release/** '$(LLVM_INSTALL_PREFIX)'
              echo "cd to LLVM_INSTALL_PREFIX: $(LLVM_INSTALL_PREFIX)"
              cd $(LLVM_INSTALL_PREFIX)
              echo "ls:"
              ls
            displayName: "Get LLVM"
            condition: ne(variables.LLVM_CACHE, 'true')
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - script: |
              echo "Configuring roadrunner"
              echo "mkdir build directory: $(BUILD_DIR)"
              mkdir $(BUILD_DIR)
              echo "CD to build dir: $(BUILD_DIR)"
              cd $(BUILD_DIR)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=$(BuildType) ..
            displayName: Run CMake Configure Command
          - script: |
              echo "Building roadrunner"
              echo "cd to build dir"
              cd $(BUILD_DIR)
              cmake --build . --target install --config $(BuildType) -j 12
            displayName: Run CMake Build Command
          - script: |
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ctest --verbose --extra-verbose --progress
            displayName: RunCTest
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)
            displayName: Copy to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: _roadrunner-$(Agent.OS)-$(BuildType)
            displayName: Publish

  - stage: LinuxBuildRoadrunnerPython
    dependsOn: []
    jobs:
      - job: LinuxBuildRoadrunnerPython
        timeoutInMinutes: "0"
        displayName: LinuxBuildRoadrunnerPython
        continueOnError: "false"
        pool:
          vmImage: 'Ubuntu-18.04'
        strategy:
          matrix:
            py36:
              PythonVersion: 3.6
              PythonName: py36
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
        variables:
          MinicondaRoot : '/usr/share/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/bin/python'
          SWIG_CACHE: 'false'
          LLVM_CACHE: 'false'
        steps:
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH
          - script: |
              echo "PythonVersion $(PythonVersion)"
              echo "PythonName $(PythonName)"
              echo "MinicondaRoot $(MinicondaRoot)"
              echo "PythonRoot $(PythonRoot)"
              echo "PythonLibDir $(PythonLibDir)"
            displayName: PrintPythonVariables
          - script: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - task: Cache@2
            inputs:
              key: "llvm | $(Agent.OS)"
              path: $(LLVM_INSTALL_PREFIX)
              cacheHitVar: LLVM_CACHE
            displayName: Cache llvm
          - script: |
              # todo put into actual script
              echo "current driectory is: $(pwd)"
              echo "ls $(ls)"
              wget -q https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-gcc7.5-x64-release.tar.gz
              tar -zxf llvm-6.x-gcc7.5-x64-release.tar.gz
              mv llvm-6.x-gcc7.5-x64-release/** '$(LLVM_INSTALL_PREFIX)'
              echo "cd to LLVM_INSTALL_PREFIX: $(LLVM_INSTALL_PREFIX)"
              cd $(LLVM_INSTALL_PREFIX)
              echo "ls:"
              ls
            displayName: "Get LLVM"
            condition: ne(variables.LLVM_CACHE, 'true')
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-Release
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/Release/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - task: Cache@2
            inputs:
              key: "Swig | $(Agent.OS)"
              path: $(SWIG_INSTALL_PREFIX)
              cacheHitVar: SWIG_CACHE
            displayName: Cache Swig-3.0.0
          - script: |
              echo "installing pcre"
              sudo apt install -y libpcre3 libpcre3-dev
              mkdir -p $(SWIG_SOURCE_DIR)
              echo "cd to swig source dir: $(SWIG_SOURCE_DIR)"
              cd $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              wget -q https://sourceforge.net/projects/swig/files/swig/swig-3.0.0/swig-3.0.0.tar.gz $(SWIG_SOURCE_DIR)
              tar -xf swig-3.0.0.tar.gz
              ls -lh
              echo "Copying swig content from swig-3.0.0 to SWIG_SOURCE_DIR"
              mv swig-3.0.0/** $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls -lh
              ./configure --prefix=$(SWIG_INSTALL_PREFIX)
              make -j 12
              make install
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls
              echo "cd to swig install dir: $(SWIG_INSTALL_PREFIX)"
              cd $(SWIG_INSTALL_PREFIX)
              echo "ls from SWIG_INSTALL_PREFIX: $(SWIG_INSTALL_PREFIX)"
              ls
              if [ ! -f "$(SWIG_EXECUTABLE)" ]; then
                echo "did not locate swig executable, exiting"
                exit
              fi
            displayName: Install Swig
            condition: ne(variables.SWIG_CACHE, 'true')
          - script: |
              mkdir -p $(SOURCE_DIR)
              mkdir -p $(BUILD_DIR)
              mkdir -p $(INSTALL_DIR)
            displayName: Make directories
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              eval "$(conda shell.bash hook)"
              conda create -y --name $(PythonName) python=$(PythonVersion)
              conda activate $(PythonName)
              conda install --yes --quiet nose numpy
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              python_dir="$(dirname $(which python))"
              echo "python_dir == $python_dir"
              echo "Variable PythonRoot set to $(PythonRoot)"
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ls
              export LD_LIBRARY_PATH=$(PythonLibDir)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DSWIG_EXECUTABLE=$(SWIG_EXECUTABLE) ..
              cmake --build . --target install --config Release -j 12
            displayName: BuildRoadrunnerWithPython
          - script: |
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
              export LD_LIBRARY_PATH=$(PythonLibDir)
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              $(PythonExecutable) site-packages/roadrunner/testing/__main__.py
            displayName: RunPythonTests
          - script: |
              # todo workout whether the top few lines are needed now I'm using $(PythonExecutable)
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              $(PythonExecutable) setup.py bdist_wheel
              $(PythonExecutable) setup_rrplugins.py bdist_wheel
            displayName: Generate pip wheel

          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/Install-$(PythonName)
            displayName: Copy Install Tree to Staging Area
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/dist/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
            displayName: Copy Pip Wheels to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: PipWheels-$(Agent.OS)-$(PythonName)
            displayName: Publish Pip Wheels Artifacts














