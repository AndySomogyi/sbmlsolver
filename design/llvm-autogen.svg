<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="6982px" preserveAspectRatio="none" style="width:18079px;height:6982px;background:#FFFFFF;" version="1.1" viewBox="0 0 18079 6982" width="18079px" zoomAndPan="magnify"><defs><filter height="300%" id="f1uvyvoyjf98rw" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[8155b533719f087a3009af83f785d6d7]
cluster rrllvm--><polygon fill="#FFFFFF" filter="url(#f1uvyvoyjf98rw)" points="424.71,6,474.71,6,481.71,28.4883,18062.71,28.4883,18062.71,6975,424.71,6975,424.71,6" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="424.71" x2="481.71" y1="28.4883" y2="28.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="428.71" y="21.5352">rrllvm</text><!--MD5=[81c6178479022f5dabfec5adca7c1ce0]
class rrllvm.ASTNodeCodeGen--><rect codeLine="9" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="397.7871" id="rrllvm.ASTNodeCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="770" x="3176.71" y="395"/><ellipse cx="3504.46" cy="411" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3506.9331,417.1431 Q3506.3521,417.4419 3505.7129,417.5913 Q3505.0738,417.7407 3504.3682,417.7407 Q3501.8614,417.7407 3500.5415,416.0889 Q3499.2217,414.437 3499.2217,411.3159 Q3499.2217,408.1865 3500.5415,406.5347 Q3501.8614,404.8828 3504.3682,404.8828 Q3505.0738,404.8828 3505.7212,405.0322 Q3506.3687,405.1816 3506.9331,405.4805 L3506.9331,408.2031 Q3506.3023,407.6221 3505.7088,407.3523 Q3505.1153,407.0825 3504.4844,407.0825 Q3503.1397,407.0825 3502.4549,408.1492 Q3501.7701,409.2158 3501.7701,411.3159 Q3501.7701,413.4077 3502.4549,414.4744 Q3503.1397,415.541 3504.4844,415.541 Q3505.1153,415.541 3505.7088,415.2712 Q3506.3023,415.0015 3506.9331,414.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="106" x="3524.96" y="415.5352">ASTNodeCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3177.71" x2="3945.71" y1="427" y2="427"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="435"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="172" x="3196.71" y="441.6348">resolver : LoadSymbolResolver&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="447.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="3196.71" y="454.5898">scalar_mode_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="460.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="196" x="3196.71" y="467.5449">ctx : const ModelGeneratorContext&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="473.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="3196.71" y="480.5">builder : llvm::IRBuilder&lt;&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="486.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="3196.71" y="493.4551">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3177.71" x2="3945.71" y1="499.7754" y2="499.7754"/><ellipse cx="3187.71" cy="510.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="744" x="3196.71" y="514.4102">ASTNodeCodeGen(llvm::IRBuilder&lt;&gt;&amp; builder, LoadSymbolResolver&amp; resolver, const ModelGeneratorContext&amp; ctx, llvm::Value* modelData)</text><ellipse cx="3187.71" cy="523.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="113" x="3196.71" y="527.3652">~ASTNodeCodeGen()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="533.6855"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="145" x="3196.71" y="540.3203">getModule() : llvm::Module*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="546.6406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="364" x="3196.71" y="553.2754">applyArithmeticCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="559.5957"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="578" x="3196.71" y="566.2305">applyBinaryRelationalCodeGen(const libsbml::ASTNode* ast, llvm::Value* left, llvm::Value* right) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="572.5508"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="346" x="3196.71" y="579.1855">applyLogicalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="585.5059"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="360" x="3196.71" y="592.1406">applyRelationalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="598.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="392" x="3196.71" y="605.0957">applyScalarRelationalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="611.416"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="338" x="3196.71" y="618.0508">binaryExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><ellipse cx="3187.71" cy="627.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="277" x="3196.71" y="631.0059">codeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="637.3262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="332" x="3196.71" y="643.9609">delayExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="650.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="3196.71" y="656.916">distribCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="663.2363"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="344" x="3196.71" y="669.8711">functionCallCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="676.1914"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="3196.71" y="682.8262">integerCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="689.1465"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="343" x="3196.71" y="695.7813">intrinsicCallCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="702.1016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="322" x="3196.71" y="708.7363">minmaxCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="715.0566"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="3196.71" y="721.6914">nameExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="728.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="3196.71" y="734.6465">notImplemented(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="740.9668"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="330" x="3196.71" y="747.6016">piecewiseCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="753.9219"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="324" x="3196.71" y="760.5566">realExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="766.877"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="3196.71" y="773.5117">toBoolean(llvm::Value* value) : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3184.71" y="779.832"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="3196.71" y="786.4668">toDouble(llvm::Value* value) : llvm::Value*</text><!--MD5=[6a4d186ab7ae624979a1e0068470294a]
class rrllvm.ASTNodeCodeGenScalarTicket--><rect codeLine="39" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.ASTNodeCodeGenScalarTicket" style="stroke:#A80036;stroke-width:1.5;" width="444" x="3339.71" y="131.5"/><ellipse cx="3469.96" cy="147.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3472.4331,153.6431 Q3471.8521,153.9419 3471.2129,154.0913 Q3470.5738,154.2407 3469.8682,154.2407 Q3467.3614,154.2407 3466.0415,152.5889 Q3464.7217,150.937 3464.7217,147.8159 Q3464.7217,144.6865 3466.0415,143.0347 Q3467.3614,141.3828 3469.8682,141.3828 Q3470.5738,141.3828 3471.2212,141.5322 Q3471.8687,141.6816 3472.4331,141.9805 L3472.4331,144.7031 Q3471.8023,144.1221 3471.2088,143.8523 Q3470.6153,143.5825 3469.9844,143.5825 Q3468.6397,143.5825 3467.9549,144.6492 Q3467.2701,145.7158 3467.2701,147.8159 Q3467.2701,149.9077 3467.9549,150.9744 Q3468.6397,152.041 3469.9844,152.041 Q3470.6153,152.041 3471.2088,151.7712 Q3471.8023,151.5015 3472.4331,150.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="175" x="3490.46" y="152.0352">ASTNodeCodeGenScalarTicket</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3340.71" x2="3782.71" y1="163.5" y2="163.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3347.71" y="171.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="3359.71" y="178.1348">z_ : ASTNodeCodeGen&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3347.71" y="184.4551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="45" x="3359.71" y="191.0898">v_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3347.71" y="197.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="3359.71" y="204.0449">n_ : std::string</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3340.71" x2="3782.71" y1="210.3652" y2="210.3652"/><ellipse cx="3350.71" cy="221.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="418" x="3359.71" y="225">ASTNodeCodeGenScalarTicket(ASTNodeCodeGen&amp; gen, bool val, std::string n)</text><ellipse cx="3350.71" cy="234.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="177" x="3359.71" y="237.9551">~ASTNodeCodeGenScalarTicket()</text><!--MD5=[98dc469c0cb5981b01722fc73a03db83]
class rrllvm.ASTNodeFactory--><rect codeLine="47" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="151.6406" id="rrllvm.ASTNodeFactory" style="stroke:#A80036;stroke-width:1.5;" width="347" x="441.21" y="5831"/><ellipse cx="563.46" cy="5847" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M565.9331,5853.1431 Q565.3521,5853.4419 564.7129,5853.5913 Q564.0738,5853.7407 563.3682,5853.7407 Q560.8614,5853.7407 559.5415,5852.0889 Q558.2217,5850.437 558.2217,5847.3159 Q558.2217,5844.1865 559.5415,5842.5347 Q560.8614,5840.8828 563.3682,5840.8828 Q564.0738,5840.8828 564.7212,5841.0322 Q565.3687,5841.1816 565.9331,5841.4805 L565.9331,5844.2031 Q565.3023,5843.6221 564.7088,5843.3523 Q564.1153,5843.0825 563.4844,5843.0825 Q562.1397,5843.0825 561.4549,5844.1492 Q560.7701,5845.2158 560.7701,5847.3159 Q560.7701,5849.4077 561.4549,5850.4744 Q562.1397,5851.541 563.4844,5851.541 Q564.1153,5851.541 564.7088,5851.2712 Q565.3023,5851.0015 565.9331,5850.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="94" x="583.96" y="5851.5352">ASTNodeFactory</text><line style="stroke:#A80036;stroke-width:1.5;" x1="442.21" x2="787.21" y1="5863" y2="5863"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="449.21" y="5871"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="198" x="461.21" y="5877.6348">nodes : std::list&lt;libsbml::ASTNode*&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="442.21" x2="787.21" y1="5883.9551" y2="5883.9551"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="449.21" y="5891.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="230" x="461.21" y="5898.5898">ASTNodeFactory(const ASTNodeFactory &amp;)</text><ellipse cx="452.21" cy="5907.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="97" x="461.21" y="5911.5449">ASTNodeFactory()</text><ellipse cx="452.21" cy="5920.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="104" x="461.21" y="5924.5">~ASTNodeFactory()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="449.21" y="5930.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="321" x="461.21" y="5937.4551">operator=(const ASTNodeFactory&amp; rhs) : ASTNodeFactory&amp;</text><ellipse cx="452.21" cy="5946.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="305" x="461.21" y="5950.4102">create(libsbml::ASTNodeType_t type) : libsbml::ASTNode*</text><ellipse cx="452.21" cy="5959.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="275" x="461.21" y="5963.3652">create(libsbml::Token_t* token) : libsbml::ASTNode*</text><ellipse cx="452.21" cy="5972.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="309" x="461.21" y="5976.3203">create(const libsbml::ASTNode&amp; orig) : libsbml::ASTNode*</text><!--MD5=[3270a3a978320392ff82cbc25a26ba38]
class rrllvm.AssignmentRuleEvaluator--><rect codeLine="58" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.AssignmentRuleEvaluator" style="stroke:#A80036;stroke-width:1.5;" width="300" x="17746.71" y="4564"/><ellipse cx="17820.46" cy="4580" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M17822.9331,4586.1431 Q17822.3521,4586.4419 17821.7129,4586.5913 Q17821.0738,4586.7407 17820.3682,4586.7407 Q17817.8614,4586.7407 17816.5415,4585.0889 Q17815.2217,4583.437 17815.2217,4580.3159 Q17815.2217,4577.1865 17816.5415,4575.5347 Q17817.8614,4573.8828 17820.3682,4573.8828 Q17821.0738,4573.8828 17821.7212,4574.0322 Q17822.3687,4574.1816 17822.9331,4574.4805 L17822.9331,4577.2031 Q17822.3023,4576.6221 17821.7088,4576.3523 Q17821.1153,4576.0825 17820.4844,4576.0825 Q17819.1397,4576.0825 17818.4549,4577.1492 Q17817.7701,4578.2158 17817.7701,4580.3159 Q17817.7701,4582.4077 17818.4549,4583.4744 Q17819.1397,4584.541 17820.4844,4584.541 Q17821.1153,4584.541 17821.7088,4584.2712 Q17822.3023,4584.0015 17822.9331,4583.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="144" x="17840.96" y="4584.5352">AssignmentRuleEvaluator</text><line style="stroke:#A80036;stroke-width:1.5;" x1="17747.71" x2="18045.71" y1="4596" y2="4596"/><polygon fill="none" points="17757.71,4602,17761.71,4606,17757.71,4610,17753.71,4606" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="17766.71" y="4610.6348">symbols : SymbolForest&amp;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="17747.71" x2="18045.71" y1="4616.9551" y2="4616.9551"/><ellipse cx="17757.71" cy="4627.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="274" x="17766.71" y="4631.5898">AssignmentRuleEvaluator(SymbolForest&amp; symbols)</text><ellipse cx="17757.71" cy="4640.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="17766.71" y="4644.5449">visit(const libsbml::AssignmentRule&amp; x) : bool</text><ellipse cx="17757.71" cy="4653.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="238" x="17766.71" y="4657.5">evaluate(const libsbml::Model&amp; model) : void</text><!--MD5=[842a5f2d6353ce51742b629b2594e9de]
class rrllvm.CodeGen--><rect codeLine="65" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="73.9102" id="rrllvm.CodeGen" style="stroke:#A80036;stroke-width:1.5;" width="152" x="10465.71" y="151"/><ellipse cx="10510.96" cy="167" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10510.8233,162.3481 L10509.6695,167.4199 L10511.9854,167.4199 Z M10509.3291,160.1069 L10512.3257,160.1069 L10515.6709,172.5 L10513.2222,172.5 L10512.4585,169.437 L10509.1797,169.437 L10508.4327,172.5 L10505.9839,172.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="53" x="10531.46" y="171.5352">CodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10466.71" x2="10616.71" y1="183" y2="183"/><line style="stroke:#A80036;stroke-width:1.5;" x1="10466.71" x2="10616.71" y1="191" y2="191"/><polygon fill="#FFFF44" points="10476.71,197,10480.71,201,10476.71,205,10472.71,201" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="64" x="10485.71" y="205.6348">~CodeGen()</text><ellipse cx="10476.71" cy="214.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="126" x="10485.71" y="218.5898">codeGen() : llvm::Value*</text><!--MD5=[4060034c6fa557ab763a50d1d58585ed]
class rrllvm.CodeGenBase--><rect codeLine="70" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="281.1914" id="rrllvm.CodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="869" x="8599.21" y="2347"/><ellipse cx="8875.46" cy="2363" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M8875.3233,2358.3481 L8874.1695,2363.4199 L8876.4854,2363.4199 Z M8873.8291,2356.1069 L8876.8257,2356.1069 L8880.1709,2368.5 L8877.7222,2368.5 L8876.9585,2365.437 L8873.6797,2365.437 L8872.9327,2368.5 L8870.4839,2368.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="80" x="8895.96" y="2367.5352">CodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="226" x="9245.21" y="2344"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="224" x="9246.21" y="2356.6016">template&lt;typename FunctionPtrType&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8600.21" x2="9467.21" y1="2379" y2="2379"/><polygon fill="none" points="8610.21,2385,8614.21,2389,8610.21,2393,8606.21,2389" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="247" x="8619.21" y="2393.6348">dataSymbols : const LLVMModelDataSymbols&amp;</text><polygon fill="none" points="8610.21,2397.9551,8614.21,2401.9551,8610.21,2405.9551,8606.21,2401.9551" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="8619.21" y="2406.5898">modelSymbols : const LLVMModelSymbols&amp;</text><polygon fill="none" points="8610.21,2410.9102,8614.21,2414.9102,8610.21,2418.9102,8606.21,2414.9102" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="276" x="8619.21" y="2419.5449">modelGenContext : const ModelGeneratorContext&amp;</text><polygon fill="none" points="8610.21,2423.8652,8614.21,2427.8652,8610.21,2431.8652,8606.21,2427.8652" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="8619.21" y="2432.5">model : const libsbml::Model*</text><polygon fill="none" points="8610.21,2436.8203,8614.21,2440.8203,8610.21,2444.8203,8606.21,2440.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="8619.21" y="2445.4551">options : const unsigned</text><polygon fill="none" points="8610.21,2449.7754,8614.21,2453.7754,8610.21,2457.7754,8606.21,2453.7754" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="170" x="8619.21" y="2458.4102">engine : llvm::ExecutionEngine&amp;</text><polygon fill="none" points="8610.21,2462.7305,8614.21,2466.7305,8610.21,2470.7305,8606.21,2466.7305" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="8619.21" y="2471.3652">function : llvm::Function*</text><polygon fill="none" points="8610.21,2475.6855,8614.21,2479.6855,8610.21,2483.6855,8606.21,2479.6855" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="8619.21" y="2484.3203">builder : llvm::IRBuilder&lt;&gt;&amp;</text><polygon fill="none" points="8610.21,2488.6406,8614.21,2492.6406,8610.21,2496.6406,8606.21,2492.6406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="8619.21" y="2497.2754">context : llvm::LLVMContext&amp;</text><polygon fill="none" points="8610.21,2501.5957,8614.21,2505.5957,8610.21,2509.5957,8606.21,2505.5957" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="8619.21" y="2510.2305">module : llvm::Module*</text><polygon fill="none" points="8610.21,2514.5508,8614.21,2518.5508,8610.21,2522.5508,8606.21,2518.5508" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="8619.21" y="2523.1855">functionPassManager : llvm::legacy::FunctionPassManager*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8600.21" x2="9467.21" y1="2529.5059" y2="2529.5059"/><polygon fill="#FFFF44" points="8610.21,2535.5059,8614.21,2539.5059,8610.21,2543.5059,8606.21,2539.5059" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="277" x="8619.21" y="2544.1406">CodeGenBase(const ModelGeneratorContext&amp; mgc)</text><polygon fill="#FFFF44" points="8610.21,2548.4609,8614.21,2552.4609,8610.21,2556.4609,8606.21,2552.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="88" x="8619.21" y="2557.0957">~CodeGenBase()</text><polygon fill="#FFFF44" points="8610.21,2561.416,8614.21,2565.416,8610.21,2569.416,8606.21,2565.416" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="843" x="8619.21" y="2570.0508">codeGenHeader(const char* functionName, llvm::Type* retType, llvm::Type* (&amp; argTypes ), const char* (&amp; argNames ), llvm::Value* (&amp; args )) : llvm::BasicBlock*</text><polygon fill="#FFFF44" points="8610.21,2574.3711,8614.21,2578.3711,8610.21,2582.3711,8606.21,2578.3711" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="546" x="8619.21" y="2583.0059">codeGenVoidModelDataHeader(const char* functionName, llvm::Value*&amp; modelData) : llvm::BasicBlock*</text><ellipse cx="8610.21" cy="2592.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="177" x="8619.21" y="2595.9609">createFunction() : llvm::Function*</text><polygon fill="#FFFF44" points="8610.21,2600.2813,8614.21,2604.2813,8610.21,2608.2813,8606.21,2604.2813" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="8619.21" y="2608.916">verifyFunction() : llvm::Function*</text><polygon fill="#FFFF44" points="8610.21,2613.2363,8614.21,2617.2363,8610.21,2621.2363,8606.21,2617.2363" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="126" x="8619.21" y="2621.8711">codeGen() : llvm::Value*</text><!--MD5=[0fb2ac128fcb10ad5c350cd4fc1191dd]
class rrllvm.EvalConversionFactorCodeGen--><rect codeLine="91" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.EvalConversionFactorCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="396" x="8050.71" y="4564"/><ellipse cx="8157.46" cy="4580" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M8159.9331,4586.1431 Q8159.3521,4586.4419 8158.7129,4586.5913 Q8158.0738,4586.7407 8157.3682,4586.7407 Q8154.8614,4586.7407 8153.5415,4585.0889 Q8152.2217,4583.437 8152.2217,4580.3159 Q8152.2217,4577.1865 8153.5415,4575.5347 Q8154.8614,4573.8828 8157.3682,4573.8828 Q8158.0738,4573.8828 8158.7212,4574.0322 Q8159.3687,4574.1816 8159.9331,4574.4805 L8159.9331,4577.2031 Q8159.3023,4576.6221 8158.7088,4576.3523 Q8158.1153,4576.0825 8157.4844,4576.0825 Q8156.1397,4576.0825 8155.4549,4577.1492 Q8154.7701,4578.2158 8154.7701,4580.3159 Q8154.7701,4582.4077 8155.4549,4583.4744 Q8156.1397,4584.541 8157.4844,4584.541 Q8158.1153,4584.541 8158.7088,4584.2712 Q8159.3023,4584.0015 8159.9331,4583.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="174" x="8177.96" y="4584.5352">EvalConversionFactorCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8051.71" x2="8445.71" y1="4596" y2="4596"/><ellipse cx="8061.71" cy="4607" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="8070.71" y="4610.6348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8051.71" x2="8445.71" y1="4616.9551" y2="4616.9551"/><ellipse cx="8061.71" cy="4627.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="8070.71" y="4631.5898">EvalConversionFactorCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="8061.71" cy="4640.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="8070.71" y="4644.5449">~EvalConversionFactorCodeGen()</text><ellipse cx="8061.71" cy="4653.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="8070.71" y="4657.5">codeGen() : llvm::Value*</text><!--MD5=[68c8a3f7ccdda5ae8ec9df4c18cb6287]
class rrllvm.EvalInitialConditionsCodeGen--><rect codeLine="98" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="190.5059" id="rrllvm.EvalInitialConditionsCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="830" x="8481.71" y="4518.5"/><ellipse cx="8809.46" cy="4534.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M8811.9331,4540.6431 Q8811.3521,4540.9419 8810.7129,4541.0913 Q8810.0738,4541.2407 8809.3682,4541.2407 Q8806.8614,4541.2407 8805.5415,4539.5889 Q8804.2217,4537.937 8804.2217,4534.8159 Q8804.2217,4531.6865 8805.5415,4530.0347 Q8806.8614,4528.3828 8809.3682,4528.3828 Q8810.0738,4528.3828 8810.7212,4528.5322 Q8811.3687,4528.6816 8811.9331,4528.9805 L8811.9331,4531.7031 Q8811.3023,4531.1221 8810.7088,4530.8523 Q8810.1153,4530.5825 8809.4844,4530.5825 Q8808.1397,4530.5825 8807.4549,4531.6492 Q8806.7701,4532.7158 8806.7701,4534.8159 Q8806.7701,4536.9077 8807.4549,4537.9744 Q8808.1397,4539.041 8809.4844,4539.041 Q8810.1153,4539.041 8810.7088,4538.7712 Q8811.3023,4538.5015 8811.9331,4537.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="166" x="8829.96" y="4539.0352">EvalInitialConditionsCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8482.71" x2="9310.71" y1="4550.5" y2="4550.5"/><ellipse cx="8492.71" cy="4561.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="8501.71" y="4565.1348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8482.71" x2="9310.71" y1="4571.4551" y2="4571.4551"/><ellipse cx="8492.71" cy="4582.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="362" x="8501.71" y="4586.0898">EvalInitialConditionsCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="8492.71" cy="4595.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="173" x="8501.71" y="4599.0449">~EvalInitialConditionsCodeGen()</text><ellipse cx="8492.71" cy="4608.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="8501.71" y="4612">codeGen() : llvm::Value*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4618.3203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="591" x="8501.71" y="4624.9551">codeGenCompartments(StoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; loadResolver) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4631.2754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="605" x="8501.71" y="4637.9102">codeGenGlobalParameters(StoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; loadResolver) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4644.2305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="608" x="8501.71" y="4650.8652">codeGenInitCompartments(StoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; loadResolver) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4657.1855"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="622" x="8501.71" y="4663.8203">codeGenInitGlobalParameters(StoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; loadResolver) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4670.1406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="568" x="8501.71" y="4676.7754">codeGenInitSpecies(StoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; loadResolver) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4683.0957"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="551" x="8501.71" y="4689.7305">codeGenSpecies(StoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; loadResolver) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="8489.71" y="4696.0508"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="804" x="8501.71" y="4702.6855">codeGenStoichiometry(llvm::Value* modelData, ModelDataStoreSymbolResolver&amp; modelDataResolver, LoadSymbolResolver&amp; initialValueResolver) : void</text><!--MD5=[9f9f5236f82f6d201d9904d4b2f7d918]
class rrllvm.EvalRateRuleRatesCodeGen--><rect codeLine="112" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.EvalRateRuleRatesCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="375" x="9347.21" y="4564"/><ellipse cx="9450.96" cy="4580" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M9453.4331,4586.1431 Q9452.8521,4586.4419 9452.2129,4586.5913 Q9451.5738,4586.7407 9450.8682,4586.7407 Q9448.3614,4586.7407 9447.0415,4585.0889 Q9445.7217,4583.437 9445.7217,4580.3159 Q9445.7217,4577.1865 9447.0415,4575.5347 Q9448.3614,4573.8828 9450.8682,4573.8828 Q9451.5738,4573.8828 9452.2212,4574.0322 Q9452.8687,4574.1816 9453.4331,4574.4805 L9453.4331,4577.2031 Q9452.8023,4576.6221 9452.2088,4576.3523 Q9451.6153,4576.0825 9450.9844,4576.0825 Q9449.6397,4576.0825 9448.9549,4577.1492 Q9448.2701,4578.2158 9448.2701,4580.3159 Q9448.2701,4582.4077 9448.9549,4583.4744 Q9449.6397,4584.541 9450.9844,4584.541 Q9451.6153,4584.541 9452.2088,4584.2712 Q9452.8023,4584.0015 9453.4331,4583.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="159" x="9471.46" y="4584.5352">EvalRateRuleRatesCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9348.21" x2="9721.21" y1="4596" y2="4596"/><ellipse cx="9358.21" cy="4607" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="9367.21" y="4610.6348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9348.21" x2="9721.21" y1="4616.9551" y2="4616.9551"/><ellipse cx="9358.21" cy="4627.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="9367.21" y="4631.5898">EvalRateRuleRatesCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="9358.21" cy="4640.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="160" x="9367.21" y="4644.5449">~EvalRateRuleRatesCodeGen()</text><ellipse cx="9358.21" cy="4653.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="9367.21" y="4657.5">codeGen() : llvm::Value*</text><!--MD5=[287aeb7106ae8acfb640ad24502c6585]
class rrllvm.EvalReactionRatesCodeGen--><rect codeLine="119" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.EvalReactionRatesCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="375" x="9757.21" y="4564"/><ellipse cx="9861.96" cy="4580" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M9864.4331,4586.1431 Q9863.8521,4586.4419 9863.2129,4586.5913 Q9862.5738,4586.7407 9861.8682,4586.7407 Q9859.3614,4586.7407 9858.0415,4585.0889 Q9856.7217,4583.437 9856.7217,4580.3159 Q9856.7217,4577.1865 9858.0415,4575.5347 Q9859.3614,4573.8828 9861.8682,4573.8828 Q9862.5738,4573.8828 9863.2212,4574.0322 Q9863.8687,4574.1816 9864.4331,4574.4805 L9864.4331,4577.2031 Q9863.8023,4576.6221 9863.2088,4576.3523 Q9862.6153,4576.0825 9861.9844,4576.0825 Q9860.6397,4576.0825 9859.9549,4577.1492 Q9859.2701,4578.2158 9859.2701,4580.3159 Q9859.2701,4582.4077 9859.9549,4583.4744 Q9860.6397,4584.541 9861.9844,4584.541 Q9862.6153,4584.541 9863.2088,4584.2712 Q9863.8023,4584.0015 9864.4331,4583.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="157" x="9882.46" y="4584.5352">EvalReactionRatesCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9758.21" x2="10131.21" y1="4596" y2="4596"/><ellipse cx="9768.21" cy="4607" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="9777.21" y="4610.6348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9758.21" x2="10131.21" y1="4616.9551" y2="4616.9551"/><ellipse cx="9768.21" cy="4627.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="9777.21" y="4631.5898">EvalReactionRatesCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="9768.21" cy="4640.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="160" x="9777.21" y="4644.5449">~EvalReactionRatesCodeGen()</text><ellipse cx="9768.21" cy="4653.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="9777.21" y="4657.5">codeGen() : llvm::Value*</text><!--MD5=[9260e05f90b91e4a581d29dd96ae0f20]
class rrllvm.EvalVolatileStoichCodeGen--><rect codeLine="126" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.EvalVolatileStoichCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="489" x="10167.21" y="4551"/><ellipse cx="10331.96" cy="4567" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10334.4331,4573.1431 Q10333.8521,4573.4419 10333.2129,4573.5913 Q10332.5738,4573.7407 10331.8682,4573.7407 Q10329.3614,4573.7407 10328.0415,4572.0889 Q10326.7217,4570.437 10326.7217,4567.3159 Q10326.7217,4564.1865 10328.0415,4562.5347 Q10329.3614,4560.8828 10331.8682,4560.8828 Q10332.5738,4560.8828 10333.2212,4561.0322 Q10333.8687,4561.1816 10334.4331,4561.4805 L10334.4331,4564.2031 Q10333.8023,4563.6221 10333.2088,4563.3523 Q10332.6153,4563.0825 10331.9844,4563.0825 Q10330.6397,4563.0825 10329.9549,4564.1492 Q10329.2701,4565.2158 10329.2701,4567.3159 Q10329.2701,4569.4077 10329.9549,4570.4744 Q10330.6397,4571.541 10331.9844,4571.541 Q10332.6153,4571.541 10333.2088,4571.2712 Q10333.8023,4571.0015 10334.4331,4570.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="151" x="10352.46" y="4571.5352">EvalVolatileStoichCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10168.21" x2="10655.21" y1="4583" y2="4583"/><ellipse cx="10178.21" cy="4594" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="10187.21" y="4597.6348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10168.21" x2="10655.21" y1="4603.9551" y2="4603.9551"/><ellipse cx="10178.21" cy="4614.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="346" x="10187.21" y="4618.5898">EvalVolatileStoichCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="10178.21" cy="4627.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="10187.21" y="4631.5449">~EvalVolatileStoichCodeGen()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10175.21" y="4637.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="341" x="10187.21" y="4644.5">isConstantASTNode(const libsbml::ASTNode* ast) : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10175.21" y="4650.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="463" x="10187.21" y="4657.4551">isConstantSpeciesReference(const libsbml::SimpleSpeciesReference* ref) : bool {query}</text><ellipse cx="10178.21" cy="4666.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="10187.21" y="4670.4102">codeGen() : llvm::Value*</text><!--MD5=[8f4662784e4845572f5c7b7397016826]
class rrllvm.Event--><rect codeLine="135" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="294.1465" id="rrllvm.Event" style="stroke:#A80036;stroke-width:1.5;" width="288" x="10652.71" y="41"/><ellipse cx="10776.96" cy="57" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10779.4331,63.1431 Q10778.8521,63.4419 10778.2129,63.5913 Q10777.5738,63.7407 10776.8682,63.7407 Q10774.3614,63.7407 10773.0415,62.0889 Q10771.7217,60.437 10771.7217,57.3159 Q10771.7217,54.1865 10773.0415,52.5347 Q10774.3614,50.8828 10776.8682,50.8828 Q10777.5738,50.8828 10778.2212,51.0322 Q10778.8687,51.1816 10779.4331,51.4805 L10779.4331,54.2031 Q10778.8023,53.6221 10778.2088,53.3523 Q10777.6153,53.0825 10776.9844,53.0825 Q10775.6397,53.0825 10774.9549,54.1492 Q10774.2701,55.2158 10774.2701,57.3159 Q10774.2701,59.4077 10774.9549,60.4744 Q10775.6397,61.541 10776.9844,61.541 Q10777.6153,61.541 10778.2088,61.2712 Q10778.8023,61.0015 10779.4331,60.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="31" x="10797.46" y="61.5352">Event</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10653.71" x2="10939.71" y1="73" y2="73"/><ellipse cx="10663.71" cy="84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="168" x="10672.71" y="87.6348">model : LLVMExecutableModel&amp;</text><ellipse cx="10663.71" cy="96.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="10672.71" y="100.5898">assignTime : double</text><ellipse cx="10663.71" cy="109.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="74" x="10672.71" y="113.5449">delay : double</text><ellipse cx="10663.71" cy="122.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="74" x="10672.71" y="126.5">data : double*</text><ellipse cx="10663.71" cy="135.8203" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="120" x="10672.71" y="139.4551">dataSize : unsigned int</text><ellipse cx="10663.71" cy="148.7754" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="86" x="10672.71" y="152.4102">id : unsigned int</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10653.71" x2="10939.71" y1="158.7305" y2="158.7305"/><ellipse cx="10663.71" cy="169.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="252" x="10672.71" y="173.3652">Event(LLVMExecutableModel &amp;, unsigned int id)</text><ellipse cx="10663.71" cy="182.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="10672.71" y="186.3203">Event(const Event&amp; other)</text><ellipse cx="10663.71" cy="195.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="44" x="10672.71" y="199.2754">~Event()</text><ellipse cx="10663.71" cy="208.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="201" x="10672.71" y="212.2305">operator=(const Event&amp; rhs) : Event&amp;</text><ellipse cx="10663.71" cy="221.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="10672.71" y="225.1855">isCurrent() : bool {query}</text><ellipse cx="10663.71" cy="234.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="10672.71" y="238.1406">isExpired() : bool {query}</text><ellipse cx="10663.71" cy="247.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="145" x="10672.71" y="251.0957">isPersistent() : bool {query}</text><ellipse cx="10663.71" cy="260.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="115" x="10672.71" y="264.0508">isRipe() : bool {query}</text><ellipse cx="10663.71" cy="273.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="145" x="10672.71" y="277.0059">isTriggered() : bool {query}</text><ellipse cx="10663.71" cy="286.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="10672.71" y="289.9609">operator&lt;(const Event&amp; a, const Event&amp; b) : bool</text><ellipse cx="10663.71" cy="299.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="231" x="10672.71" y="302.916">useValuesFromTriggerTime() : bool {query}</text><ellipse cx="10663.71" cy="312.2363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="152" x="10672.71" y="315.8711">getPriority() : double {query}</text><ellipse cx="10663.71" cy="325.1914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="10672.71" y="328.8262">assign() : void {query}</text><!--MD5=[b784f01276cb04d80c3bbc2fbe422286]
class rrllvm.EventAssignCodeGen--><rect codeLine="157" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.EventAssignCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="511" x="10729.21" y="4564"/><ellipse cx="10919.96" cy="4580" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10922.4331,4586.1431 Q10921.8521,4586.4419 10921.2129,4586.5913 Q10920.5738,4586.7407 10919.8682,4586.7407 Q10917.3614,4586.7407 10916.0415,4585.0889 Q10914.7217,4583.437 10914.7217,4580.3159 Q10914.7217,4577.1865 10916.0415,4575.5347 Q10917.3614,4573.8828 10919.8682,4573.8828 Q10920.5738,4573.8828 10921.2212,4574.0322 Q10921.8687,4574.1816 10922.4331,4574.4805 L10922.4331,4577.2031 Q10921.8023,4576.6221 10921.2088,4576.3523 Q10920.6153,4576.0825 10919.9844,4576.0825 Q10918.6397,4576.0825 10917.9549,4577.1492 Q10917.2701,4578.2158 10917.2701,4580.3159 Q10917.2701,4582.4077 10917.9549,4583.4744 Q10918.6397,4584.541 10919.9844,4584.541 Q10920.6153,4584.541 10921.2088,4584.2712 Q10921.8023,4584.0015 10922.4331,4583.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="121" x="10940.46" y="4584.5352">EventAssignCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10730.21" x2="11239.21" y1="4596" y2="4596"/><ellipse cx="10740.21" cy="4607" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="10749.21" y="4610.6348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10730.21" x2="11239.21" y1="4616.9551" y2="4616.9551"/><ellipse cx="10740.21" cy="4627.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="319" x="10749.21" y="4631.5898">EventAssignCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="10740.21" cy="4640.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="10749.21" y="4644.5449">~EventAssignCodeGen()</text><ellipse cx="10740.21" cy="4653.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="10749.21" y="4657.5">eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool</text><!--MD5=[c5357713ffd8dec8581b00f6b6e6ea4f]
class rrllvm.EventCodeGenBase--><rect codeLine="164" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.EventCodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="511" x="10698.21" y="3802"/><ellipse cx="10803.46" cy="3818" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10805.9331,3824.1431 Q10805.3521,3824.4419 10804.7129,3824.5913 Q10804.0738,3824.7407 10803.3682,3824.7407 Q10800.8614,3824.7407 10799.5415,3823.0889 Q10798.2217,3821.437 10798.2217,3818.3159 Q10798.2217,3815.1865 10799.5415,3813.5347 Q10800.8614,3811.8828 10803.3682,3811.8828 Q10804.0738,3811.8828 10804.7212,3812.0322 Q10805.3687,3812.1816 10805.9331,3812.4805 L10805.9331,3815.2031 Q10805.3023,3814.6221 10804.7088,3814.3523 Q10804.1153,3814.0825 10803.4844,3814.0825 Q10802.1397,3814.0825 10801.4549,3815.1492 Q10800.7701,3816.2158 10800.7701,3818.3159 Q10800.7701,3820.4077 10801.4549,3821.4744 Q10802.1397,3822.541 10803.4844,3822.541 Q10804.1153,3822.541 10804.7088,3822.2712 Q10805.3023,3822.0015 10805.9331,3821.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="111" x="10823.96" y="3822.5352">EventCodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="179" x="11033.21" y="3799"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="177" x="11034.21" y="3811.6016">template&lt;typename Derived&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10699.21" x2="11208.21" y1="3834" y2="3834"/><line style="stroke:#A80036;stroke-width:1.5;" x1="10699.21" x2="11208.21" y1="3842" y2="3842"/><ellipse cx="10709.21" cy="3853" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="306" x="10718.21" y="3856.6348">EventCodeGenBase(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="10709.21" cy="3865.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="10718.21" y="3869.5898">~EventCodeGenBase()</text><ellipse cx="10709.21" cy="3878.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="10718.21" y="3882.5449">eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool</text><ellipse cx="10709.21" cy="3891.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="10718.21" y="3895.5">codeGen() : llvm::Value*</text><!--MD5=[08c8f67983ef6ddfd09632eee48515f0]
class rrllvm.EventQueue--><rect codeLine="171" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="203.4609" id="rrllvm.EventQueue" style="stroke:#A80036;stroke-width:1.5;" width="451" x="11244.21" y="3750.5"/><ellipse cx="11431.46" cy="3766.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M11433.9331,3772.6431 Q11433.3521,3772.9419 11432.7129,3773.0913 Q11432.0738,3773.2407 11431.3682,3773.2407 Q11428.8614,3773.2407 11427.5415,3771.5889 Q11426.2217,3769.937 11426.2217,3766.8159 Q11426.2217,3763.6865 11427.5415,3762.0347 Q11428.8614,3760.3828 11431.3682,3760.3828 Q11432.0738,3760.3828 11432.7212,3760.5322 Q11433.3687,3760.6816 11433.9331,3760.9805 L11433.9331,3763.7031 Q11433.3023,3763.1221 11432.7088,3762.8523 Q11432.1153,3762.5825 11431.4844,3762.5825 Q11430.1397,3762.5825 11429.4549,3763.6492 Q11428.7701,3764.7158 11428.7701,3766.8159 Q11428.7701,3768.9077 11429.4549,3769.9744 Q11430.1397,3771.041 11431.4844,3771.041 Q11432.1153,3771.041 11432.7088,3770.7712 Q11433.3023,3770.5015 11433.9331,3769.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="68" x="11451.96" y="3771.0352">EventQueue</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11245.21" x2="11694.21" y1="3782.5" y2="3782.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11252.21" y="3790.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="94" x="11264.21" y="3797.1348">comp : _Compare</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11252.21" y="3803.4551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="11264.21" y="3810.0898">sequence : _Sequence</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11245.21" x2="11694.21" y1="3816.4102" y2="3816.4102"/><ellipse cx="11255.21" cy="3827.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="105" x="11264.21" y="3831.0449">applyEvents() : bool</text><ellipse cx="11255.21" cy="3840.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="11264.21" y="3844">eraseExpiredEvents() : bool</text><ellipse cx="11255.21" cy="3853.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="137" x="11264.21" y="3856.9551">hasCurrentEvents() : bool</text><ellipse cx="11255.21" cy="3866.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="122" x="11264.21" y="3869.9102">top() : const_reference</text><ellipse cx="11255.21" cy="3879.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="11264.21" y="3882.8652">getNextPendingEventTime() : double</text><ellipse cx="11255.21" cy="3892.1855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="425" x="11264.21" y="3895.8203">operator&lt;&lt;(std::ostream&amp; stream, const EventQueue&amp; queue) : std :: ostream&amp;</text><ellipse cx="11255.21" cy="3905.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="147" x="11264.21" y="3908.7754">size() : unsigned int {query}</text><ellipse cx="11255.21" cy="3918.0957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="341" x="11264.21" y="3921.7305">loadState(std::istream&amp; in, LLVMExecutableModel&amp; model) : void</text><ellipse cx="11255.21" cy="3931.0508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="11264.21" y="3934.6855">push(const Event&amp; e) : void</text><ellipse cx="11255.21" cy="3944.0059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="186" x="11264.21" y="3947.6406">saveState(std::ostream&amp; out) : void</text><!--MD5=[03061622deafc39a49a9350afb3239ac]
class rrllvm.EventTriggerCodeGen--><rect codeLine="186" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.EventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="511" x="11275.21" y="4564"/><ellipse cx="11463.46" cy="4580" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M11465.9331,4586.1431 Q11465.3521,4586.4419 11464.7129,4586.5913 Q11464.0738,4586.7407 11463.3682,4586.7407 Q11460.8614,4586.7407 11459.5415,4585.0889 Q11458.2217,4583.437 11458.2217,4580.3159 Q11458.2217,4577.1865 11459.5415,4575.5347 Q11460.8614,4573.8828 11463.3682,4573.8828 Q11464.0738,4573.8828 11464.7212,4574.0322 Q11465.3687,4574.1816 11465.9331,4574.4805 L11465.9331,4577.2031 Q11465.3023,4576.6221 11464.7088,4576.3523 Q11464.1153,4576.0825 11463.4844,4576.0825 Q11462.1397,4576.0825 11461.4549,4577.1492 Q11460.7701,4578.2158 11460.7701,4580.3159 Q11460.7701,4582.4077 11461.4549,4583.4744 Q11462.1397,4584.541 11463.4844,4584.541 Q11464.1153,4584.541 11464.7088,4584.2712 Q11465.3023,4584.0015 11465.9331,4583.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="126" x="11483.96" y="4584.5352">EventTriggerCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11276.21" x2="11785.21" y1="4596" y2="4596"/><ellipse cx="11286.21" cy="4607" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="11295.21" y="4610.6348">FunctionName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11276.21" x2="11785.21" y1="4616.9551" y2="4616.9551"/><ellipse cx="11286.21" cy="4627.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="322" x="11295.21" y="4631.5898">EventTriggerCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="11286.21" cy="4640.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="11295.21" y="4644.5449">~EventTriggerCodeGen()</text><ellipse cx="11286.21" cy="4653.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="485" x="11295.21" y="4657.5">eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool</text><!--MD5=[7d0977a4cb9c6bc75d66121029751b1f]
class rrllvm.FunctionResolver--><rect codeLine="193" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="190.5059" id="rrllvm.FunctionResolver" style="stroke:#A80036;stroke-width:1.5;" width="654" x="2784.71" y="2392"/><ellipse cx="3059.46" cy="2408" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3061.9331,2414.1431 Q3061.3521,2414.4419 3060.7129,2414.5913 Q3060.0738,2414.7407 3059.3682,2414.7407 Q3056.8614,2414.7407 3055.5415,2413.0889 Q3054.2217,2411.437 3054.2217,2408.3159 Q3054.2217,2405.1865 3055.5415,2403.5347 Q3056.8614,2401.8828 3059.3682,2401.8828 Q3060.0738,2401.8828 3060.7212,2402.0322 Q3061.3687,2402.1816 3061.9331,2402.4805 L3061.9331,2405.2031 Q3061.3023,2404.6221 3060.7088,2404.3523 Q3060.1153,2404.0825 3059.4844,2404.0825 Q3058.1397,2404.0825 3057.4549,2405.1492 Q3056.7701,2406.2158 3056.7701,2408.3159 Q3056.7701,2410.4077 3057.4549,2411.4744 Q3058.1397,2412.541 3059.4844,2412.541 Q3060.1153,2412.541 3060.7088,2412.2712 Q3061.3023,2412.0015 3061.9331,2411.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="96" x="3079.96" y="2412.5352">FunctionResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2785.71" x2="3437.71" y1="2424" y2="2424"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2792.71" y="2432"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="2804.71" y="2438.6348">parentResolver : LoadSymbolResolver&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2792.71" y="2444.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="276" x="2804.71" y="2451.5898">modelGenContext : const ModelGeneratorContext&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2792.71" y="2457.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2804.71" y="2464.5449">model : const libsbml::Model*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2792.71" y="2470.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="2804.71" y="2477.5">builder : llvm::IRBuilder&lt;&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2792.71" y="2483.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="2804.71" y="2490.4551">modelData : llvm::Value*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2792.71" y="2496.7754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="2804.71" y="2503.4102">symbols : std::map&lt;std::string, llvm::Value*&gt;*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2785.71" x2="3437.71" y1="2509.7305" y2="2509.7305"/><ellipse cx="2795.71" cy="2520.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="628" x="2804.71" y="2524.3652">FunctionResolver(LoadSymbolResolver&amp; parentResolver, llvm::Value* modelData, const ModelGeneratorContext&amp; ctx)</text><ellipse cx="2795.71" cy="2533.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="2804.71" y="2537.3203">~FunctionResolver()</text><ellipse cx="2795.71" cy="2546.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="537" x="2804.71" y="2550.2754">loadSymbolValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args) : llvm::Value*</text><ellipse cx="2795.71" cy="2559.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="149" x="2804.71" y="2563.2305">recursiveSymbolPop() : void</text><ellipse cx="2795.71" cy="2572.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="293" x="2804.71" y="2576.1855">recursiveSymbolPush(const std::string&amp; symbol) : void</text><!--MD5=[5ff77c64a1bc10b25e22187c2d6cdf35]
class rrllvm.GetBoundarySpeciesAmountCodeGen--><rect codeLine="207" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="431" x="13013.21" y="4557.5"/><ellipse cx="13117.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M13119.9331,4579.6431 Q13119.3521,4579.9419 13118.7129,4580.0913 Q13118.0738,4580.2407 13117.3682,4580.2407 Q13114.8614,4580.2407 13113.5415,4578.5889 Q13112.2217,4576.937 13112.2217,4573.8159 Q13112.2217,4570.6865 13113.5415,4569.0347 Q13114.8614,4567.3828 13117.3682,4567.3828 Q13118.0738,4567.3828 13118.7212,4567.5322 Q13119.3687,4567.6816 13119.9331,4567.9805 L13119.9331,4570.7031 Q13119.3023,4570.1221 13118.7088,4569.8523 Q13118.1153,4569.5825 13117.4844,4569.5825 Q13116.1397,4569.5825 13115.4549,4570.6492 Q13114.7701,4571.7158 13114.7701,4573.8159 Q13114.7701,4575.9077 13115.4549,4576.9744 Q13116.1397,4578.041 13117.4844,4578.041 Q13118.1153,4578.041 13118.7088,4577.7712 Q13119.3023,4577.5015 13119.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="214" x="13137.96" y="4578.0352">GetBoundarySpeciesAmountCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13014.21" x2="13443.21" y1="4589.5" y2="4589.5"/><ellipse cx="13024.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="13033.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="13024.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="13033.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13014.21" x2="13443.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="13024.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="13033.21" y="4638.0449">GetBoundarySpeciesAmountCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="13024.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="13033.21" y="4651">~GetBoundarySpeciesAmountCodeGen()</text><ellipse cx="13024.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="13033.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[0d1c7c39f09483aef221a6c100511da4]
class rrllvm.GetBoundarySpeciesConcentrationCodeGen--><rect codeLine="215" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="465" x="13479.21" y="4557.5"/><ellipse cx="13582.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M13585.4331,4579.6431 Q13584.8521,4579.9419 13584.2129,4580.0913 Q13583.5738,4580.2407 13582.8682,4580.2407 Q13580.3614,4580.2407 13579.0415,4578.5889 Q13577.7217,4576.937 13577.7217,4573.8159 Q13577.7217,4570.6865 13579.0415,4569.0347 Q13580.3614,4567.3828 13582.8682,4567.3828 Q13583.5738,4567.3828 13584.2212,4567.5322 Q13584.8687,4567.6816 13585.4331,4567.9805 L13585.4331,4570.7031 Q13584.8023,4570.1221 13584.2088,4569.8523 Q13583.6153,4569.5825 13582.9844,4569.5825 Q13581.6397,4569.5825 13580.9549,4570.6492 Q13580.2701,4571.7158 13580.2701,4573.8159 Q13580.2701,4575.9077 13580.9549,4576.9744 Q13581.6397,4578.041 13582.9844,4578.041 Q13583.6153,4578.041 13584.2088,4577.7712 Q13584.8023,4577.5015 13585.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="249" x="13603.46" y="4578.0352">GetBoundarySpeciesConcentrationCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13480.21" x2="13943.21" y1="4589.5" y2="4589.5"/><ellipse cx="13490.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="13499.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="13490.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="13499.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13480.21" x2="13943.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="13490.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="439" x="13499.21" y="4638.0449">GetBoundarySpeciesConcentrationCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="13490.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="250" x="13499.21" y="4651">~GetBoundarySpeciesConcentrationCodeGen()</text><ellipse cx="13490.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="13499.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[fb0bed739e679918c14af9c24e7ba8db]
class rrllvm.GetCompartmentInitVolumeCodeGen--><rect codeLine="223" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="428" x="15795.71" y="4557.5"/><ellipse cx="15899.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M15901.9331,4579.6431 Q15901.3521,4579.9419 15900.7129,4580.0913 Q15900.0738,4580.2407 15899.3682,4580.2407 Q15896.8614,4580.2407 15895.5415,4578.5889 Q15894.2217,4576.937 15894.2217,4573.8159 Q15894.2217,4570.6865 15895.5415,4569.0347 Q15896.8614,4567.3828 15899.3682,4567.3828 Q15900.0738,4567.3828 15900.7212,4567.5322 Q15901.3687,4567.6816 15901.9331,4567.9805 L15901.9331,4570.7031 Q15901.3023,4570.1221 15900.7088,4569.8523 Q15900.1153,4569.5825 15899.4844,4569.5825 Q15898.1397,4569.5825 15897.4549,4570.6492 Q15896.7701,4571.7158 15896.7701,4573.8159 Q15896.7701,4575.9077 15897.4549,4576.9744 Q15898.1397,4578.041 15899.4844,4578.041 Q15900.1153,4578.041 15900.7088,4577.7712 Q15901.3023,4577.5015 15901.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="212" x="15919.96" y="4578.0352">GetCompartmentInitVolumeCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="15796.71" x2="16222.71" y1="4589.5" y2="4589.5"/><ellipse cx="15806.71" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="15815.71" y="4604.1348">FunctionName : static const char*</text><ellipse cx="15806.71" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="15815.71" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="15796.71" x2="16222.71" y1="4623.4102" y2="4623.4102"/><ellipse cx="15806.71" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="402" x="15815.71" y="4638.0449">GetCompartmentInitVolumeCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="15806.71" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="213" x="15815.71" y="4651">~GetCompartmentInitVolumeCodeGen()</text><ellipse cx="15806.71" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="15815.71" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[8d5199f86eb59ee2404de1a2e933a574]
class rrllvm.GetCompartmentVolumeCodeGen--><rect codeLine="231" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="411" x="13979.21" y="4557.5"/><ellipse cx="14082.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M14085.4331,4579.6431 Q14084.8521,4579.9419 14084.2129,4580.0913 Q14083.5738,4580.2407 14082.8682,4580.2407 Q14080.3614,4580.2407 14079.0415,4578.5889 Q14077.7217,4576.937 14077.7217,4573.8159 Q14077.7217,4570.6865 14079.0415,4569.0347 Q14080.3614,4567.3828 14082.8682,4567.3828 Q14083.5738,4567.3828 14084.2212,4567.5322 Q14084.8687,4567.6816 14085.4331,4567.9805 L14085.4331,4570.7031 Q14084.8023,4570.1221 14084.2088,4569.8523 Q14083.6153,4569.5825 14082.9844,4569.5825 Q14081.6397,4569.5825 14080.9549,4570.6492 Q14080.2701,4571.7158 14080.2701,4573.8159 Q14080.2701,4575.9077 14080.9549,4576.9744 Q14081.6397,4578.041 14082.9844,4578.041 Q14083.6153,4578.041 14084.2088,4577.7712 Q14084.8023,4577.5015 14085.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="195" x="14103.46" y="4578.0352">GetCompartmentVolumeCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13980.21" x2="14389.21" y1="4589.5" y2="4589.5"/><ellipse cx="13990.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="13999.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="13990.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="13999.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13980.21" x2="14389.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="13990.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="385" x="13999.21" y="4638.0449">GetCompartmentVolumeCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="13990.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="196" x="13999.21" y="4651">~GetCompartmentVolumeCodeGen()</text><ellipse cx="13990.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="13999.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[201dd85ac93d86d0f5177e9d626323d9]
class rrllvm.GetEventDelayCodeGen--><rect codeLine="239" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="138.6855" id="rrllvm.GetEventDelayCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="355" x="11821.21" y="4544.5"/><ellipse cx="11926.46" cy="4560.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M11928.9331,4566.6431 Q11928.3521,4566.9419 11927.7129,4567.0913 Q11927.0738,4567.2407 11926.3682,4567.2407 Q11923.8614,4567.2407 11922.5415,4565.5889 Q11921.2217,4563.937 11921.2217,4560.8159 Q11921.2217,4557.6865 11922.5415,4556.0347 Q11923.8614,4554.3828 11926.3682,4554.3828 Q11927.0738,4554.3828 11927.7212,4554.5322 Q11928.3687,4554.6816 11928.9331,4554.9805 L11928.9331,4557.7031 Q11928.3023,4557.1221 11927.7088,4556.8523 Q11927.1153,4556.5825 11926.4844,4556.5825 Q11925.1397,4556.5825 11924.4549,4557.6492 Q11923.7701,4558.7158 11923.7701,4560.8159 Q11923.7701,4562.9077 11924.4549,4563.9744 Q11925.1397,4565.041 11926.4844,4565.041 Q11927.1153,4565.041 11927.7088,4564.7712 Q11928.3023,4564.5015 11928.9331,4563.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="136" x="11946.96" y="4565.0352">GetEventDelayCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11822.21" x2="12175.21" y1="4576.5" y2="4576.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11829.21" y="4584.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="11841.21" y="4591.1348">node : libsbml::ASTNode*</text><ellipse cx="11832.21" cy="4600.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="11841.21" y="4604.0898">FunctionName : static const char*</text><ellipse cx="11832.21" cy="4613.4102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="11841.21" y="4617.0449">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11822.21" x2="12175.21" y1="4623.3652" y2="4623.3652"/><ellipse cx="11832.21" cy="4634.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="11841.21" y="4638">GetEventDelayCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="11832.21" cy="4647.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="11841.21" y="4650.9551">~GetEventDelayCodeGen()</text><ellipse cx="11832.21" cy="4660.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="271" x="11841.21" y="4663.9102">getMath(const libsbml::Event*) : libsbml::ASTNode*</text><ellipse cx="11832.21" cy="4673.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="11841.21" y="4676.8652">createRet(llvm::Value* value) : llvm::Value*</text><!--MD5=[fa65b4c9f951290c1fe4c6980c3bb4db]
class rrllvm.GetEventPriorityCodeGen--><rect codeLine="249" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.GetEventPriorityCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="365" x="12211.21" y="4551"/><ellipse cx="12317.46" cy="4567" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M12319.9331,4573.1431 Q12319.3521,4573.4419 12318.7129,4573.5913 Q12318.0738,4573.7407 12317.3682,4573.7407 Q12314.8614,4573.7407 12313.5415,4572.0889 Q12312.2217,4570.437 12312.2217,4567.3159 Q12312.2217,4564.1865 12313.5415,4562.5347 Q12314.8614,4560.8828 12317.3682,4560.8828 Q12318.0738,4560.8828 12318.7212,4561.0322 Q12319.3687,4561.1816 12319.9331,4561.4805 L12319.9331,4564.2031 Q12319.3023,4563.6221 12318.7088,4563.3523 Q12318.1153,4563.0825 12317.4844,4563.0825 Q12316.1397,4563.0825 12315.4549,4564.1492 Q12314.7701,4565.2158 12314.7701,4567.3159 Q12314.7701,4569.4077 12315.4549,4570.4744 Q12316.1397,4571.541 12317.4844,4571.541 Q12318.1153,4571.541 12318.7088,4571.2712 Q12319.3023,4571.0015 12319.9331,4570.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="144" x="12337.96" y="4571.5352">GetEventPriorityCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="12212.21" x2="12575.21" y1="4583" y2="4583"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="12219.21" y="4591"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="12231.21" y="4597.6348">node : libsbml::ASTNode*</text><ellipse cx="12222.21" cy="4606.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="12231.21" y="4610.5898">FunctionName : static const char*</text><ellipse cx="12222.21" cy="4619.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="12231.21" y="4623.5449">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="12212.21" x2="12575.21" y1="4629.8652" y2="4629.8652"/><ellipse cx="12222.21" cy="4640.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="339" x="12231.21" y="4644.5">GetEventPriorityCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="12222.21" cy="4653.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="150" x="12231.21" y="4657.4551">~GetEventPriorityCodeGen()</text><ellipse cx="12222.21" cy="4666.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="271" x="12231.21" y="4670.4102">getMath(const libsbml::Event*) : libsbml::ASTNode*</text><!--MD5=[1462857d18fcba5900b677fc02a79a8c]
class rrllvm.GetEventTriggerCodeGen--><rect codeLine="258" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="138.6855" id="rrllvm.GetEventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="366" x="12611.71" y="4544.5"/><ellipse cx="12717.46" cy="4560.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M12719.9331,4566.6431 Q12719.3521,4566.9419 12718.7129,4567.0913 Q12718.0738,4567.2407 12717.3682,4567.2407 Q12714.8614,4567.2407 12713.5415,4565.5889 Q12712.2217,4563.937 12712.2217,4560.8159 Q12712.2217,4557.6865 12713.5415,4556.0347 Q12714.8614,4554.3828 12717.3682,4554.3828 Q12718.0738,4554.3828 12718.7212,4554.5322 Q12719.3687,4554.6816 12719.9331,4554.9805 L12719.9331,4557.7031 Q12719.3023,4557.1221 12718.7088,4556.8523 Q12718.1153,4556.5825 12717.4844,4556.5825 Q12716.1397,4556.5825 12715.4549,4557.6492 Q12714.7701,4558.7158 12714.7701,4560.8159 Q12714.7701,4562.9077 12715.4549,4563.9744 Q12716.1397,4565.041 12717.4844,4565.041 Q12718.1153,4565.041 12718.7088,4564.7712 Q12719.3023,4564.5015 12719.9331,4563.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="146" x="12737.96" y="4565.0352">GetEventTriggerCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="12612.71" x2="12976.71" y1="4576.5" y2="4576.5"/><ellipse cx="12622.71" cy="4587.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="12631.71" y="4591.1348">FunctionName : static const char*</text><ellipse cx="12622.71" cy="4600.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="12631.71" y="4604.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="12612.71" x2="12976.71" y1="4610.4102" y2="4610.4102"/><ellipse cx="12622.71" cy="4621.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="340" x="12631.71" y="4625.0449">GetEventTriggerCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="12622.71" cy="4634.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="12631.71" y="4638">~GetEventTriggerCodeGen()</text><ellipse cx="12622.71" cy="4647.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="271" x="12631.71" y="4650.9551">getMath(const libsbml::Event*) : libsbml::ASTNode*</text><ellipse cx="12622.71" cy="4660.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="12631.71" y="4663.9102">getRetType() : llvm::Type*</text><ellipse cx="12622.71" cy="4673.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="191" x="12631.71" y="4676.8652">createRet(llvm::Value*) : llvm::Value*</text><!--MD5=[e8d37224008332a99a09796cc5f071a8]
class rrllvm.GetEventValueCodeGenBase--><rect codeLine="268" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetEventValueCodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="779" x="11842.21" y="3795.5"/><ellipse cx="11857.21" cy="3811.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M11859.6831,3817.6431 Q11859.1021,3817.9419 11858.4629,3818.0913 Q11857.8238,3818.2407 11857.1182,3818.2407 Q11854.6114,3818.2407 11853.2915,3816.5889 Q11851.9717,3814.937 11851.9717,3811.8159 Q11851.9717,3808.6865 11853.2915,3807.0347 Q11854.6114,3805.3828 11857.1182,3805.3828 Q11857.8238,3805.3828 11858.4712,3805.5322 Q11859.1187,3805.6816 11859.6831,3805.9805 L11859.6831,3808.7031 Q11859.0523,3808.1221 11858.4588,3807.8523 Q11857.8653,3807.5825 11857.2344,3807.5825 Q11855.8897,3807.5825 11855.2049,3808.6492 Q11854.5201,3809.7158 11854.5201,3811.8159 Q11854.5201,3813.9077 11855.2049,3814.9744 Q11855.8897,3816.041 11857.2344,3816.041 Q11857.8653,3816.041 11858.4588,3815.7712 Q11859.0523,3815.5015 11859.6831,3814.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="163" x="11871.21" y="3816.0352">GetEventValueCodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="582" x="12042.21" y="3792.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="580" x="12043.21" y="3805.1016">template&lt;typename Derived, typename FunctionPtrType=GetEventValueCodeGenBase_FunctionPtr&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11843.21" x2="12620.21" y1="3827.5" y2="3827.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="11843.21" x2="12620.21" y1="3835.5" y2="3835.5"/><ellipse cx="11853.21" cy="3846.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="353" x="11862.21" y="3850.1348">GetEventValueCodeGenBase(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="11853.21" cy="3859.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="164" x="11862.21" y="3863.0898">~GetEventValueCodeGenBase()</text><ellipse cx="11853.21" cy="3872.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="11862.21" y="3876.0449">getRetType() : llvm::Type*</text><ellipse cx="11853.21" cy="3885.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="11862.21" y="3889">codeGen() : llvm::Value*</text><ellipse cx="11853.21" cy="3898.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="11862.21" y="3901.9551">createRet(llvm::Value* value) : llvm::Value*</text><!--MD5=[08c813eea3167dd7812fccd7fe930e3f]
class rrllvm.GetFloatingSpeciesAmountCodeGen--><rect codeLine="276" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="423" x="14425.21" y="4557.5"/><ellipse cx="14530.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M14532.9331,4579.6431 Q14532.3521,4579.9419 14531.7129,4580.0913 Q14531.0738,4580.2407 14530.3682,4580.2407 Q14527.8614,4580.2407 14526.5415,4578.5889 Q14525.2217,4576.937 14525.2217,4573.8159 Q14525.2217,4570.6865 14526.5415,4569.0347 Q14527.8614,4567.3828 14530.3682,4567.3828 Q14531.0738,4567.3828 14531.7212,4567.5322 Q14532.3687,4567.6816 14532.9331,4567.9805 L14532.9331,4570.7031 Q14532.3023,4570.1221 14531.7088,4569.8523 Q14531.1153,4569.5825 14530.4844,4569.5825 Q14529.1397,4569.5825 14528.4549,4570.6492 Q14527.7701,4571.7158 14527.7701,4573.8159 Q14527.7701,4575.9077 14528.4549,4576.9744 Q14529.1397,4578.041 14530.4844,4578.041 Q14531.1153,4578.041 14531.7088,4577.7712 Q14532.3023,4577.5015 14532.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="204" x="14550.96" y="4578.0352">GetFloatingSpeciesAmountCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="14426.21" x2="14847.21" y1="4589.5" y2="4589.5"/><ellipse cx="14436.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="14445.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="14436.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="14445.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="14426.21" x2="14847.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="14436.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="397" x="14445.21" y="4638.0449">GetFloatingSpeciesAmountCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="14436.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="14445.21" y="4651">~GetFloatingSpeciesAmountCodeGen()</text><ellipse cx="14436.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="14445.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[332138836f9150564b99beec3db12fa4]
class rrllvm.GetFloatingSpeciesConcentrationCodeGen--><rect codeLine="284" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="457" x="14883.21" y="4557.5"/><ellipse cx="14987.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M14990.4331,4579.6431 Q14989.8521,4579.9419 14989.2129,4580.0913 Q14988.5738,4580.2407 14987.8682,4580.2407 Q14985.3614,4580.2407 14984.0415,4578.5889 Q14982.7217,4576.937 14982.7217,4573.8159 Q14982.7217,4570.6865 14984.0415,4569.0347 Q14985.3614,4567.3828 14987.8682,4567.3828 Q14988.5738,4567.3828 14989.2212,4567.5322 Q14989.8687,4567.6816 14990.4331,4567.9805 L14990.4331,4570.7031 Q14989.8023,4570.1221 14989.2088,4569.8523 Q14988.6153,4569.5825 14987.9844,4569.5825 Q14986.6397,4569.5825 14985.9549,4570.6492 Q14985.2701,4571.7158 14985.2701,4573.8159 Q14985.2701,4575.9077 14985.9549,4576.9744 Q14986.6397,4578.041 14987.9844,4578.041 Q14988.6153,4578.041 14989.2088,4577.7712 Q14989.8023,4577.5015 14990.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="239" x="15008.46" y="4578.0352">GetFloatingSpeciesConcentrationCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="14884.21" x2="15339.21" y1="4589.5" y2="4589.5"/><ellipse cx="14894.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="14903.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="14894.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="14903.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="14884.21" x2="15339.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="14894.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="431" x="14903.21" y="4638.0449">GetFloatingSpeciesConcentrationCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="14894.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="242" x="14903.21" y="4651">~GetFloatingSpeciesConcentrationCodeGen()</text><ellipse cx="14894.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="14903.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[45bd29b7bd2e8ff015a8dc02cfc2aed8]
class rrllvm.GetFloatingSpeciesInitAmountCodeGen--><rect codeLine="292" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="440" x="16258.71" y="4557.5"/><ellipse cx="16363.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M16366.4331,4579.6431 Q16365.8521,4579.9419 16365.2129,4580.0913 Q16364.5738,4580.2407 16363.8682,4580.2407 Q16361.3614,4580.2407 16360.0415,4578.5889 Q16358.7217,4576.937 16358.7217,4573.8159 Q16358.7217,4570.6865 16360.0415,4569.0347 Q16361.3614,4567.3828 16363.8682,4567.3828 Q16364.5738,4567.3828 16365.2212,4567.5322 Q16365.8687,4567.6816 16366.4331,4567.9805 L16366.4331,4570.7031 Q16365.8023,4570.1221 16365.2088,4569.8523 Q16364.6153,4569.5825 16363.9844,4569.5825 Q16362.6397,4569.5825 16361.9549,4570.6492 Q16361.2701,4571.7158 16361.2701,4573.8159 Q16361.2701,4575.9077 16361.9549,4576.9744 Q16362.6397,4578.041 16363.9844,4578.041 Q16364.6153,4578.041 16365.2088,4577.7712 Q16365.8023,4577.5015 16366.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="221" x="16384.46" y="4578.0352">GetFloatingSpeciesInitAmountCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="16259.71" x2="16697.71" y1="4589.5" y2="4589.5"/><ellipse cx="16269.71" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="16278.71" y="4604.1348">FunctionName : static const char*</text><ellipse cx="16269.71" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="16278.71" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="16259.71" x2="16697.71" y1="4623.4102" y2="4623.4102"/><ellipse cx="16269.71" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="414" x="16278.71" y="4638.0449">GetFloatingSpeciesInitAmountCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="16269.71" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="16278.71" y="4651">~GetFloatingSpeciesInitAmountCodeGen()</text><ellipse cx="16269.71" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="16278.71" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[65c9dd2fc4165053575b08b5d4e4baaf]
class rrllvm.GetFloatingSpeciesInitConcentrationCodeGen--><rect codeLine="300" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="474" x="16733.71" y="4557.5"/><ellipse cx="16838.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M16840.9331,4579.6431 Q16840.3521,4579.9419 16839.7129,4580.0913 Q16839.0738,4580.2407 16838.3682,4580.2407 Q16835.8614,4580.2407 16834.5415,4578.5889 Q16833.2217,4576.937 16833.2217,4573.8159 Q16833.2217,4570.6865 16834.5415,4569.0347 Q16835.8614,4567.3828 16838.3682,4567.3828 Q16839.0738,4567.3828 16839.7212,4567.5322 Q16840.3687,4567.6816 16840.9331,4567.9805 L16840.9331,4570.7031 Q16840.3023,4570.1221 16839.7088,4569.8523 Q16839.1153,4569.5825 16838.4844,4569.5825 Q16837.1397,4569.5825 16836.4549,4570.6492 Q16835.7701,4571.7158 16835.7701,4573.8159 Q16835.7701,4575.9077 16836.4549,4576.9744 Q16837.1397,4578.041 16838.4844,4578.041 Q16839.1153,4578.041 16839.7088,4577.7712 Q16840.3023,4577.5015 16840.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="256" x="16858.96" y="4578.0352">GetFloatingSpeciesInitConcentrationCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="16734.71" x2="17206.71" y1="4589.5" y2="4589.5"/><ellipse cx="16744.71" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="16753.71" y="4604.1348">FunctionName : static const char*</text><ellipse cx="16744.71" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="16753.71" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="16734.71" x2="17206.71" y1="4623.4102" y2="4623.4102"/><ellipse cx="16744.71" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="448" x="16753.71" y="4638.0449">GetFloatingSpeciesInitConcentrationCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="16744.71" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="16753.71" y="4651">~GetFloatingSpeciesInitConcentrationCodeGen()</text><ellipse cx="16744.71" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="16753.71" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[ecba81b5e21cddfcf360d33fd81fa0a6]
class rrllvm.GetGlobalParameterCodeGen--><rect codeLine="308" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="385" x="15375.21" y="4557.5"/><ellipse cx="15478.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M15480.9331,4579.6431 Q15480.3521,4579.9419 15479.7129,4580.0913 Q15479.0738,4580.2407 15478.3682,4580.2407 Q15475.8614,4580.2407 15474.5415,4578.5889 Q15473.2217,4576.937 15473.2217,4573.8159 Q15473.2217,4570.6865 15474.5415,4569.0347 Q15475.8614,4567.3828 15478.3682,4567.3828 Q15479.0738,4567.3828 15479.7212,4567.5322 Q15480.3687,4567.6816 15480.9331,4567.9805 L15480.9331,4570.7031 Q15480.3023,4570.1221 15479.7088,4569.8523 Q15479.1153,4569.5825 15478.4844,4569.5825 Q15477.1397,4569.5825 15476.4549,4570.6492 Q15475.7701,4571.7158 15475.7701,4573.8159 Q15475.7701,4575.9077 15476.4549,4576.9744 Q15477.1397,4578.041 15478.4844,4578.041 Q15479.1153,4578.041 15479.7088,4577.7712 Q15480.3023,4577.5015 15480.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="170" x="15498.96" y="4578.0352">GetGlobalParameterCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="15376.21" x2="15759.21" y1="4589.5" y2="4589.5"/><ellipse cx="15386.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="15395.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="15386.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="15395.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="15376.21" x2="15759.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="15386.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="15395.21" y="4638.0449">GetGlobalParameterCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="15386.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="170" x="15395.21" y="4651">~GetGlobalParameterCodeGen()</text><ellipse cx="15386.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="15395.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[d3b0a9350afeda80ef4355409654cb0d]
class rrllvm.GetGlobalParameterInitValueCodeGen--><rect codeLine="316" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.GetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="431" x="17243.21" y="4557.5"/><ellipse cx="17344.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M17347.4331,4579.6431 Q17346.8521,4579.9419 17346.2129,4580.0913 Q17345.5738,4580.2407 17344.8682,4580.2407 Q17342.3614,4580.2407 17341.0415,4578.5889 Q17339.7217,4576.937 17339.7217,4573.8159 Q17339.7217,4570.6865 17341.0415,4569.0347 Q17342.3614,4567.3828 17344.8682,4567.3828 Q17345.5738,4567.3828 17346.2212,4567.5322 Q17346.8687,4567.6816 17347.4331,4567.9805 L17347.4331,4570.7031 Q17346.8023,4570.1221 17346.2088,4569.8523 Q17345.6153,4569.5825 17344.9844,4569.5825 Q17343.6397,4569.5825 17342.9549,4570.6492 Q17342.2701,4571.7158 17342.2701,4573.8159 Q17342.2701,4575.9077 17342.9549,4576.9744 Q17343.6397,4578.041 17344.9844,4578.041 Q17345.6153,4578.041 17346.2088,4577.7712 Q17346.8023,4577.5015 17347.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="219" x="17365.46" y="4578.0352">GetGlobalParameterInitValueCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="17244.21" x2="17673.21" y1="4589.5" y2="4589.5"/><ellipse cx="17254.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="17263.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="17254.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="17263.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="17244.21" x2="17673.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="17254.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="17263.21" y="4638.0449">GetGlobalParameterInitValueCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="17254.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="17263.21" y="4651">~GetGlobalParameterInitValueCodeGen()</text><ellipse cx="17254.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="17263.21" y="4663.9551">getIds() : std::vector&lt;std::string&gt;</text><!--MD5=[48c5df517df85b64ba5f34fd914289f3]
class rrllvm.GetInitialValueCodeGenBase--><rect codeLine="324" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="86.8652" id="rrllvm.GetInitialValueCodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="498" x="16229.71" y="3808.5"/><ellipse cx="16244.71" cy="3824.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M16247.1831,3830.6431 Q16246.6021,3830.9419 16245.9629,3831.0913 Q16245.3238,3831.2407 16244.6182,3831.2407 Q16242.1114,3831.2407 16240.7915,3829.5889 Q16239.4717,3827.937 16239.4717,3824.8159 Q16239.4717,3821.6865 16240.7915,3820.0347 Q16242.1114,3818.3828 16244.6182,3818.3828 Q16245.3238,3818.3828 16245.9712,3818.5322 Q16246.6187,3818.6816 16247.1831,3818.9805 L16247.1831,3821.7031 Q16246.5523,3821.1221 16245.9588,3820.8523 Q16245.3653,3820.5825 16244.7344,3820.5825 Q16243.3897,3820.5825 16242.7049,3821.6492 Q16242.0201,3822.7158 16242.0201,3824.8159 Q16242.0201,3826.9077 16242.7049,3827.9744 Q16243.3897,3829.041 16244.7344,3829.041 Q16245.3653,3829.041 16245.9588,3828.7712 Q16246.5523,3828.5015 16247.1831,3827.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="162" x="16258.71" y="3829.0352">GetInitialValueCodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="302" x="16428.71" y="3805.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="300" x="16429.71" y="3818.1016">template&lt;typename Derived, bool substanceUnits&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="16230.71" x2="16726.71" y1="3840.5" y2="3840.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="16230.71" x2="16726.71" y1="3848.5" y2="3848.5"/><ellipse cx="16240.71" cy="3859.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="353" x="16249.71" y="3863.1348">GetInitialValueCodeGenBase(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="16240.71" cy="3872.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="164" x="16249.71" y="3876.0898">~GetInitialValueCodeGenBase()</text><ellipse cx="16240.71" cy="3885.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="16249.71" y="3889.0449">codeGen() : llvm::Value*</text><!--MD5=[088fb2cda1e493fb19650399bce11ec1]
class rrllvm.GetValueCodeGenBase--><rect codeLine="330" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="86.8652" id="rrllvm.GetValueCodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="468" x="13950.71" y="3808.5"/><ellipse cx="13965.71" cy="3824.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M13968.1831,3830.6431 Q13967.6021,3830.9419 13966.9629,3831.0913 Q13966.3238,3831.2407 13965.6182,3831.2407 Q13963.1114,3831.2407 13961.7915,3829.5889 Q13960.4717,3827.937 13960.4717,3824.8159 Q13960.4717,3821.6865 13961.7915,3820.0347 Q13963.1114,3818.3828 13965.6182,3818.3828 Q13966.3238,3818.3828 13966.9712,3818.5322 Q13967.6187,3818.6816 13968.1831,3818.9805 L13968.1831,3821.7031 Q13967.5523,3821.1221 13966.9588,3820.8523 Q13966.3653,3820.5825 13965.7344,3820.5825 Q13964.3897,3820.5825 13963.7049,3821.6492 Q13963.0201,3822.7158 13963.0201,3824.8159 Q13963.0201,3826.9077 13963.7049,3827.9744 Q13964.3897,3829.041 13965.7344,3829.041 Q13966.3653,3829.041 13966.9588,3828.7712 Q13967.5523,3828.5015 13968.1831,3827.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="132" x="13979.71" y="3829.0352">GetValueCodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="302" x="14119.71" y="3805.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="300" x="14120.71" y="3818.1016">template&lt;typename Derived, bool substanceUnits&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="13951.71" x2="14417.71" y1="3840.5" y2="3840.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="13951.71" x2="14417.71" y1="3848.5" y2="3848.5"/><ellipse cx="13961.71" cy="3859.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="324" x="13970.71" y="3863.1348">GetValueCodeGenBase(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="13961.71" cy="3872.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="13970.71" y="3876.0898">~GetValueCodeGenBase()</text><ellipse cx="13961.71" cy="3885.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="13970.71" y="3889.0449">codeGen() : llvm::Value*</text><!--MD5=[530beef45731351b079d55ab4d0edce9]
class rrllvm.KineticLawParameterResolver--><rect codeLine="336" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="151.6406" id="rrllvm.KineticLawParameterResolver" style="stroke:#A80036;stroke-width:1.5;" width="747" x="2002.21" y="2411.5"/><ellipse cx="2286.96" cy="2427.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2289.4331,2433.6431 Q2288.8521,2433.9419 2288.2129,2434.0913 Q2287.5738,2434.2407 2286.8682,2434.2407 Q2284.3614,2434.2407 2283.0415,2432.5889 Q2281.7217,2430.937 2281.7217,2427.8159 Q2281.7217,2424.6865 2283.0415,2423.0347 Q2284.3614,2421.3828 2286.8682,2421.3828 Q2287.5738,2421.3828 2288.2212,2421.5322 Q2288.8687,2421.6816 2289.4331,2421.9805 L2289.4331,2424.7031 Q2288.8023,2424.1221 2288.2088,2423.8523 Q2287.6153,2423.5825 2286.9844,2423.5825 Q2285.6397,2423.5825 2284.9549,2424.6492 Q2284.2701,2425.7158 2284.2701,2427.8159 Q2284.2701,2429.9077 2284.9549,2430.9744 Q2285.6397,2432.041 2286.9844,2432.041 Q2287.6153,2432.041 2288.2088,2431.7712 Q2288.8023,2431.5015 2289.4331,2430.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="169" x="2307.46" y="2432.0352">KineticLawParameterResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2003.21" x2="2748.21" y1="2443.5" y2="2443.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2010.21" y="2451.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="2022.21" y="2458.1348">parentResolver : LoadSymbolResolver&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2010.21" y="2464.4551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="206" x="2022.21" y="2471.0898">kineticLaw : const libsbml::KineticLaw&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2010.21" y="2477.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="2022.21" y="2484.0449">builder : llvm::IRBuilder&lt;&gt;&amp;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2003.21" x2="2748.21" y1="2490.3652" y2="2490.3652"/><ellipse cx="2013.21" cy="2501.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="721" x="2022.21" y="2505">KineticLawParameterResolver(LoadSymbolResolver&amp; parentResolver, const libsbml::KineticLaw&amp; kineticLaw, llvm::IRBuilder&lt;&gt;&amp; builder)</text><ellipse cx="2013.21" cy="2514.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="171" x="2022.21" y="2517.9551">~KineticLawParameterResolver()</text><ellipse cx="2013.21" cy="2527.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="537" x="2022.21" y="2530.9102">loadSymbolValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args) : llvm::Value*</text><ellipse cx="2013.21" cy="2540.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="149" x="2022.21" y="2543.8652">recursiveSymbolPop() : void</text><ellipse cx="2013.21" cy="2553.1855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="293" x="2022.21" y="2556.8203">recursiveSymbolPush(const std::string&amp; symbol) : void</text><!--MD5=[b0929b371151a3aa734dd9dac668dccc]
class rrllvm.LLVMException--><rect codeLine="347" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="73.9102" id="rrllvm.LLVMException" style="stroke:#A80036;stroke-width:1.5;" width="376" x="10975.71" y="151"/><ellipse cx="11116.46" cy="167" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M11118.9331,173.1431 Q11118.3521,173.4419 11117.7129,173.5913 Q11117.0738,173.7407 11116.3682,173.7407 Q11113.8614,173.7407 11112.5415,172.0889 Q11111.2217,170.437 11111.2217,167.3159 Q11111.2217,164.1865 11112.5415,162.5347 Q11113.8614,160.8828 11116.3682,160.8828 Q11117.0738,160.8828 11117.7212,161.0322 Q11118.3687,161.1816 11118.9331,161.4805 L11118.9331,164.2031 Q11118.3023,163.6221 11117.7088,163.3523 Q11117.1153,163.0825 11116.4844,163.0825 Q11115.1397,163.0825 11114.4549,164.1492 Q11113.7701,165.2158 11113.7701,167.3159 Q11113.7701,169.4077 11114.4549,170.4744 Q11115.1397,171.541 11116.4844,171.541 Q11117.1153,171.541 11117.7088,171.2712 Q11118.3023,171.0015 11118.9331,170.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="86" x="11136.96" y="171.5352">LLVMException</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10976.71" x2="11350.71" y1="183" y2="183"/><line style="stroke:#A80036;stroke-width:1.5;" x1="10976.71" x2="11350.71" y1="191" y2="191"/><ellipse cx="10986.71" cy="202" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="213" x="10995.71" y="205.6348">LLVMException(const std::string&amp; what)</text><ellipse cx="10986.71" cy="214.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="350" x="10995.71" y="218.5898">LLVMException(const std::string&amp; what, const std::string&amp; where)</text><!--MD5=[9cfca4a5941c1d37f58a5039c395bf47]
class rrllvm.LLVMModelDataIRBuilderTesting--><rect codeLine="352" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="203.4609" id="rrllvm.LLVMModelDataIRBuilderTesting" style="stroke:#A80036;stroke-width:1.5;" width="668" x="2065.71" y="4512.5"/><ellipse cx="2302.96" cy="4528.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2305.4331,4534.6431 Q2304.8521,4534.9419 2304.2129,4535.0913 Q2303.5738,4535.2407 2302.8682,4535.2407 Q2300.3614,4535.2407 2299.0415,4533.5889 Q2297.7217,4531.937 2297.7217,4528.8159 Q2297.7217,4525.6865 2299.0415,4524.0347 Q2300.3614,4522.3828 2302.8682,4522.3828 Q2303.5738,4522.3828 2304.2212,4522.5322 Q2304.8687,4522.6816 2305.4331,4522.9805 L2305.4331,4525.7031 Q2304.8023,4525.1221 2304.2088,4524.8523 Q2303.6153,4524.5825 2302.9844,4524.5825 Q2301.6397,4524.5825 2300.9549,4525.6492 Q2300.2701,4526.7158 2300.2701,4528.8159 Q2300.2701,4530.9077 2300.9549,4531.9744 Q2301.6397,4533.041 2302.9844,4533.041 Q2303.6153,4533.041 2304.2088,4532.7712 Q2304.8023,4532.5015 2305.4331,4531.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="185" x="2323.46" y="4533.0352">LLVMModelDataIRBuilderTesting</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2066.71" x2="2732.71" y1="4544.5" y2="4544.5"/><ellipse cx="2076.71" cy="4555.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="2085.71" y="4559.1348">symbols : LLVMModelDataSymbols const&amp;</text><ellipse cx="2076.71" cy="4568.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="2085.71" y="4572.0898">builder : llvm::IRBuilder&lt;&gt;&amp;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2066.71" x2="2732.71" y1="4578.4102" y2="4578.4102"/><ellipse cx="2076.71" cy="4589.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="462" x="2085.71" y="4593.0449">LLVMModelDataIRBuilderTesting(LLVMModelDataSymbols const &amp;, llvm::IRBuilder&lt;&gt; &amp;)</text><ellipse cx="2076.71" cy="4602.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="291" x="2085.71" y="4606">createDispChar(llvm::Value* doubleVal) : llvm::CallInst*</text><ellipse cx="2076.71" cy="4615.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="303" x="2085.71" y="4618.9551">createDispDouble(llvm::Value* doubleVal) : llvm::CallInst*</text><ellipse cx="2076.71" cy="4628.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="2085.71" y="4631.9102">createDispInt(llvm::Value* intVal) : llvm::CallInst*</text><ellipse cx="2076.71" cy="4641.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="2085.71" y="4644.8652">getDispCharDecl(llvm::Module* module) : llvm::Function*</text><ellipse cx="2076.71" cy="4654.1855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="314" x="2085.71" y="4657.8203">getDispDoubleDecl(llvm::Module* module) : llvm::Function*</text><ellipse cx="2076.71" cy="4667.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="290" x="2085.71" y="4670.7754">getDispIntDecl(llvm::Module* module) : llvm::Function*</text><ellipse cx="2076.71" cy="4680.0957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="642" x="2085.71" y="4683.7305">createFloatingSpeciesAccessors(llvm::Module* module, const std::string id) : std::pair&lt;llvm::Function* , llvm::Function*&gt;</text><ellipse cx="2076.71" cy="4693.0508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="244" x="2085.71" y="4696.6855">createAccessors(llvm::Module* module) : void</text><ellipse cx="2076.71" cy="4706.0059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="476" x="2085.71" y="4709.6406">test(llvm::Module* module, llvm::IRBuilder&lt;&gt;* build, llvm::ExecutionEngine* engine) : void</text><!--MD5=[6a74c0c36d17e0535809ee850897bcb3]
class rrllvm.LLVMModelDataSymbols--><rect codeLine="367" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="1680.3398" id="rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.5;" width="616" x="2479.71" y="5067"/><ellipse cx="2713.96" cy="5083" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2716.4331,5089.1431 Q2715.8521,5089.4419 2715.2129,5089.5913 Q2714.5738,5089.7407 2713.8682,5089.7407 Q2711.3614,5089.7407 2710.0415,5088.0889 Q2708.7217,5086.437 2708.7217,5083.3159 Q2708.7217,5080.1865 2710.0415,5078.5347 Q2711.3614,5076.8828 2713.8682,5076.8828 Q2714.5738,5076.8828 2715.2212,5077.0322 Q2715.8687,5077.1816 2716.4331,5077.4805 L2716.4331,5080.2031 Q2715.8023,5079.6221 2715.2088,5079.3523 Q2714.6153,5079.0825 2713.9844,5079.0825 Q2712.6397,5079.0825 2711.9549,5080.1492 Q2711.2701,5081.2158 2711.2701,5083.3159 Q2711.2701,5085.4077 2711.9549,5086.4744 Q2712.6397,5087.541 2713.9844,5087.541 Q2714.6153,5087.541 2715.2088,5087.2712 Q2715.8023,5087.0015 2716.4331,5086.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="139" x="2734.46" y="5087.5352">LLVMModelDataSymbols</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2480.71" x2="3094.71" y1="5099" y2="5099"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5107"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="251" x="2499.71" y="5113.6348">namedSpeciesReferenceInfo : StringRefInfoMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5119.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="199" x="2499.71" y="5126.5898">boundarySpeciesMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5132.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="185" x="2499.71" y="5139.5449">compartmentsMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5145.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="237" x="2499.71" y="5152.5">conservedMoietyDepSpecies : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5158.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="2499.71" y="5165.4551">eventIds : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5171.7754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="188" x="2499.71" y="5178.4102">floatingSpeciesMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5184.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="200" x="2499.71" y="5191.3652">globalParametersMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5197.6855"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="2499.71" y="5204.3203">initBoundarySpeciesMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5210.6406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="204" x="2499.71" y="5217.2754">initCompartmentsMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5223.5957"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="207" x="2499.71" y="5230.2305">initFloatingSpeciesMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5236.5508"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="218" x="2499.71" y="5243.1855">initGlobalParametersMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5249.5059"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="2499.71" y="5256.1406">rateRules : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5262.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2499.71" y="5269.0957">reactionsMap : StringUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5275.416"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="2499.71" y="5282.0508">conservedMoietyIndSpecies : StringUIntVectorMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5288.3711"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="295" x="2499.71" y="5295.0059">floatingSpeciesToConservedMoietyIdMap : UIntUIntMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5301.3262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="2499.71" y="5307.9609">independentBoundarySpeciesSize : size_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5314.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="2499.71" y="5320.916">independentCompartmentSize : size_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5327.2363"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="211" x="2499.71" y="5333.8711">independentFloatingSpeciesSize : size_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5340.1914"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="216" x="2499.71" y="5346.8262">independentGlobalParameterSize : size_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5353.1465"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="212" x="2499.71" y="5359.7813">assignmentRules : std::set&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5366.1016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="2499.71" y="5372.7363">conservedMoietySpeciesSet : std::set&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5379.0566"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="231" x="2499.71" y="5385.6914">initAssignmentRules : std::set&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5392.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="127" x="2499.71" y="5398.6465">modelName : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5404.9668"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="2499.71" y="5411.6016">stoichTypes : std::vector&lt;SpeciesReferenceType&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5417.9219"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="287" x="2499.71" y="5424.5566">conservedMoietyGlobalParameter : std::vector&lt;bool&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5430.877"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="247" x="2499.71" y="5437.5117">globalParameterRateRules : std::vector&lt;bool&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5443.832"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="235" x="2499.71" y="5450.4668">eventAssignmentsSize : std::vector&lt;size_t&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5456.7871"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="188" x="2499.71" y="5463.4219">stoichIds : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5469.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="2499.71" y="5476.377">conservedMoietyGlobalParameterIndex : std::vector&lt;uint&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5482.6973"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2499.71" y="5489.332">floatingSpeciesCompartmentIndices : std::vector&lt;uint&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5495.6523"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="2499.71" y="5502.2871">stoichColIndx : std::vector&lt;uint&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5508.6074"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="184" x="2499.71" y="5515.2422">stoichRowIndx : std::vector&lt;uint&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5521.5625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="244" x="2499.71" y="5528.1973">eventAttributes : std::vector&lt;unsigned char&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5534.5176"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="272" x="2499.71" y="5541.1523">independentInitBoundarySpeciesSize : unsigned int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5547.4727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="255" x="2499.71" y="5554.1074">independentInitCompartmentSize : unsigned int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5560.4277"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="264" x="2499.71" y="5567.0625">independentInitFloatingSpeciesSize : unsigned int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5573.3828"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="269" x="2499.71" y="5580.0176">independentInitGlobalParameterSize : unsigned int</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2480.71" x2="3094.71" y1="5586.3379" y2="5586.3379"/><ellipse cx="2490.71" cy="5597.3379" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="137" x="2499.71" y="5600.9727">LLVMModelDataSymbols()</text><ellipse cx="2490.71" cy="5610.293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="2499.71" y="5613.9277">LLVMModelDataSymbols(libsbml::Model const* model, unsigned options)</text><ellipse cx="2490.71" cy="5623.248" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="2499.71" y="5626.8828">LLVMModelDataSymbols(std::istream&amp; in)</text><ellipse cx="2490.71" cy="5636.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="144" x="2499.71" y="5639.8379">~LLVMModelDataSymbols()</text><ellipse cx="2490.71" cy="5649.1582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="458" x="2499.71" y="5652.793">getNamedSpeciesReferenceInfo(const std::string&amp; id) : SpeciesReferenceInfo&amp; {query}</text><ellipse cx="2490.71" cy="5662.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="298" x="2499.71" y="5665.748">hasAssignmentRule(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5675.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="327" x="2499.71" y="5678.7031">hasInitialAssignmentRule(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5688.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="257" x="2499.71" y="5691.6582">hasRateRule(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5700.9785" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="2499.71" y="5704.6133">isBoundarySpecies(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5713.9336" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="319" x="2499.71" y="5717.5684">isConservedMoietyParameter(unsigned int id) : bool {query}</text><ellipse cx="2490.71" cy="5726.8887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="363" x="2499.71" y="5730.5234">isConservedMoietySpecies(const std::string&amp; symbol) : bool {query}</text><ellipse cx="2490.71" cy="5739.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="412" x="2499.71" y="5743.4785">isConservedMoietySpecies(unsigned int id, unsigned int result) : bool {query}</text><ellipse cx="2490.71" cy="5752.7988" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="2499.71" y="5756.4336">isIndependentBoundarySpecies(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5765.7539" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="342" x="2499.71" y="5769.3887">isIndependentCompartment(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5778.709" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="310" x="2499.71" y="5782.3438">isIndependentElement(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5791.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="351" x="2499.71" y="5795.2988">isIndependentFloatingSpecies(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5804.6191" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="356" x="2499.71" y="5808.2539">isIndependentGlobalParameter(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5817.5742" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="2499.71" y="5821.209">isIndependentInitCompartment(const std::string&amp; symbol) : bool {query}</text><ellipse cx="2490.71" cy="5830.5293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="356" x="2499.71" y="5834.1641">isIndependentInitElement(const std::string&amp; symbol) : bool {query}</text><ellipse cx="2490.71" cy="5843.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="397" x="2499.71" y="5847.1191">isIndependentInitFloatingSpecies(const std::string&amp; symbol) : bool {query}</text><ellipse cx="2490.71" cy="5856.4395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="402" x="2499.71" y="5860.0742">isIndependentInitGlobalParameter(const std::string&amp; symbol) : bool {query}</text><ellipse cx="2490.71" cy="5869.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="2499.71" y="5873.0293">isIndependentInitGlobalParameter(size_t id) : bool {query}</text><ellipse cx="2490.71" cy="5882.3496" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="331" x="2499.71" y="5885.9844">isNamedSpeciesReference(const std::string&amp; id) : bool {query}</text><ellipse cx="2490.71" cy="5895.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="313" x="2499.71" y="5898.9395">isRateRuleGlobalParameter(unsigned int gid) : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="5905.2598"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="590" x="2499.71" y="5911.8945">isValidFloatingSpeciesReference(const libsbml::SimpleSpeciesReference*, const std::string&amp; reacOrProd) : bool</text><ellipse cx="2490.71" cy="5921.2148" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="231" x="2499.71" y="5924.8496">getFieldName(ModelDataFields field) : char*</text><ellipse cx="2490.71" cy="5934.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="310" x="2499.71" y="5937.8047">getBoundarySpeciesIndex(std::string const &amp;) : int {query}</text><ellipse cx="2490.71" cy="5947.125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="293" x="2499.71" y="5950.7598">getCompartmentIndex(std::string const &amp;) : int {query}</text><ellipse cx="2490.71" cy="5960.0801" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="2499.71" y="5963.7148">getCompartmentIndexForFloatingSpecies(size_t floatIndex) : int {query}</text><ellipse cx="2490.71" cy="5973.0352" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="2499.71" y="5976.6699">getCompartmentInitIndex(const std::string&amp; symbol) : int {query}</text><ellipse cx="2490.71" cy="5985.9902" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="417" x="2499.71" y="5989.625">getConservedMoietyGlobalParameterIndex(unsigned int cmIndex) : int {query}</text><ellipse cx="2490.71" cy="5998.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="341" x="2499.71" y="6002.5801">getConservedMoietyIndex(const std::string&amp; name) : int {query}</text><ellipse cx="2490.71" cy="6011.9004" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="370" x="2499.71" y="6015.5352">getDepSpeciesIndexForConservedMoietyId(std::string id) : int {query}</text><ellipse cx="2490.71" cy="6024.8555" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="258" x="2499.71" y="6028.4902">getEventIndex(const std::string&amp; id) : int {query}</text><ellipse cx="2490.71" cy="6037.8105" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="2499.71" y="6041.4453">getFloatingSpeciesIndex(std::string const &amp;, bool requireIndependent) : int {query}</text><ellipse cx="2490.71" cy="6050.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="358" x="2499.71" y="6054.4004">getFloatingSpeciesInitIndex(const std::string&amp; symbol) : int {query}</text><ellipse cx="2490.71" cy="6063.7207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="307" x="2499.71" y="6067.3555">getGlobalParameterIndex(std::string const &amp;) : int {query}</text><ellipse cx="2490.71" cy="6076.6758" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="363" x="2499.71" y="6080.3105">getGlobalParameterInitIndex(const std::string&amp; symbol) : int {query}</text><ellipse cx="2490.71" cy="6089.6309" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="265" x="2499.71" y="6093.2656">getRateRuleIndex(std::string const &amp;) : int {query}</text><ellipse cx="2490.71" cy="6102.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="265" x="2499.71" y="6106.2207">getReactionIndex(std::string const &amp;) : int {query}</text><ellipse cx="2490.71" cy="6115.541" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="2499.71" y="6119.1758">getSymbolIndex(const std::string&amp; name, int&amp; result) : int {query}</text><ellipse cx="2490.71" cy="6128.4961" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="2499.71" y="6132.1309">getBoundarySpeciesSize() : size_t {query}</text><ellipse cx="2490.71" cy="6141.4512" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="2499.71" y="6145.0859">getCompartmentsSize() : size_t {query}</text><ellipse cx="2490.71" cy="6154.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="2499.71" y="6158.041">getConservedMoietySize() : size_t {query}</text><ellipse cx="2490.71" cy="6167.3613" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="2499.71" y="6170.9961">getEventBufferSize(size_t eventId) : size_t {query}</text><ellipse cx="2490.71" cy="6180.3164" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="211" x="2499.71" y="6183.9512">getFloatingSpeciesSize() : size_t {query}</text><ellipse cx="2490.71" cy="6193.2715" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="2499.71" y="6196.9063">getGlobalParametersSize() : size_t {query}</text><ellipse cx="2490.71" cy="6206.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="286" x="2499.71" y="6209.8613">getIndependentBoundarySpeciesSize() : size_t {query}</text><ellipse cx="2490.71" cy="6219.1816" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="269" x="2499.71" y="6222.8164">getIndependentCompartmentSize() : size_t {query}</text><ellipse cx="2490.71" cy="6232.1367" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="278" x="2499.71" y="6235.7715">getIndependentFloatingSpeciesSize() : size_t {query}</text><ellipse cx="2490.71" cy="6245.0918" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="283" x="2499.71" y="6248.7266">getIndependentGlobalParameterSize() : size_t {query}</text><ellipse cx="2490.71" cy="6258.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="236" x="2499.71" y="6261.6816">getInitBoundarySpeciesSize() : size_t {query}</text><ellipse cx="2490.71" cy="6271.002" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="2499.71" y="6274.6367">getInitCompartmentSize() : size_t {query}</text><ellipse cx="2490.71" cy="6283.957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="228" x="2499.71" y="6287.5918">getInitFloatingSpeciesSize() : size_t {query}</text><ellipse cx="2490.71" cy="6296.9121" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="2499.71" y="6300.5469">getInitGlobalParameterSize() : size_t {query}</text><ellipse cx="2490.71" cy="6309.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="2499.71" y="6313.502">getRateRuleSize() : size_t {query}</text><ellipse cx="2490.71" cy="6322.8223" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="2499.71" y="6326.457">getReactionSize() : size_t {query}</text><ellipse cx="2490.71" cy="6335.7773" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="345" x="2499.71" y="6339.4121">getStoichiometryIndx() : std::list&lt;SpeciesReferenceInfo&gt; {query}</text><ellipse cx="2490.71" cy="6348.7324" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="2499.71" y="6352.3672">getConservedMoietyId(size_t indx) : std::string {query}</text><ellipse cx="2490.71" cy="6361.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="228" x="2499.71" y="6365.3223">getEventId(size_t indx) : std::string {query}</text><ellipse cx="2490.71" cy="6374.6426" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="282" x="2499.71" y="6378.2773">getFloatingSpeciesId(size_t indx) : std::string {query}</text><ellipse cx="2490.71" cy="6387.5977" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="287" x="2499.71" y="6391.2324">getGlobalParameterId(size_t indx) : std::string {query}</text><ellipse cx="2490.71" cy="6400.5527" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="245" x="2499.71" y="6404.1875">getRateRuleId(size_t indx) : std::string {query}</text><ellipse cx="2490.71" cy="6413.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="201" x="2499.71" y="6417.1426">getModelName() : std::string&amp; {query}</text><ellipse cx="2490.71" cy="6426.4629" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="313" x="2499.71" y="6430.0977">getBoundarySpeciesIds() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="2490.71" cy="6439.418" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="296" x="2499.71" y="6443.0527">getCompartmentIds() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="2490.71" cy="6452.373" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="251" x="2499.71" y="6456.0078">getEventIds() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="2490.71" cy="6465.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="305" x="2499.71" y="6468.9629">getFloatingSpeciesIds() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="2490.71" cy="6478.2832" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="310" x="2499.71" y="6481.918">getGlobalParameterIds() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="2490.71" cy="6491.2383" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="2499.71" y="6494.873">getReactionIds() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="2490.71" cy="6504.1934" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="456" x="2499.71" y="6507.8281">getIndSpeciesIndexForConservedMoietyId(std::string id) : std::vector&lt;uint&gt;&amp; {query}</text><ellipse cx="2490.71" cy="6517.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="255" x="2499.71" y="6520.7832">getStoichColIndx() : std::vector&lt;uint&gt;&amp; {query}</text><ellipse cx="2490.71" cy="6530.1035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="259" x="2499.71" y="6533.7383">getStoichRowIndx() : std::vector&lt;uint&gt;&amp; {query}</text><ellipse cx="2490.71" cy="6543.0586" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="319" x="2499.71" y="6546.6934">getEventAttributes() : std::vector&lt;unsigned char&gt;&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6553.0137"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="173" x="2499.71" y="6559.6484">displayCompartmentInfo() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6565.9688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="2499.71" y="6572.6035">initBoundarySpecies(const libsbml::Model*) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6578.9238"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="252" x="2499.71" y="6585.5586">initCompartments(const libsbml::Model*) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6591.8789"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="243" x="2499.71" y="6598.5137">initEvents(const libsbml::Model* model) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6604.834"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="2499.71" y="6611.4688">initFloatingSpecies(const libsbml::Model*, bool conservedMoieties) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6617.7891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="435" x="2499.71" y="6624.4238">initGlobalParameters(const libsbml::Model* model, bool conservedMoieties) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6630.7441"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="260" x="2499.71" y="6637.3789">initReactions(const libsbml::Model* model) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6643.6992"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="415" x="2499.71" y="6650.334">loadBinarySpeciesReferenceInfo(std::istream &amp;, SpeciesReferenceInfo &amp;) : void</text><ellipse cx="2490.71" cy="6659.6543" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="163" x="2499.71" y="6663.2891">loadState(std::istream &amp;) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6669.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="338" x="2499.71" y="6676.2441">loadStringRefInfoMap(std::istream &amp;, StringRefInfoMap &amp;) : void</text><ellipse cx="2490.71" cy="6685.5645" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="2499.71" y="6689.1992">print() : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6695.5195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="468" x="2499.71" y="6702.1543">saveBinarySpeciesReferenceInfo(std::ostream &amp;, SpeciesReferenceInfo sri) : void {query}</text><ellipse cx="2490.71" cy="6711.4746" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="2499.71" y="6715.1094">saveState(std::ostream &amp;) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6721.4297"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="418" x="2499.71" y="6728.0645">saveStringRefInfoMap(std::ostream &amp;, const StringRefInfoMap &amp;) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2487.71" y="6734.3848"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="564" x="2499.71" y="6741.0195">setNamedSpeciesReferenceInfo(unsigned int row, unsigned int column, SpeciesReferenceType type) : void</text><!--MD5=[7fb7d32003d2d45be07c2bb2396ef64d]
class rrllvm.LLVMModelSymbols--><rect codeLine="496" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="384.832" id="rrllvm.LLVMModelSymbols" style="stroke:#A80036;stroke-width:1.5;" width="660" x="440.71" y="4421.5"/><ellipse cx="710.46" cy="4437.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M712.9331,4443.6431 Q712.3521,4443.9419 711.7129,4444.0913 Q711.0738,4444.2407 710.3682,4444.2407 Q707.8614,4444.2407 706.5415,4442.5889 Q705.2217,4440.937 705.2217,4437.8159 Q705.2217,4434.6865 706.5415,4433.0347 Q707.8614,4431.3828 710.3682,4431.3828 Q711.0738,4431.3828 711.7212,4431.5322 Q712.3687,4431.6816 712.9331,4431.9805 L712.9331,4434.7031 Q712.3023,4434.1221 711.7088,4433.8523 Q711.1153,4433.5825 710.4844,4433.5825 Q709.1397,4433.5825 708.4549,4434.6492 Q707.7701,4435.7158 707.7701,4437.8159 Q707.7701,4439.9077 708.4549,4440.9744 Q709.1397,4442.041 710.4844,4442.041 Q711.1153,4442.041 711.7088,4441.7712 Q712.3023,4441.5015 712.9331,4440.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="112" x="730.96" y="4442.0352">LLVMModelSymbols</text><line style="stroke:#A80036;stroke-width:1.5;" x1="441.71" x2="1099.71" y1="4453.5" y2="4453.5"/><polygon fill="none" points="451.71,4459.5,455.71,4463.5,451.71,4467.5,447.71,4463.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="460.71" y="4468.1348">nodes : ASTNodeFactory</text><polygon fill="none" points="451.71,4472.4551,455.71,4476.4551,451.71,4480.4551,447.71,4476.4551" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="173" x="460.71" y="4481.0898">assignmentRules : SymbolForest</text><polygon fill="none" points="451.71,4485.4102,455.71,4489.4102,451.71,4493.4102,447.71,4489.4102" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="204" x="460.71" y="4494.0449">initialAssignmentRules : SymbolForest</text><polygon fill="none" points="451.71,4498.3652,455.71,4502.3652,451.71,4506.3652,447.71,4502.3652" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="460.71" y="4507">initialValues : SymbolForest</text><polygon fill="none" points="451.71,4511.3203,455.71,4515.3203,451.71,4519.3203,447.71,4515.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="132" x="460.71" y="4519.9551">rateRules : SymbolForest</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="4526.2754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="460.71" y="4532.9102">symbols : const LLVMModelDataSymbols&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="4539.2305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="460.71" y="4545.8652">model : libsbml::Model const*</text><polygon fill="none" points="451.71,4550.1855,455.71,4554.1855,451.71,4558.1855,447.71,4554.1855" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="225" x="460.71" y="4558.8203">reactions : std::vector&lt;ReactionSymbols&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="441.71" x2="1099.71" y1="4565.1406" y2="4565.1406"/><ellipse cx="451.71" cy="4576.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="442" x="460.71" y="4579.7754">LLVMModelSymbols(libsbml::Model const* m, LLVMModelDataSymbols const&amp; sym)</text><ellipse cx="451.71" cy="4589.0957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="120" x="460.71" y="4592.7305">~LLVMModelSymbols()</text><ellipse cx="451.71" cy="4602.0508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="243" x="460.71" y="4605.6855">getAssigmentRules() : SymbolForest&amp; {query}</text><ellipse cx="451.71" cy="4615.0059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="460.71" y="4618.6406">getInitialAssignmentRules() : SymbolForest&amp; {query}</text><ellipse cx="451.71" cy="4627.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="460.71" y="4631.5957">getInitialValues() : SymbolForest&amp; {query}</text><ellipse cx="451.71" cy="4640.916" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="460.71" y="4644.5508">getRateRules() : SymbolForest&amp; {query}</text><polygon fill="#FFFF44" points="451.71,4648.8711,455.71,4652.8711,451.71,4656.8711,447.71,4652.8711" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="460.71" y="4657.5059">visit(const libsbml::Compartment&amp; x) : bool</text><polygon fill="#FFFF44" points="451.71,4661.8262,455.71,4665.8262,451.71,4669.8262,447.71,4665.8262" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="199" x="460.71" y="4670.4609">visit(const libsbml::Species&amp; x) : bool</text><polygon fill="#FFFF44" points="451.71,4674.7813,455.71,4678.7813,451.71,4682.7813,447.71,4678.7813" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="460.71" y="4683.416">visit(const libsbml::AssignmentRule&amp; x) : bool</text><polygon fill="#FFFF44" points="451.71,4687.7363,455.71,4691.7363,451.71,4695.7363,447.71,4691.7363" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="252" x="460.71" y="4696.3711">visit(const libsbml::InitialAssignment&amp; x) : bool</text><polygon fill="#FFFF44" points="451.71,4700.6914,455.71,4704.6914,451.71,4708.6914,447.71,4704.6914" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="460.71" y="4709.3262">visit(const libsbml::RateRule&amp; rule) : bool</text><polygon fill="#FFFF44" points="451.71,4713.6465,455.71,4717.6465,451.71,4721.6465,447.71,4717.6465" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="205" x="460.71" y="4722.2813">visit(const libsbml::Reaction&amp; x) : bool</text><polygon fill="#FFFF44" points="451.71,4726.6016,455.71,4730.6016,451.71,4734.6016,447.71,4730.6016" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="182" x="460.71" y="4735.2363">visit(const libsbml::Rule&amp; x) : bool</text><polygon fill="#FFFF44" points="451.71,4739.5566,455.71,4743.5566,451.71,4747.5566,447.71,4743.5566" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="460.71" y="4748.1914">visit(const libsbml::Event&amp; event) : bool</text><ellipse cx="451.71" cy="4757.5117" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="369" x="460.71" y="4761.1465">createStoichiometryNode(int row, int col) : libsbml::ASTNode* {query}</text><polygon fill="#FFFF44" points="451.71,4765.4668,455.71,4769.4668,451.71,4773.4668,447.71,4769.4668" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="515" x="460.71" y="4774.1016">getSpeciesReferenceStoichMath(const libsbml::SpeciesReference* reference) : libsbml::ASTNode*</text><polygon fill="#FFFF44" points="451.71,4778.4219,455.71,4782.4219,451.71,4786.4219,447.71,4782.4219" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="626" x="460.71" y="4787.0566">processElement(SymbolForest&amp; currentSymbols, const libsbml::SBase* element, const libsbml::ASTNode* math) : void</text><polygon fill="#FFFF44" points="451.71,4791.377,455.71,4795.377,451.71,4799.377,447.71,4795.377" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="634" x="460.71" y="4800.0117">processSpecies(SymbolForest&amp; currentSymbols, const libsbml::Species* element, const libsbml::ASTNode* math) : void</text><!--MD5=[c39e763d820e1f0e928b44a3bed02a3e]
class rrllvm.LoadSymbolResolver--><rect codeLine="525" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.LoadSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="563" x="2139.21" y="1079.5"/><ellipse cx="2357.46" cy="1095.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2357.3233,1090.8481 L2356.1695,1095.9199 L2358.4854,1095.9199 Z M2355.8291,1088.6069 L2358.8257,1088.6069 L2362.1709,1101 L2359.7222,1101 L2358.9585,1097.937 L2355.6797,1097.937 L2354.9327,1101 L2352.4839,1101 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="118" x="2377.96" y="1100.0352">LoadSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2140.21" x2="2701.21" y1="1111.5" y2="1111.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="2140.21" x2="2701.21" y1="1119.5" y2="1119.5"/><polygon fill="#FFFF44" points="2150.21,1125.5,2154.21,1129.5,2150.21,1133.5,2146.21,1129.5" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="2159.21" y="1134.1348">~LoadSymbolResolver()</text><ellipse cx="2150.21" cy="1143.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="537" x="2159.21" y="1147.0898">loadSymbolValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args) : llvm::Value*</text><ellipse cx="2150.21" cy="1156.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="2159.21" y="1160.0449">popCacheBlock() : size_t</text><ellipse cx="2150.21" cy="1169.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="2159.21" y="1173">pushCacheBlock() : size_t</text><ellipse cx="2150.21" cy="1182.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="149" x="2159.21" y="1185.9551">recursiveSymbolPop() : void</text><ellipse cx="2150.21" cy="1195.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="293" x="2159.21" y="1198.9102">recursiveSymbolPush(const std::string&amp; symbol) : void</text><!--MD5=[5a97451ad693925e62e2c17eca2b9b04]
class rrllvm.LoadSymbolResolverBase--><rect codeLine="534" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="255.2813" id="rrllvm.LoadSymbolResolverBase" style="stroke:#A80036;stroke-width:1.5;" width="631" x="1298.21" y="2360"/><ellipse cx="1536.96" cy="2376" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1539.4331,2382.1431 Q1538.8521,2382.4419 1538.2129,2382.5913 Q1537.5738,2382.7407 1536.8682,2382.7407 Q1534.3614,2382.7407 1533.0415,2381.0889 Q1531.7217,2379.437 1531.7217,2376.3159 Q1531.7217,2373.1865 1533.0415,2371.5347 Q1534.3614,2369.8828 1536.8682,2369.8828 Q1537.5738,2369.8828 1538.2212,2370.0322 Q1538.8687,2370.1816 1539.4331,2370.4805 L1539.4331,2373.2031 Q1538.8023,2372.6221 1538.2088,2372.3523 Q1537.6153,2372.0825 1536.9844,2372.0825 Q1535.6397,2372.0825 1534.9549,2373.1492 Q1534.2701,2374.2158 1534.2701,2376.3159 Q1534.2701,2378.4077 1534.9549,2379.4744 Q1535.6397,2380.541 1536.9844,2380.541 Q1537.6153,2380.541 1538.2088,2380.2712 Q1538.8023,2380.0015 1539.4331,2379.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="145" x="1557.46" y="2380.5352">LoadSymbolResolverBase</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1299.21" x2="1928.21" y1="2392" y2="2392"/><polygon fill="none" points="1309.21,2398,1313.21,2402,1309.21,2406,1305.21,2402" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="1318.21" y="2406.6348">symbolStack : StringStack</text><polygon fill="none" points="1309.21,2410.9551,1313.21,2414.9551,1309.21,2418.9551,1305.21,2414.9551" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="160" x="1318.21" y="2419.5898">symbolCache : ValueMapStack</text><polygon fill="none" points="1309.21,2423.9102,1313.21,2427.9102,1309.21,2431.9102,1305.21,2427.9102" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="1318.21" y="2432.5449">modelDataSymbols : const LLVMModelDataSymbols&amp;</text><polygon fill="none" points="1309.21,2436.8652,1313.21,2440.8652,1309.21,2444.8652,1305.21,2440.8652" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="1318.21" y="2445.5">modelSymbols : const LLVMModelSymbols&amp;</text><polygon fill="none" points="1309.21,2449.8203,1313.21,2453.8203,1309.21,2457.8203,1305.21,2453.8203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="276" x="1318.21" y="2458.4551">modelGenContext : const ModelGeneratorContext&amp;</text><polygon fill="none" points="1309.21,2462.7754,1313.21,2466.7754,1309.21,2470.7754,1305.21,2466.7754" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1318.21" y="2471.4102">model : const libsbml::Model*</text><polygon fill="none" points="1309.21,2475.7305,1313.21,2479.7305,1309.21,2483.7305,1305.21,2479.7305" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="1318.21" y="2484.3652">builder : llvm::IRBuilder&lt;&gt;&amp;</text><polygon fill="none" points="1309.21,2488.6855,1313.21,2492.6855,1309.21,2496.6855,1305.21,2492.6855" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="1318.21" y="2497.3203">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1299.21" x2="1928.21" y1="2503.6406" y2="2503.6406"/><polygon fill="#FFFF44" points="1309.21,2509.6406,1313.21,2513.6406,1309.21,2517.6406,1305.21,2513.6406" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="461" x="1318.21" y="2518.2754">LoadSymbolResolverBase(const ModelGeneratorContext&amp; ctx, llvm::Value* modelData)</text><polygon fill="#FFFF44" points="1309.21,2522.5957,1313.21,2526.5957,1309.21,2530.5957,1305.21,2526.5957" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="605" x="1318.21" y="2531.2305">cacheValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args, llvm::Value* value) : llvm::Value*</text><ellipse cx="1309.21" cy="2540.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="300" x="1318.21" y="2544.1855">loadReactionRate(const libsbml::Reaction*) : llvm::Value*</text><ellipse cx="1309.21" cy="2553.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="1318.21" y="2557.1406">popCacheBlock() : size_t</text><ellipse cx="1309.21" cy="2566.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="1318.21" y="2570.0957">pushCacheBlock() : size_t</text><ellipse cx="1309.21" cy="2579.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="100" x="1318.21" y="2583.0508">flushCache() : void</text><ellipse cx="1309.21" cy="2592.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="149" x="1318.21" y="2596.0059">recursiveSymbolPop() : void</text><ellipse cx="1309.21" cy="2605.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="293" x="1318.21" y="2608.9609">recursiveSymbolPush(const std::string&amp; symbol) : void</text><!--MD5=[d41cf76b36257e7a06cb0a6b3faf659e]
class rrllvm.ModelDataIRBuilder--><rect codeLine="553" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="786.4395" id="rrllvm.ModelDataIRBuilder" style="stroke:#A80036;stroke-width:1.5;" width="857" x="1173.21" y="4221"/><ellipse cx="1540.96" cy="4237" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1543.4331,4243.1431 Q1542.8521,4243.4419 1542.2129,4243.5913 Q1541.5738,4243.7407 1540.8682,4243.7407 Q1538.3614,4243.7407 1537.0415,4242.0889 Q1535.7217,4240.437 1535.7217,4237.3159 Q1535.7217,4234.1865 1537.0415,4232.5347 Q1538.3614,4230.8828 1540.8682,4230.8828 Q1541.5738,4230.8828 1542.2212,4231.0322 Q1542.8687,4231.1816 1543.4331,4231.4805 L1543.4331,4234.2031 Q1542.8023,4233.6221 1542.2088,4233.3523 Q1541.6153,4233.0825 1540.9844,4233.0825 Q1539.6397,4233.0825 1538.9549,4234.1492 Q1538.2701,4235.2158 1538.2701,4237.3159 Q1538.2701,4239.4077 1538.9549,4240.4744 Q1539.6397,4241.541 1540.9844,4241.541 Q1541.6153,4241.541 1542.2088,4241.2712 Q1542.8023,4241.0015 1543.4331,4240.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="113" x="1561.46" y="4241.5352">ModelDataIRBuilder</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1174.21" x2="2029.21" y1="4253" y2="4253"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.21" y="4261"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="1193.21" y="4267.6348">symbols : LLVMModelDataSymbols const&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.21" y="4273.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="1193.21" y="4280.5898">builder : llvm::IRBuilder&lt;&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.21" y="4286.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="1193.21" y="4293.5449">modelData : llvm::Value*</text><ellipse cx="1184.21" cy="4302.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="217" x="1193.21" y="4306.5">LLVMModelDataName : static const char*</text><ellipse cx="1184.21" cy="4315.8203" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="191" x="1193.21" y="4319.4551">csr_matrixName : static const char*</text><ellipse cx="1184.21" cy="4328.7754" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="1193.21" y="4332.4102">csr_matrix_get_nzName : static const char*</text><ellipse cx="1184.21" cy="4341.7305" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="232" x="1193.21" y="4345.3652">csr_matrix_set_nzName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1174.21" x2="2029.21" y1="4351.6855" y2="4351.6855"/><ellipse cx="1184.21" cy="4362.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="522" x="1193.21" y="4366.3203">ModelDataIRBuilder(llvm::Value* modelData, LLVMModelDataSymbols const &amp;, llvm::IRBuilder&lt;&gt; &amp;)</text><ellipse cx="1184.21" cy="4375.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="734" x="1193.21" y="4379.2754">createCSRMatrixGetNZ(llvm::IRBuilder&lt;&gt; &amp;, llvm::Value* csrPtr, llvm::Value* row, llvm::Value* col, const llvm::Twine&amp; name) : llvm::CallInst*</text><ellipse cx="1184.21" cy="4388.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="831" x="1193.21" y="4392.2305">createCSRMatrixSetNZ(llvm::IRBuilder&lt;&gt; &amp;, llvm::Value* csrPtr, llvm::Value* row, llvm::Value* col, llvm::Value* value, const llvm::Twine&amp; name) : llvm::CallInst*</text><ellipse cx="1184.21" cy="4401.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="340" x="1193.21" y="4405.1855">getCSRMatrixGetNZDecl(llvm::Module* module) : llvm::Function*</text><ellipse cx="1184.21" cy="4414.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="338" x="1193.21" y="4418.1406">getCSRMatrixSetNZDecl(llvm::Module* module) : llvm::Function*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.21" y="4424.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="344" x="1193.21" y="4431.0957">getModule(llvm::IRBuilder&lt;&gt; &amp;, const char* func) : llvm::Module*</text><ellipse cx="1184.21" cy="4440.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="761" x="1193.21" y="4444.0508">createModelDataStructType(llvm::Module* module, llvm::ExecutionEngine* engine, LLVMModelDataSymbols const&amp; symbols) : llvm::StructType*</text><ellipse cx="1184.21" cy="4453.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="522" x="1193.21" y="4457.0059">getCSRSparseStructType(llvm::Module* module, llvm::ExecutionEngine* engine) : llvm::StructType*</text><ellipse cx="1184.21" cy="4466.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="298" x="1193.21" y="4469.9609">getStructType(llvm::Module* module) : llvm::StructType*</text><ellipse cx="1184.21" cy="4479.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="475" x="1193.21" y="4482.916">createBoundSpeciesAmtGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4492.2363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="481" x="1193.21" y="4495.8711">createBoundSpeciesAmtLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4505.1914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="1193.21" y="4508.8262">createBoundSpeciesAmtStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4518.1465" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="1193.21" y="4521.7813">createCompGEP(const std::string&amp; id) : llvm::Value*</text><ellipse cx="1184.21" cy="4531.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="417" x="1193.21" y="4534.7363">createCompLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4544.0566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="380" x="1193.21" y="4547.6914">createCompStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4557.0117" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="467" x="1193.21" y="4560.6465">createFloatSpeciesAmtGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4569.9668" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="473" x="1193.21" y="4573.6016">createFloatSpeciesAmtLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4582.9219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="490" x="1193.21" y="4586.5566">createFloatSpeciesAmtRateGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4595.877" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="1193.21" y="4599.5117">createFloatSpeciesAmtRateLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4608.832" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="459" x="1193.21" y="4612.4668">createFloatSpeciesAmtRateStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4621.7871" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="436" x="1193.21" y="4625.4219">createFloatSpeciesAmtStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4634.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="1193.21" y="4638.377">createGEP(ModelDataFields field, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4647.6973" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="472" x="1193.21" y="4651.332">createGEP(ModelDataFields field, unsigned index, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4660.6523" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="308" x="1193.21" y="4664.2871">createGlobalParamGEP(const std::string&amp; id) : llvm::Value*</text><ellipse cx="1184.21" cy="4673.6074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="452" x="1193.21" y="4677.2422">createGlobalParamLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4686.5625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="415" x="1193.21" y="4690.1973">createGlobalParamStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4699.5176" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="428" x="1193.21" y="4703.1523">createInitCompGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4712.4727" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="434" x="1193.21" y="4716.1074">createInitCompLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4725.4277" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="397" x="1193.21" y="4729.0625">createInitCompStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4738.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="484" x="1193.21" y="4742.0176">createInitFloatSpeciesAmtGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4751.3379" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="490" x="1193.21" y="4754.9727">createInitFloatSpeciesAmtLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4764.293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="453" x="1193.21" y="4767.9277">createInitFloatSpeciesAmtStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4777.248" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="463" x="1193.21" y="4780.8828">createInitGlobalParamGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4790.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="469" x="1193.21" y="4793.8379">createInitGlobalParamLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4803.1582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="1193.21" y="4806.793">createInitGlobalParamStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4816.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="478" x="1193.21" y="4819.748">createLoad(ModelDataFields field, unsigned index, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4829.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="182" x="1193.21" y="4832.7031">createRandomLoad() : llvm::Value*</text><ellipse cx="1184.21" cy="4842.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="448" x="1193.21" y="4845.6582">createRateRuleRateGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4854.9785" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="454" x="1193.21" y="4858.6133">createRateRuleRateLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4867.9336" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="417" x="1193.21" y="4871.5684">createRateRuleRateStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4880.8887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="454" x="1193.21" y="4884.5234">createRateRuleValueGEP(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4893.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="460" x="1193.21" y="4897.4785">createRateRuleValueLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4906.7988" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="423" x="1193.21" y="4910.4336">createRateRuleValueStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4919.7539" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="454" x="1193.21" y="4923.3887">createReactionRateLoad(const std::string&amp; id, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4932.709" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="417" x="1193.21" y="4936.3438">createReactionRateStore(const std::string&amp; id, llvm::Value* value) : llvm::Value*</text><ellipse cx="1184.21" cy="4945.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="532" x="1193.21" y="4949.2988">createStoichiometryLoad(unsigned int row, unsigned int col, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4958.6191" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="633" x="1193.21" y="4962.2539">createStoichiometryStore(unsigned int row, unsigned int col, llvm::Value* value, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4971.5742" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="579" x="1193.21" y="4975.209">createStore(ModelDataFields field, unsigned index, llvm::Value* value, const llvm::Twine&amp; name) : llvm::Value*</text><ellipse cx="1184.21" cy="4984.5293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="443" x="1193.21" y="4988.1641">getModelDataSize(llvm::Module* module, llvm::ExecutionEngine* engine) : unsigned</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1181.21" y="4994.4844"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="309" x="1193.21" y="5001.1191">validateStruct(llvm::Value* s, const char* funcName) : void</text><!--MD5=[f1d107b172f0f2d1ffbe7f7d39faf09d]
class rrllvm.ModelDataLoadSymbolResolver--><rect codeLine="613" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.ModelDataLoadSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="563" x="762.21" y="3802"/><ellipse cx="949.46" cy="3818" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M951.9331,3824.1431 Q951.3521,3824.4419 950.7129,3824.5913 Q950.0738,3824.7407 949.3682,3824.7407 Q946.8614,3824.7407 945.5415,3823.0889 Q944.2217,3821.437 944.2217,3818.3159 Q944.2217,3815.1865 945.5415,3813.5347 Q946.8614,3811.8828 949.3682,3811.8828 Q950.0738,3811.8828 950.7212,3812.0322 Q951.3687,3812.1816 951.9331,3812.4805 L951.9331,3815.2031 Q951.3023,3814.6221 950.7088,3814.3523 Q950.1153,3814.0825 949.4844,3814.0825 Q948.1397,3814.0825 947.4549,3815.1492 Q946.7701,3816.2158 946.7701,3818.3159 Q946.7701,3820.4077 947.4549,3821.4744 Q948.1397,3822.541 949.4844,3822.541 Q950.1153,3822.541 950.7088,3822.2712 Q951.3023,3822.0015 951.9331,3821.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="180" x="969.96" y="3822.5352">ModelDataLoadSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="763.21" x2="1324.21" y1="3834" y2="3834"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="770.21" y="3842"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="782.21" y="3848.6348">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="763.21" x2="1324.21" y1="3854.9551" y2="3854.9551"/><ellipse cx="773.21" cy="3865.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="493" x="782.21" y="3869.5898">ModelDataLoadSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext&amp; ctx)</text><ellipse cx="773.21" cy="3878.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="182" x="782.21" y="3882.5449">~ModelDataLoadSymbolResolver()</text><ellipse cx="773.21" cy="3891.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="537" x="782.21" y="3895.5">loadSymbolValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args) : llvm::Value*</text><!--MD5=[ac7e16e88696999e0ba42dd428b95db9]
class rrllvm.ModelDataStoreSymbolResolver--><rect codeLine="620" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="164.5957" id="rrllvm.ModelDataStoreSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="1316" x="440.71" y="511.5"/><ellipse cx="1003.96" cy="527.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1006.4331,533.6431 Q1005.8521,533.9419 1005.2129,534.0913 Q1004.5738,534.2407 1003.8682,534.2407 Q1001.3614,534.2407 1000.0415,532.5889 Q998.7217,530.937 998.7217,527.8159 Q998.7217,524.6865 1000.0415,523.0347 Q1001.3614,521.3828 1003.8682,521.3828 Q1004.5738,521.3828 1005.2212,521.5322 Q1005.8687,521.6816 1006.4331,521.9805 L1006.4331,524.7031 Q1005.8023,524.1221 1005.2088,523.8523 Q1004.6153,523.5825 1003.9844,523.5825 Q1002.6397,523.5825 1001.9549,524.6492 Q1001.2701,525.7158 1001.2701,527.8159 Q1001.2701,529.9077 1001.9549,530.9744 Q1002.6397,532.041 1003.9844,532.041 Q1004.6153,532.041 1005.2088,531.7712 Q1005.8023,531.5015 1006.4331,530.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="181" x="1024.46" y="532.0352">ModelDataStoreSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="441.71" x2="1755.71" y1="543.5" y2="543.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="551.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="172" x="460.71" y="558.1348">resolver : LoadSymbolResolver&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="564.4551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="460.71" y="571.0898">modelDataSymbols : const LLVMModelDataSymbols&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="577.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="460.71" y="584.0449">modelSymbols : const LLVMModelSymbols&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="590.3652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="460.71" y="597">model : const libsbml::Model*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="603.3203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="460.71" y="609.9551">builder : llvm::IRBuilder&lt;&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="448.71" y="616.2754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="460.71" y="622.9102">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="441.71" x2="1755.71" y1="629.2305" y2="629.2305"/><ellipse cx="451.71" cy="640.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="1290" x="460.71" y="643.8652">ModelDataStoreSymbolResolver(llvm::Value* modelData, const libsbml::Model* model, const LLVMModelSymbols&amp; modelSymbols, const LLVMModelDataSymbols&amp; modelDataSymbols, llvm::IRBuilder&lt;&gt;&amp; builder, LoadSymbolResolver&amp; resolver)</text><ellipse cx="451.71" cy="653.1855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="184" x="460.71" y="656.8203">~ModelDataStoreSymbolResolver()</text><ellipse cx="451.71" cy="666.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="412" x="460.71" y="669.7754">storeSymbolValue(const std::string&amp; symbol, llvm::Value* value) : llvm::Value*</text><!--MD5=[d0f907bc90f3bf06414468e477f718dc]
class rrllvm.ModelGeneratorContext--><rect codeLine="632" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="527.3379" id="rrllvm.ModelGeneratorContext" style="stroke:#A80036;stroke-width:1.5;" width="503" x="2843.21" y="3588.5"/><ellipse cx="3021.96" cy="3604.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3024.4331,3610.6431 Q3023.8521,3610.9419 3023.2129,3611.0913 Q3022.5738,3611.2407 3021.8682,3611.2407 Q3019.3614,3611.2407 3018.0415,3609.5889 Q3016.7217,3607.937 3016.7217,3604.8159 Q3016.7217,3601.6865 3018.0415,3600.0347 Q3019.3614,3598.3828 3021.8682,3598.3828 Q3022.5738,3598.3828 3023.2212,3598.5322 Q3023.8687,3598.6816 3024.4331,3598.9805 L3024.4331,3601.7031 Q3023.8023,3601.1221 3023.2088,3600.8523 Q3022.6153,3600.5825 3021.9844,3600.5825 Q3020.6397,3600.5825 3019.9549,3601.6492 Q3019.2701,3602.7158 3019.2701,3604.8159 Q3019.2701,3606.9077 3019.9549,3607.9744 Q3020.6397,3609.041 3021.9844,3609.041 Q3022.6153,3609.041 3023.2088,3608.7712 Q3023.8023,3608.5015 3024.4331,3607.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="137" x="3042.46" y="3609.0352">ModelGeneratorContext</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2844.21" x2="3345.21" y1="3620.5" y2="3620.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3628.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="197" x="2863.21" y="3635.1348">modelSymbols : LLVMModelSymbols*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3641.4551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="100" x="2863.21" y="3648.0898">random : Random*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3654.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="2863.21" y="3661.0449">symbols : const LLVMModelDataSymbols*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3667.3652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="2863.21" y="3674">model : const libsbml::Model*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3680.3203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="2863.21" y="3686.9551">doc : const libsbml::SBMLDocument*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3693.2754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="197" x="2863.21" y="3699.9102">ownedDoc : libsbml::SBMLDocument*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3706.2305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="220" x="2863.21" y="3712.8652">executionEngine : llvm::ExecutionEngine*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3719.1855"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="145" x="2863.21" y="3725.8203">builder : llvm::IRBuilder&lt;&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3732.1406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="154" x="2863.21" y="3738.7754">context : llvm::LLVMContext*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3745.0957"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="2863.21" y="3751.7305">module : llvm::Module*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3758.0508"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="2863.21" y="3764.6855">functionPassManager : llvm::legacy::FunctionPassManager*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3771.0059"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="343" x="2863.21" y="3777.6406">moietyConverter : rr::conservation::ConservedMoietyConverter*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3783.9609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="117" x="2863.21" y="3790.5957">errString : std::string*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3796.916"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="2863.21" y="3803.5508">module_owner : std::unique_ptr&lt;llvm::Module&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="3809.8711"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="100" x="2863.21" y="3816.5059">options : unsigned</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2844.21" x2="3345.21" y1="3822.8262" y2="3822.8262"/><ellipse cx="2854.21" cy="3833.8262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="414" x="2863.21" y="3837.4609">ModelGeneratorContext(std::string const&amp; sbml, unsigned loadSBMLOptions)</text><ellipse cx="2854.21" cy="3846.7813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="477" x="2863.21" y="3850.416">ModelGeneratorContext(libsbml::SBMLDocument const* doc, unsigned loadSBMLOptions)</text><ellipse cx="2854.21" cy="3859.7363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="137" x="2863.21" y="3863.3711">ModelGeneratorContext()</text><ellipse cx="2854.21" cy="3872.6914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="144" x="2863.21" y="3876.3262">~ModelGeneratorContext()</text><ellipse cx="2854.21" cy="3885.6465" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="2863.21" y="3889.2813">getModelDataSymbols() : LLVMModelDataSymbols&amp; {query}</text><ellipse cx="2854.21" cy="3898.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="266" x="2863.21" y="3902.2363">getModelSymbols() : LLVMModelSymbols&amp; {query}</text><ellipse cx="2854.21" cy="3911.5566" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="2863.21" y="3915.1914">getRandom() : Random* {query}</text><ellipse cx="2854.21" cy="3924.5117" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="238" x="2863.21" y="3928.1465">getConservedMoietyAnalysis() : bool {query}</text><ellipse cx="2854.21" cy="3937.4668" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="2863.21" y="3941.1016">useSymbolCache() : bool {query}</text><ellipse cx="2854.21" cy="3950.4219" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="2863.21" y="3954.0566">getModel() : libsbml::Model* {query}</text><ellipse cx="2854.21" cy="3963.377" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="263" x="2863.21" y="3967.0117">getDocument() : libsbml::SBMLDocument* {query}</text><ellipse cx="2854.21" cy="3976.332" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="290" x="2863.21" y="3979.9668">getExecutionEngine() : llvm::ExecutionEngine&amp; {query}</text><ellipse cx="2854.21" cy="3989.2871" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="214" x="2863.21" y="3992.9219">getBuilder() : llvm::IRBuilder&lt;&gt;&amp; {query}</text><ellipse cx="2854.21" cy="4002.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="2863.21" y="4005.877">getContext() : llvm::LLVMContext&amp; {query}</text><ellipse cx="2854.21" cy="4015.1973" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="187" x="2863.21" y="4018.832">getModule() : llvm::Module* {query}</text><ellipse cx="2854.21" cy="4028.1523" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="2863.21" y="4031.7871">getFunctionPassManager() : llvm::legacy::FunctionPassManager* {query}</text><ellipse cx="2854.21" cy="4041.1074" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="2863.21" y="4044.7422">getOptions() : unsigned {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="4051.0625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="347" x="2863.21" y="4057.6973">addGlobalMapping(const llvm::GlobalValue* gv, void* addr) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="4064.0176"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="2863.21" y="4070.6523">addGlobalMappings() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="4076.9727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="2863.21" y="4083.6074">cleanup() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2851.21" y="4089.9277"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="2863.21" y="4096.5625">initFunctionPassManager() : void</text><ellipse cx="2854.21" cy="4105.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="434" x="2863.21" y="4109.5176">transferObjectsToResources(std::shared_ptr&lt;rrllvm::ModelResources&gt; rc) : void</text><!--MD5=[4aaddce46eb412bedfee0864b4978456]
class rrllvm.ModelInitialValueStoreSymbolResolver--><rect codeLine="672" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="164.5957" id="rrllvm.ModelInitialValueStoreSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="1350" x="1791.71" y="511.5"/><ellipse cx="2354.46" cy="527.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2356.9331,533.6431 Q2356.3521,533.9419 2355.7129,534.0913 Q2355.0738,534.2407 2354.3682,534.2407 Q2351.8614,534.2407 2350.5415,532.5889 Q2349.2217,530.937 2349.2217,527.8159 Q2349.2217,524.6865 2350.5415,523.0347 Q2351.8614,521.3828 2354.3682,521.3828 Q2355.0738,521.3828 2355.7212,521.5322 Q2356.3687,521.6816 2356.9331,521.9805 L2356.9331,524.7031 Q2356.3023,524.1221 2355.7088,523.8523 Q2355.1153,523.5825 2354.4844,523.5825 Q2353.1397,523.5825 2352.4549,524.6492 Q2351.7701,525.7158 2351.7701,527.8159 Q2351.7701,529.9077 2352.4549,530.9744 Q2353.1397,532.041 2354.4844,532.041 Q2355.1153,532.041 2355.7088,531.7712 Q2356.3023,531.5015 2356.9331,530.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="216" x="2374.96" y="532.0352">ModelInitialValueStoreSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1792.71" x2="3140.71" y1="543.5" y2="543.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799.71" y="551.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="172" x="1811.71" y="558.1348">resolver : LoadSymbolResolver&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799.71" y="564.4551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="281" x="1811.71" y="571.0898">modelDataSymbols : const LLVMModelDataSymbols&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799.71" y="577.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="233" x="1811.71" y="584.0449">modelSymbols : const LLVMModelSymbols&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799.71" y="590.3652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="1811.71" y="597">model : const libsbml::Model*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799.71" y="603.3203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="148" x="1811.71" y="609.9551">builder : llvm::IRBuilder&lt;&gt;&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1799.71" y="616.2754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="1811.71" y="622.9102">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1792.71" x2="3140.71" y1="629.2305" y2="629.2305"/><ellipse cx="1802.71" cy="640.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="1324" x="1811.71" y="643.8652">ModelInitialValueStoreSymbolResolver(llvm::Value* modelData, const libsbml::Model* model, const LLVMModelSymbols&amp; modelSymbols, const LLVMModelDataSymbols&amp; modelDataSymbols, llvm::IRBuilder&lt;&gt;&amp; builder, LoadSymbolResolver&amp; resolver)</text><ellipse cx="1802.71" cy="653.1855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="218" x="1811.71" y="656.8203">~ModelInitialValueStoreSymbolResolver()</text><ellipse cx="1802.71" cy="666.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="412" x="1811.71" y="669.7754">storeSymbolValue(const std::string&amp; symbol, llvm::Value* value) : llvm::Value*</text><!--MD5=[cba51dfc7420ef6c85591cd2455e10ee]
class rrllvm.ModelInitialValueSymbolResolver--><rect codeLine="684" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.ModelInitialValueSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="563" x="1360.21" y="3802"/><ellipse cx="1543.96" cy="3818" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1546.4331,3824.1431 Q1545.8521,3824.4419 1545.2129,3824.5913 Q1544.5738,3824.7407 1543.8682,3824.7407 Q1541.3614,3824.7407 1540.0415,3823.0889 Q1538.7217,3821.437 1538.7217,3818.3159 Q1538.7217,3815.1865 1540.0415,3813.5347 Q1541.3614,3811.8828 1543.8682,3811.8828 Q1544.5738,3811.8828 1545.2212,3812.0322 Q1545.8687,3812.1816 1546.4331,3812.4805 L1546.4331,3815.2031 Q1545.8023,3814.6221 1545.2088,3814.3523 Q1544.6153,3814.0825 1543.9844,3814.0825 Q1542.6397,3814.0825 1541.9549,3815.1492 Q1541.2701,3816.2158 1541.2701,3818.3159 Q1541.2701,3820.4077 1541.9549,3821.4744 Q1542.6397,3822.541 1543.9844,3822.541 Q1544.6153,3822.541 1545.2088,3822.2712 Q1545.8023,3822.0015 1546.4331,3821.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="187" x="1564.46" y="3822.5352">ModelInitialValueSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1361.21" x2="1922.21" y1="3834" y2="3834"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1368.21" y="3842"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="1380.21" y="3848.6348">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1361.21" x2="1922.21" y1="3854.9551" y2="3854.9551"/><ellipse cx="1371.21" cy="3865.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="501" x="1380.21" y="3869.5898">ModelInitialValueSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext&amp; ctx)</text><ellipse cx="1371.21" cy="3878.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="1380.21" y="3882.5449">~ModelInitialValueSymbolResolver()</text><ellipse cx="1371.21" cy="3891.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="537" x="1380.21" y="3895.5">loadSymbolValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args) : llvm::Value*</text><!--MD5=[afcf34279ff5c57b7afd9a4251a426e6]
class rrllvm.ModelResources--><rect codeLine="691" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="618.0234" id="rrllvm.ModelResources" style="stroke:#A80036;stroke-width:1.5;" width="645" x="10018.21" y="3543"/><ellipse cx="10289.46" cy="3559" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10291.9331,3565.1431 Q10291.3521,3565.4419 10290.7129,3565.5913 Q10290.0738,3565.7407 10289.3682,3565.7407 Q10286.8614,3565.7407 10285.5415,3564.0889 Q10284.2217,3562.437 10284.2217,3559.3159 Q10284.2217,3556.1865 10285.5415,3554.5347 Q10286.8614,3552.8828 10289.3682,3552.8828 Q10290.0738,3552.8828 10290.7212,3553.0322 Q10291.3687,3553.1816 10291.9331,3553.4805 L10291.9331,3556.2031 Q10291.3023,3555.6221 10290.7088,3555.3523 Q10290.1153,3555.0825 10289.4844,3555.0825 Q10288.1397,3555.0825 10287.4549,3556.1492 Q10286.7701,3557.2158 10286.7701,3559.3159 Q10286.7701,3561.4077 10287.4549,3562.4744 Q10288.1397,3563.541 10289.4844,3563.541 Q10290.1153,3563.541 10290.7088,3563.2712 Q10291.3023,3563.0015 10291.9331,3562.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="94" x="10309.96" y="3563.5352">ModelResources</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10019.21" x2="10662.21" y1="3575" y2="3575"/><ellipse cx="10029.21" cy="3586" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="375" x="10038.21" y="3589.6348">evalConversionFactorPtr : EvalConversionFactorCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3598.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="10038.21" y="3602.5898">evalInitialConditionsPtr : EvalInitialConditionsCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3611.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="10038.21" y="3615.5449">evalRateRuleRatesPtr : EvalRateRuleRatesCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3624.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="10038.21" y="3628.5">evalReactionRatesPtr : EvalReactionRatesCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3637.8203" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="327" x="10038.21" y="3641.4551">evalVolatileStoichPtr : EvalVolatileStoichCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3650.7754" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="10038.21" y="3654.4102">eventAssignPtr : EventAssignCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3663.7305" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="10038.21" y="3667.3652">eventTriggerPtr : EventTriggerCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3676.6855" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="10038.21" y="3680.3203">getBoundarySpeciesAmountPtr : GetBoundarySpeciesAmountCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3689.6406" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="512" x="10038.21" y="3693.2754">getBoundarySpeciesConcentrationPtr : GetBoundarySpeciesConcentrationCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3702.5957" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="10038.21" y="3706.2305">getCompartmentInitVolumesPtr : GetCompartmentInitVolumeCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3715.5508" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="404" x="10038.21" y="3719.1855">getCompartmentVolumePtr : GetCompartmentVolumeCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3728.5059" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="10038.21" y="3732.1406">getEventDelayPtr : GetEventDelayCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3741.4609" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="312" x="10038.21" y="3745.0957">getEventPriorityPtr : GetEventPriorityCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3754.416" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="10038.21" y="3758.0508">getEventTriggerPtr : GetEventTriggerCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3767.3711" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="428" x="10038.21" y="3771.0059">getFloatingSpeciesAmountPtr : GetFloatingSpeciesAmountCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3780.3262" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="10038.21" y="3783.9609">getFloatingSpeciesConcentrationPtr : GetFloatingSpeciesConcentrationCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3793.2813" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="468" x="10038.21" y="3796.916">getFloatingSpeciesInitAmountsPtr : GetFloatingSpeciesInitAmountCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3806.2363" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="536" x="10038.21" y="3809.8711">getFloatingSpeciesInitConcentrationsPtr : GetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3819.1914" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="352" x="10038.21" y="3822.8262">getGlobalParameterPtr : GetGlobalParameterCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3832.1465" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="10038.21" y="3835.7813">getGlobalParameterInitValuePtr : GetGlobalParameterInitValueCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3845.1016" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10038.21" y="3848.7363">setBoundarySpeciesAmountPtr : SetBoundarySpeciesAmountCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3858.0566" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="509" x="10038.21" y="3861.6914">setBoundarySpeciesConcentrationPtr : SetBoundarySpeciesConcentrationCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3871.0117" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10038.21" y="3874.6465">setCompartmentInitVolumesPtr : SetCompartmentInitVolumeCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3883.9668" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="401" x="10038.21" y="3887.6016">setCompartmentVolumePtr : SetCompartmentVolumeCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3896.9219" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="425" x="10038.21" y="3900.5566">setFloatingSpeciesAmountPtr : SetFloatingSpeciesAmountCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3909.877" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="493" x="10038.21" y="3913.5117">setFloatingSpeciesConcentrationPtr : SetFloatingSpeciesConcentrationCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3922.832" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="465" x="10038.21" y="3926.4668">setFloatingSpeciesInitAmountsPtr : SetFloatingSpeciesInitAmountCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3935.7871" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="533" x="10038.21" y="3939.4219">setFloatingSpeciesInitConcentrationsPtr : SetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3948.7422" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="10038.21" y="3952.377">setGlobalParameterPtr : SetGlobalParameterCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3961.6973" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10038.21" y="3965.332">setGlobalParameterInitValuePtr : SetGlobalParameterInitValueCodeGen::FunctionPtr</text><ellipse cx="10029.21" cy="3974.6523" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="10038.21" y="3978.2871">symbols : const LLVMModelDataSymbols*</text><ellipse cx="10029.21" cy="3987.6074" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="163" x="10038.21" y="3991.2422">random : const class Random*</text><ellipse cx="10029.21" cy="4000.5625" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="10038.21" y="4004.1973">errStr : const std::string*</text><ellipse cx="10029.21" cy="4013.5176" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="220" x="10038.21" y="4017.1523">executionEngine : llvm::ExecutionEngine*</text><ellipse cx="10029.21" cy="4026.4727" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="154" x="10038.21" y="4030.1074">context : llvm::LLVMContext*</text><ellipse cx="10029.21" cy="4039.4277" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="10038.21" y="4043.0625">module : llvm::Module*</text><ellipse cx="10029.21" cy="4052.3828" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="119" x="10038.21" y="4056.0176">moduleStr : std::string</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10019.21" x2="10662.21" y1="4062.3379" y2="4062.3379"/><ellipse cx="10029.21" cy="4073.3379" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="96" x="10038.21" y="4076.9727">ModelResources()</text><ellipse cx="10029.21" cy="4086.293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="103" x="10038.21" y="4089.9277">~ModelResources()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10026.21" y="4096.248"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="619" x="10038.21" y="4102.8828">createGlobalMappingFunction(const char* funcName, llvm::FunctionType* funcType, llvm::Module*) : llvm::Function*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10026.21" y="4109.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="261" x="10038.21" y="4115.8379">addGlobalMapping(std::string name, void*) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10026.21" y="4122.1582"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="10038.21" y="4128.793">addGlobalMappings() : void</text><ellipse cx="10029.21" cy="4138.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="10038.21" y="4141.748">loadState(std::istream&amp; in, unsigned int loadOpt) : void</text><ellipse cx="10029.21" cy="4151.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="228" x="10038.21" y="4154.7031">saveState(std::ostream&amp; out) : void {query}</text><!--MD5=[762f1b9c3ccd6452df7f3c32e5ff0de4]
class rrllvm.RR_DECLSPECLLVMCompiler--><rect codeLine="738" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="203.4609" id="rrllvm.RR_DECLSPECLLVMCompiler" style="stroke:#A80036;stroke-width:1.5;" width="311" x="10386.21" y="492.5"/><ellipse cx="10456.46" cy="508.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10458.9331,514.6431 Q10458.3521,514.9419 10457.7129,515.0913 Q10457.0738,515.2407 10456.3682,515.2407 Q10453.8614,515.2407 10452.5415,513.5889 Q10451.2217,511.937 10451.2217,508.8159 Q10451.2217,505.6865 10452.5415,504.0347 Q10453.8614,502.3828 10456.3682,502.3828 Q10457.0738,502.3828 10457.7212,502.5322 Q10458.3687,502.6816 10458.9331,502.9805 L10458.9331,505.7031 Q10458.3023,505.1221 10457.7088,504.8523 Q10457.1153,504.5825 10456.4844,504.5825 Q10455.1397,504.5825 10454.4549,505.6492 Q10453.7701,506.7158 10453.7701,508.8159 Q10453.7701,510.9077 10454.4549,511.9744 Q10455.1397,513.041 10456.4844,513.041 Q10457.1153,513.041 10457.7088,512.7712 Q10458.3023,512.5015 10458.9331,511.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="162" x="10476.96" y="513.0352">RR_DECLSPECLLVMCompiler</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10387.21" x2="10696.21" y1="524.5" y2="524.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="10387.21" x2="10696.21" y1="532.5" y2="532.5"/><ellipse cx="10397.21" cy="543.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="85" x="10406.21" y="547.1348">LLVMCompiler()</text><ellipse cx="10397.21" cy="556.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="10406.21" y="560.0898">~LLVMCompiler()</text><ellipse cx="10397.21" cy="569.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="252" x="10406.21" y="573.0449">setCompiler(const std::string&amp; compiler) : bool</text><ellipse cx="10397.21" cy="582.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="275" x="10406.21" y="586">setCompilerLocation(const std::string&amp; path) : bool</text><ellipse cx="10397.21" cy="595.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="285" x="10406.21" y="598.9551">setSupportCodeFolder(const std::string&amp; path) : bool</text><ellipse cx="10397.21" cy="608.2754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="10406.21" y="611.9102">getCompiler() : std::string {query}</text><ellipse cx="10397.21" cy="621.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="10406.21" y="624.8652">getCompilerLocation() : std::string {query}</text><ellipse cx="10397.21" cy="634.1855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="10406.21" y="637.8203">getDefaultTargetTriple() : std::string</text><ellipse cx="10397.21" cy="647.1406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="166" x="10406.21" y="650.7754">getHostCPUName() : std::string</text><ellipse cx="10397.21" cy="660.0957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="10406.21" y="663.7305">getProcessTriple() : std::string</text><ellipse cx="10397.21" cy="673.0508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="236" x="10406.21" y="676.6855">getSupportCodeFolder() : std::string {query}</text><ellipse cx="10397.21" cy="686.0059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="10406.21" y="689.6406">getVersion() : std::string</text><!--MD5=[9d638b1e462ec1895a5a87f93ab7d8f8]
class rrllvm.RR_DECLSPECLLVMExecutableModel--><rect codeLine="753" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="1991.2617" id="rrllvm.RR_DECLSPECLLVMExecutableModel" style="stroke:#A80036;stroke-width:1.5;" width="716" x="9982.71" y="1492"/><ellipse cx="10232.46" cy="1508" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10234.9331,1514.1431 Q10234.3521,1514.4419 10233.7129,1514.5913 Q10233.0738,1514.7407 10232.3682,1514.7407 Q10229.8614,1514.7407 10228.5415,1513.0889 Q10227.2217,1511.437 10227.2217,1508.3159 Q10227.2217,1505.1865 10228.5415,1503.5347 Q10229.8614,1501.8828 10232.3682,1501.8828 Q10233.0738,1501.8828 10233.7212,1502.0322 Q10234.3687,1502.1816 10234.9331,1502.4805 L10234.9331,1505.2031 Q10234.3023,1504.6221 10233.7088,1504.3523 Q10233.1153,1504.0825 10232.4844,1504.0825 Q10231.1397,1504.0825 10230.4549,1505.1492 Q10229.7701,1506.2158 10229.7701,1508.3159 Q10229.7701,1510.4077 10230.4549,1511.4744 Q10231.1397,1512.541 10232.4844,1512.541 Q10233.1153,1512.541 10233.7088,1512.2712 Q10234.3023,1512.0015 10234.9331,1511.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="208" x="10252.96" y="1512.5352">RR_DECLSPECLLVMExecutableModel</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9983.71" x2="10697.71" y1="1524" y2="1524"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1532"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="375" x="10002.71" y="1538.6348">evalConversionFactorPtr : EvalConversionFactorCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1544.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="10002.71" y="1551.5898">evalInitialConditionsPtr : EvalInitialConditionsCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1557.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="10002.71" y="1564.5449">evalRateRuleRatesPtr : EvalRateRuleRatesCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1570.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="10002.71" y="1577.5">evalReactionRatesPtr : EvalReactionRatesCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1583.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="327" x="10002.71" y="1590.4551">evalVolatileStoichPtr : EvalVolatileStoichCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1596.7754"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="10002.71" y="1603.4102">eventAssignPtr : EventAssignCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1609.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="279" x="10002.71" y="1616.3652">eventTriggerPtr : EventTriggerCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1622.6855"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="10002.71" y="1629.3203">getBoundarySpeciesAmountPtr : GetBoundarySpeciesAmountCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1635.6406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="512" x="10002.71" y="1642.2754">getBoundarySpeciesConcentrationPtr : GetBoundarySpeciesConcentrationCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1648.5957"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="10002.71" y="1655.2305">getCompartmentInitVolumesPtr : GetCompartmentInitVolumeCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1661.5508"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="404" x="10002.71" y="1668.1855">getCompartmentVolumePtr : GetCompartmentVolumeCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1674.5059"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="292" x="10002.71" y="1681.1406">getEventDelayPtr : GetEventDelayCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1687.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="312" x="10002.71" y="1694.0957">getEventPriorityPtr : GetEventPriorityCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1700.416"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="314" x="10002.71" y="1707.0508">getEventTriggerPtr : GetEventTriggerCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1713.3711"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="428" x="10002.71" y="1720.0059">getFloatingSpeciesAmountPtr : GetFloatingSpeciesAmountCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1726.3262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="10002.71" y="1732.9609">getFloatingSpeciesConcentrationPtr : GetFloatingSpeciesConcentrationCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1739.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="468" x="10002.71" y="1745.916">getFloatingSpeciesInitAmountsPtr : GetFloatingSpeciesInitAmountCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1752.2363"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="536" x="10002.71" y="1758.8711">getFloatingSpeciesInitConcentrationsPtr : GetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1765.1914"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="352" x="10002.71" y="1771.8262">getGlobalParameterPtr : GetGlobalParameterCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1778.1465"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="444" x="10002.71" y="1784.7813">getGlobalParameterInitValuePtr : GetGlobalParameterInitValueCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1791.1016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="10002.71" y="1797.7363">modelData : LLVMModelData*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1804.0566"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="198" x="10002.71" y="1810.6914">selectionRecordCache : SelectionMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1817.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10002.71" y="1823.6465">setBoundarySpeciesAmountPtr : SetBoundarySpeciesAmountCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1829.9668"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="509" x="10002.71" y="1836.6016">setBoundarySpeciesConcentrationPtr : SetBoundarySpeciesConcentrationCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1842.9219"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10002.71" y="1849.5566">setCompartmentInitVolumesPtr : SetCompartmentInitVolumeCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1855.877"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="401" x="10002.71" y="1862.5117">setCompartmentVolumePtr : SetCompartmentVolumeCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1868.832"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="425" x="10002.71" y="1875.4668">setFloatingSpeciesAmountPtr : SetFloatingSpeciesAmountCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1881.7871"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="493" x="10002.71" y="1888.4219">setFloatingSpeciesConcentrationPtr : SetFloatingSpeciesConcentrationCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1894.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="465" x="10002.71" y="1901.377">setFloatingSpeciesInitAmountsPtr : SetFloatingSpeciesInitAmountCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1907.6973"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="533" x="10002.71" y="1914.332">setFloatingSpeciesInitConcentrationsPtr : SetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1920.6523"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="349" x="10002.71" y="1927.2871">setGlobalParameterPtr : SetGlobalParameterCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1933.6074"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10002.71" y="1940.2422">setGlobalParameterInitValuePtr : SetGlobalParameterInitValueCodeGen::FunctionPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1946.5625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="10002.71" y="1953.1973">tieBreakMap : TieBreakMap</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1959.5176"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="221" x="10002.71" y="1966.1523">symbols : const LLVMModelDataSymbols*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1972.4727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="287" x="10002.71" y="1979.1074">resources : cxx11_ns::shared_ptr&lt;ModelResources&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1985.4277"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="10002.71" y="1992.0625">conversionFactor : double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="1998.3828"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="10002.71" y="2005.0176">pendingEvents : rrllvm::EventQueue</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2011.3379"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="219" x="10002.71" y="2017.9727">eventAssignTimes : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2024.293"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="265" x="10002.71" y="2030.9277">eventListeners : std::vector&lt;rr::EventListenerPtr&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2037.248"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="79" x="10002.71" y="2043.8828">dirty : uint32_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2050.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="80" x="10002.71" y="2056.8379">flags : uint32_t</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9983.71" x2="10697.71" y1="2063.1582" y2="2063.1582"/><ellipse cx="9993.71" cy="2074.1582" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="10002.71" y="2077.793">LLVMExecutableModel()</text><ellipse cx="9993.71" cy="2087.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="567" x="10002.71" y="2090.748">LLVMExecutableModel(const std::shared_ptr&lt;ModelResources&gt;&amp; resources, LLVMModelData* modelData)</text><ellipse cx="9993.71" cy="2100.0684" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="393" x="10002.71" y="2103.7031">LLVMExecutableModel(std::istream&amp; in, unsigned int modelGeneratorOpt)</text><ellipse cx="9993.71" cy="2113.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="10002.71" y="2116.6582">~LLVMExecutableModel()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2122.9785"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="10002.71" y="2129.6133">dummy() : LLVMExecutableModel*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2135.9336"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="438" x="10002.71" y="2142.5684">applyEvents(unsigned char* prevEventState, unsigned char* currEventState) : bool</text><ellipse cx="9993.71" cy="2151.8887" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="208" x="10002.71" y="2155.5234">getEventInitialValue(size_t event) : bool</text><ellipse cx="9993.71" cy="2164.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="203" x="10002.71" y="2168.4785">getEventPersistent(size_t event) : bool</text><ellipse cx="9993.71" cy="2177.7988" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="278" x="10002.71" y="2181.4336">getEventTieBreak(size_t eventA, size_t eventB) : bool</text><ellipse cx="9993.71" cy="2190.7539" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="190" x="10002.71" y="2194.3887">getEventTrigger(size_t event) : bool</text><ellipse cx="9993.71" cy="2203.709" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="299" x="10002.71" y="2207.3438">getEventUseValuesFromTriggerTime(size_t event) : bool</text><ellipse cx="9993.71" cy="2216.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="192" x="10002.71" y="2220.2988">getEventDelay(size_t event) : double</text><ellipse cx="9993.71" cy="2229.6191" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="10002.71" y="2233.2539">getEventPriority(size_t event) : double</text><ellipse cx="9993.71" cy="2242.5742" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="441" x="10002.71" y="2246.209">getFloatingSpeciesAmountRate(size_t index, const double* reactionRates) : double</text><ellipse cx="9993.71" cy="2255.5293" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="242" x="10002.71" y="2259.1641">getNextPendingEventTime(bool pop) : double</text><ellipse cx="9993.71" cy="2268.4844" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="115" x="10002.71" y="2272.1191">getRandom() : double</text><ellipse cx="9993.71" cy="2281.4395" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="329" x="10002.71" y="2285.0742">getStoichiometry(int speciesIndex, int reactionIndex) : double</text><ellipse cx="9993.71" cy="2294.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="97" x="10002.71" y="2298.0293">getTime() : double</text><ellipse cx="9993.71" cy="2307.3496" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="10002.71" y="2310.9844">getValue(const std::string&amp; id) : double</text><ellipse cx="9993.71" cy="2320.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="643" x="10002.71" y="2323.9395">applyEvents(double timeEnd, const unsigned char* previousEventState, const double* initialState, double* finalState) : int</text><ellipse cx="9993.71" cy="2333.2598" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="408" x="10002.71" y="2336.8945">getBoundarySpeciesAmounts(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2346.2148" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="442" x="10002.71" y="2349.8496">getBoundarySpeciesConcentrations(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2359.1699" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="10002.71" y="2362.8047">getBoundarySpeciesIndex(const std::string &amp;) : int</text><ellipse cx="9993.71" cy="2372.125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="251" x="10002.71" y="2375.7598">getCompartmentIndex(const std::string &amp;) : int</text><ellipse cx="9993.71" cy="2385.0801" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="10002.71" y="2388.7148">getCompartmentIndexForFloatingSpecies(size_t index) : int</text><ellipse cx="9993.71" cy="2398.0352" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="405" x="10002.71" y="2401.6699">getCompartmentInitVolumes(size_t len, const int* indx, double* values) : int</text><ellipse cx="9993.71" cy="2410.9902" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="388" x="10002.71" y="2414.625">getCompartmentVolumes(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2423.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="299" x="10002.71" y="2427.5801">getConservedMoietyIndex(const std::string&amp; name) : int</text><ellipse cx="9993.71" cy="2436.9004" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="396" x="10002.71" y="2440.5352">getConservedMoietyValues(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2449.8555" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="222" x="10002.71" y="2453.4902">getEventIndex(const std::string&amp; eid) : int</text><ellipse cx="9993.71" cy="2462.8105" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="404" x="10002.71" y="2466.4453">getEventTriggers(size_t len, const int* indx, unsigned char* eventState) : int</text><ellipse cx="9993.71" cy="2475.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="423" x="10002.71" y="2479.4004">getFloatingSpeciesAmountRates(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2488.7207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="400" x="10002.71" y="2492.3555">getFloatingSpeciesAmounts(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2501.6758" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="457" x="10002.71" y="2505.3105">getFloatingSpeciesConcentrationRates(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2514.6309" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="434" x="10002.71" y="2518.2656">getFloatingSpeciesConcentrations(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2527.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="260" x="10002.71" y="2531.2207">getFloatingSpeciesIndex(const std::string &amp;) : int</text><ellipse cx="9993.71" cy="2540.541" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="10002.71" y="2544.1758">getFloatingSpeciesInitAmounts(size_t size_t, const int* indx, double* values) : int</text><ellipse cx="9993.71" cy="2553.4961" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="451" x="10002.71" y="2557.1309">getFloatingSpeciesInitConcentrations(size_t len, const int* indx, double* values) : int</text><ellipse cx="9993.71" cy="2566.4512" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="265" x="10002.71" y="2570.0859">getGlobalParameterIndex(const std::string &amp;) : int</text><ellipse cx="9993.71" cy="2579.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="408" x="10002.71" y="2583.041">getGlobalParameterInitValues(size_t len, const int* indx, double* values) : int</text><ellipse cx="9993.71" cy="2592.3613" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="391" x="10002.71" y="2595.9961">getGlobalParameterValues(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2605.3164" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="164" x="10002.71" y="2608.9512">getNumBoundarySpecies() : int</text><ellipse cx="9993.71" cy="2618.2715" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="153" x="10002.71" y="2621.9063">getNumCompartments() : int</text><ellipse cx="9993.71" cy="2631.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="175" x="10002.71" y="2634.8613">getNumConservedMoieties() : int</text><ellipse cx="9993.71" cy="2644.1816" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="177" x="10002.71" y="2647.8164">getNumDepFloatingSpecies() : int</text><ellipse cx="9993.71" cy="2657.1367" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="10002.71" y="2660.7715">getNumEvents() : int</text><ellipse cx="9993.71" cy="2670.0918" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="156" x="10002.71" y="2673.7266">getNumFloatingSpecies() : int</text><ellipse cx="9993.71" cy="2683.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="167" x="10002.71" y="2686.6816">getNumGlobalParameters() : int</text><ellipse cx="9993.71" cy="2696.002" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="173" x="10002.71" y="2699.6367">getNumIndFloatingSpecies() : int</text><ellipse cx="9993.71" cy="2708.957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="10002.71" y="2712.5918">getNumRateRules() : int</text><ellipse cx="9993.71" cy="2721.9121" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="10002.71" y="2725.5469">getNumReactions() : int</text><ellipse cx="9993.71" cy="2734.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="141" x="10002.71" y="2738.502">getPendingEventSize() : int</text><ellipse cx="9993.71" cy="2747.8223" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="340" x="10002.71" y="2751.457">getRateRueRates(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2760.7773" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="223" x="10002.71" y="2764.4121">getReactionIndex(const std::string &amp;) : int</text><ellipse cx="9993.71" cy="2773.7324" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="343" x="10002.71" y="2777.3672">getReactionRates(size_t len, int const* indx, double* values) : int</text><ellipse cx="9993.71" cy="2786.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="215" x="10002.71" y="2790.3223">getStateVector(double* stateVector) : int</text><ellipse cx="9993.71" cy="2799.6426" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="333" x="10002.71" y="2803.2773">getStoichiometryMatrix(int* rows, int* cols, double** data) : int</text><ellipse cx="9993.71" cy="2812.5977" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="10002.71" y="2816.2324">getSupportedIdTypes() : int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2822.5527"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="550" x="10002.71" y="2829.1875">getValues(double (* ) ( LLVMModelData*, size_t ) funcPtr, size_t len, const int* indx, double* values) : int</text><ellipse cx="9993.71" cy="2838.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="440" x="10002.71" y="2842.1426">setBoundarySpeciesAmounts(size_t len, int const* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2851.4629" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="474" x="10002.71" y="2855.0977">setBoundarySpeciesConcentrations(size_t len, int const* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2864.418" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="437" x="10002.71" y="2868.0527">setCompartmentInitVolumes(size_t len, const int* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2877.373" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="420" x="10002.71" y="2881.0078">setCompartmentVolumes(size_t len, int const* indx, const double* values) : int</text><ellipse cx="9993.71" cy="2890.3281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="428" x="10002.71" y="2893.9629">setConservedMoietyValues(size_t len, int const* indx, const double* values) : int</text><ellipse cx="9993.71" cy="2903.2832" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="432" x="10002.71" y="2906.918">setFloatingSpeciesAmounts(size_t len, int const* indx, const double* values) : int</text><ellipse cx="9993.71" cy="2916.2383" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="466" x="10002.71" y="2919.873">setFloatingSpeciesConcentrations(size_t len, int const* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2929.1934" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="449" x="10002.71" y="2932.8281">setFloatingSpeciesInitAmounts(size_t len, const int* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2942.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="483" x="10002.71" y="2945.7832">setFloatingSpeciesInitConcentrations(size_t len, const int* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2955.1035" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="440" x="10002.71" y="2958.7383">setGlobalParameterInitValues(size_t len, const int* indx, double const* values) : int</text><ellipse cx="9993.71" cy="2968.0586" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="423" x="10002.71" y="2971.6934">setGlobalParameterValues(size_t len, int const* indx, const double* values) : int</text><ellipse cx="9993.71" cy="2981.0137" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="247" x="10002.71" y="2984.6484">setStateVector(const double* stateVector) : int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="2990.9688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="690" x="10002.71" y="2997.6035">setValues(bool (* ) ( LLVMModelData*, int, double ) funcPtr, GetNameFuncPtr, size_t len, const int* indx, const double* values) : int</text><ellipse cx="9993.71" cy="3006.9238" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="141" x="10002.71" y="3010.5586">getRandomSeed() : int64_t</text><ellipse cx="9993.71" cy="3019.8789" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="273" x="10002.71" y="3023.5137">getEventListener(size_t index) : rr::EventListenerPtr</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="3029.834"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="306" x="10002.71" y="3036.4688">getSelection(const std::string&amp; sel) : rr::SelectionRecord&amp;</text><ellipse cx="9993.71" cy="3045.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="10002.71" y="3049.4238">getEventBufferSize(size_t event) : size_t</text><ellipse cx="9993.71" cy="3058.7441" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="254" x="10002.71" y="3062.3789">getBoundarySpeciesId(size_t index) : std::string</text><ellipse cx="9993.71" cy="3071.6992" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="204" x="10002.71" y="3075.334">getCompartmentId(size_t) : std::string</text><ellipse cx="9993.71" cy="3084.6543" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="256" x="10002.71" y="3088.2891">getConservedMoietyId(size_t index) : std::string</text><ellipse cx="9993.71" cy="3097.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="192" x="10002.71" y="3101.2441">getEventId(size_t index) : std::string</text><ellipse cx="9993.71" cy="3110.5645" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="247" x="10002.71" y="3114.1992">getExecutableModelDesc() : std::string {query}</text><ellipse cx="9993.71" cy="3123.5195" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="10002.71" y="3127.1543">getFloatingSpeciesId(size_t index) : std::string</text><ellipse cx="9993.71" cy="3136.4746" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="218" x="10002.71" y="3140.1094">getGlobalParameterId(size_t) : std::string</text><ellipse cx="9993.71" cy="3149.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="110" x="10002.71" y="3153.0645">getInfo() : std::string</text><ellipse cx="9993.71" cy="3162.3848" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="10002.71" y="3166.0195">getModelName() : std::string</text><ellipse cx="9993.71" cy="3175.3398" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="176" x="10002.71" y="3178.9746">getReactionId(size_t) : std::string</text><ellipse cx="9993.71" cy="3188.2949" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="224" x="10002.71" y="3191.9297">getStateVectorId(size_t index) : std::string</text><ellipse cx="9993.71" cy="3201.25" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="297" x="10002.71" y="3204.8848">getRateRuleSymbols() : std::vector&lt;std::string&gt; {query}</text><ellipse cx="9993.71" cy="3214.2051" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="149" x="10002.71" y="3217.8398">getFlags() : uint32_t {query}</text><ellipse cx="9993.71" cy="3227.1602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="251" x="10002.71" y="3230.7949">assignEvent(size_t eventId, double* data) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9990.71" y="3237.1152"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="265" x="10002.71" y="3243.75">copyCachedModel(a_type* src, b_type* dst) : void</text><ellipse cx="9993.71" cy="3253.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="223" x="10002.71" y="3256.7051">evalInitialConditions(uint32_t flags) : void</text><ellipse cx="9993.71" cy="3266.0254" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="257" x="10002.71" y="3269.6602">getEventData(size_t eventId, double* data) : void</text><ellipse cx="9993.71" cy="3278.9805" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="243" x="10002.71" y="3282.6152">getEventIds(std::list&lt;std::string&gt;&amp; out) : void</text><ellipse cx="9993.71" cy="3291.9355" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="346" x="10002.71" y="3295.5703">getEventRoots(double time, const double* y, double* gdot) : void</text><ellipse cx="9993.71" cy="3304.8906" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="264" x="10002.71" y="3308.5254">getIds(int types, std::list&lt;std::string&gt;&amp; ids) : void</text><ellipse cx="9993.71" cy="3317.8457" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="262" x="10002.71" y="3321.4805">getRateRuleValues(double* rateRuleValues) : void</text><ellipse cx="9993.71" cy="3330.8008" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="369" x="10002.71" y="3334.4355">getStateVectorRate(double time, const double* y, double* dydt) : void</text><ellipse cx="9993.71" cy="3343.7559" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="10002.71" y="3347.3906">print(std::ostream&amp; stream) : void</text><ellipse cx="9993.71" cy="3356.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="67" x="10002.71" y="3360.3457">reset() : void</text><ellipse cx="9993.71" cy="3369.666" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="10002.71" y="3373.3008">reset(int options) : void</text><ellipse cx="9993.71" cy="3382.6211" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="102" x="10002.71" y="3386.2559">resetEvents() : void</text><ellipse cx="9993.71" cy="3395.5762" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="186" x="10002.71" y="3399.2109">saveState(std::ostream&amp; out) : void</text><ellipse cx="9993.71" cy="3408.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="375" x="10002.71" y="3412.166">setEventListener(size_t index, rr::EventListenerPtr eventHandler) : void</text><ellipse cx="9993.71" cy="3421.4863" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="147" x="10002.71" y="3425.1211">setFlags(uint32_t val) : void</text><ellipse cx="9993.71" cy="3434.4414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="163" x="10002.71" y="3438.0762">setRandomSeed(int64_t) : void</text><ellipse cx="9993.71" cy="3447.3965" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="10002.71" y="3451.0313">setTime(double _time) : void</text><ellipse cx="9993.71" cy="3460.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="10002.71" y="3463.9863">setValue(const std::string&amp; id, double value) : void</text><ellipse cx="9993.71" cy="3473.3066" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="123" x="10002.71" y="3476.9414">testConstraints() : void</text><!--MD5=[d5b7f86a90698a3124e54b85f9137187]
class rrllvm.RR_DECLSPECLLVMModelGenerator--><rect codeLine="906" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="73.9102" id="rrllvm.RR_DECLSPECLLVMModelGenerator" style="stroke:#A80036;stroke-width:1.5;" width="685" x="10732.21" y="557"/><ellipse cx="10968.96" cy="573" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10971.4331,579.1431 Q10970.8521,579.4419 10970.2129,579.5913 Q10969.5738,579.7407 10968.8682,579.7407 Q10966.3614,579.7407 10965.0415,578.0889 Q10963.7217,576.437 10963.7217,573.3159 Q10963.7217,570.1865 10965.0415,568.5347 Q10966.3614,566.8828 10968.8682,566.8828 Q10969.5738,566.8828 10970.2212,567.0322 Q10970.8687,567.1816 10971.4331,567.4805 L10971.4331,570.2031 Q10970.8023,569.6221 10970.2088,569.3523 Q10969.6153,569.0825 10968.9844,569.0825 Q10967.6397,569.0825 10966.9549,570.1492 Q10966.2701,571.2158 10966.2701,573.3159 Q10966.2701,575.4077 10966.9549,576.4744 Q10967.6397,577.541 10968.9844,577.541 Q10969.6153,577.541 10970.2088,577.2712 Q10970.8023,577.0015 10971.4331,576.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="203" x="10989.46" y="577.5352">RR_DECLSPECLLVMModelGenerator</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10733.21" x2="11416.21" y1="589" y2="589"/><line style="stroke:#A80036;stroke-width:1.5;" x1="10733.21" x2="11416.21" y1="597" y2="597"/><ellipse cx="10743.21" cy="608" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="436" x="10752.21" y="611.6348">createModel(const std::string&amp; sbml, std::uint32_t options) : rr::ExecutableModel*</text><ellipse cx="10743.21" cy="620.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="659" x="10752.21" y="624.5898">regenerateModel(rr::ExecutableModel* oldModel, libsbml::SBMLDocument* doc, unsigned int options) : rr::ExecutableModel*</text><!--MD5=[7982000339435dbc2369b62845a341d4]
class rrllvm.Random--><rect codeLine="911" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="294.1465" id="rrllvm.Random" style="stroke:#A80036;stroke-width:1.5;" width="422" x="2916.71" y="4467"/><ellipse cx="3099.46" cy="4483" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3101.9331,4489.1431 Q3101.3521,4489.4419 3100.7129,4489.5913 Q3100.0738,4489.7407 3099.3682,4489.7407 Q3096.8614,4489.7407 3095.5415,4488.0889 Q3094.2217,4486.437 3094.2217,4483.3159 Q3094.2217,4480.1865 3095.5415,4478.5347 Q3096.8614,4476.8828 3099.3682,4476.8828 Q3100.0738,4476.8828 3100.7212,4477.0322 Q3101.3687,4477.1816 3101.9331,4477.4805 L3101.9331,4480.2031 Q3101.3023,4479.6221 3100.7088,4479.3523 Q3100.1153,4479.0825 3099.4844,4479.0825 Q3098.1397,4479.0825 3097.4549,4480.1492 Q3096.7701,4481.2158 3096.7701,4483.3159 Q3096.7701,4485.4077 3097.4549,4486.4744 Q3098.1397,4487.541 3099.4844,4487.541 Q3100.1153,4487.541 3100.7088,4487.2712 Q3101.3023,4487.0015 3101.9331,4486.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="48" x="3119.96" y="4487.5352">Random</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2917.71" x2="3337.71" y1="4499" y2="4499"/><ellipse cx="2927.71" cy="4510" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="153" x="2936.71" y="4513.6348">engine : cxx11_ns::mt19937</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2924.71" y="4519.9551"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="327" x="2936.71" y="4526.5898">normalized_uniform_dist : cxx11_ns::uniform_real&lt;double&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2924.71" y="4532.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="396" x="2936.71" y="4539.5449">normalized_uniform_dist : cxx11_ns::uniform_real_distribution&lt;double&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2924.71" y="4545.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="2936.71" y="4552.5">mMaxTries : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2924.71" y="4558.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="2936.71" y="4565.4551">randomSeed : int64_t</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2917.71" x2="3337.71" y1="4571.7754" y2="4571.7754"/><ellipse cx="2927.71" cy="4582.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="239" x="2936.71" y="4586.4102">Random(class ModelGeneratorContext&amp; ctx)</text><ellipse cx="2927.71" cy="4595.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="169" x="2936.71" y="4599.3652">Random(const Random&amp; other)</text><ellipse cx="2927.71" cy="4608.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="52" x="2936.71" y="4612.3203">Random()</text><ellipse cx="2927.71" cy="4621.6406" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="59" x="2936.71" y="4625.2754">~Random()</text><ellipse cx="2927.71" cy="4634.5957" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="231" x="2936.71" y="4638.2305">operator=(const Random&amp; rhs) : Random&amp;</text><ellipse cx="2927.71" cy="4647.5508" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="202" x="2936.71" y="4651.1855">max() : constexpr unsigned long long</text><ellipse cx="2927.71" cy="4660.5059" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="199" x="2936.71" y="4664.1406">min() : constexpr unsigned long long</text><ellipse cx="2927.71" cy="4673.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="2936.71" y="4677.0957">max() : double</text><ellipse cx="2927.71" cy="4686.416" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="74" x="2936.71" y="4690.0508">min() : double</text><ellipse cx="2927.71" cy="4699.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="109" x="2936.71" y="4703.0059">operator()() : double</text><ellipse cx="2927.71" cy="4712.3262" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="139" x="2936.71" y="4715.9609">getMaxTries() : int {query}</text><ellipse cx="2927.71" cy="4725.2813" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="141" x="2936.71" y="4728.916">getRandomSeed() : int64_t</text><ellipse cx="2927.71" cy="4738.2363" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="172" x="2936.71" y="4741.8711">setMaxTries(int maxTries) : void</text><ellipse cx="2927.71" cy="4751.1914" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="163" x="2936.71" y="4754.8262">setRandomSeed(int64_t) : void</text><!--MD5=[633c8967a815426de832cb51ed60d836]
class rrllvm.SBMLInitialValueSymbolResolver--><rect codeLine="933" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.SBMLInitialValueSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="563" x="1958.21" y="3802"/><ellipse cx="2144.96" cy="3818" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2147.4331,3824.1431 Q2146.8521,3824.4419 2146.2129,3824.5913 Q2145.5738,3824.7407 2144.8682,3824.7407 Q2142.3614,3824.7407 2141.0415,3823.0889 Q2139.7217,3821.437 2139.7217,3818.3159 Q2139.7217,3815.1865 2141.0415,3813.5347 Q2142.3614,3811.8828 2144.8682,3811.8828 Q2145.5738,3811.8828 2146.2212,3812.0322 Q2146.8687,3812.1816 2147.4331,3812.4805 L2147.4331,3815.2031 Q2146.8023,3814.6221 2146.2088,3814.3523 Q2145.6153,3814.0825 2144.9844,3814.0825 Q2143.6397,3814.0825 2142.9549,3815.1492 Q2142.2701,3816.2158 2142.2701,3818.3159 Q2142.2701,3820.4077 2142.9549,3821.4744 Q2143.6397,3822.541 2144.9844,3822.541 Q2145.6153,3822.541 2146.2088,3822.2712 Q2146.8023,3822.0015 2147.4331,3821.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="181" x="2165.46" y="3822.5352">SBMLInitialValueSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1959.21" x2="2520.21" y1="3834" y2="3834"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1966.21" y="3842"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="1978.21" y="3848.6348">modelData : llvm::Value*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1959.21" x2="2520.21" y1="3854.9551" y2="3854.9551"/><ellipse cx="1969.21" cy="3865.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="496" x="1978.21" y="3869.5898">SBMLInitialValueSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext&amp; ctx)</text><ellipse cx="1969.21" cy="3878.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="185" x="1978.21" y="3882.5449">~SBMLInitialValueSymbolResolver()</text><ellipse cx="1969.21" cy="3891.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="537" x="1978.21" y="3895.5">loadSymbolValue(const std::string&amp; symbol, const llvm::ArrayRef&lt;llvm::Value*&gt;&amp; args) : llvm::Value*</text><!--MD5=[b95990ea9d897c35878135b4f9730f70]
class rrllvm.SetBoundarySpeciesAmountCodeGen--><rect codeLine="940" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.SetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="429" x="3374.21" y="4557.5"/><ellipse cx="3478.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3481.4331,4579.6431 Q3480.8521,4579.9419 3480.2129,4580.0913 Q3479.5738,4580.2407 3478.8682,4580.2407 Q3476.3614,4580.2407 3475.0415,4578.5889 Q3473.7217,4576.937 3473.7217,4573.8159 Q3473.7217,4570.6865 3475.0415,4569.0347 Q3476.3614,4567.3828 3478.8682,4567.3828 Q3479.5738,4567.3828 3480.2212,4567.5322 Q3480.8687,4567.6816 3481.4331,4567.9805 L3481.4331,4570.7031 Q3480.8023,4570.1221 3480.2088,4569.8523 Q3479.6153,4569.5825 3478.9844,4569.5825 Q3477.6397,4569.5825 3476.9549,4570.6492 Q3476.2701,4571.7158 3476.2701,4573.8159 Q3476.2701,4575.9077 3476.9549,4576.9744 Q3477.6397,4578.041 3478.9844,4578.041 Q3479.6153,4578.041 3480.2088,4577.7712 Q3480.8023,4577.5015 3481.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="211" x="3499.46" y="4578.0352">SetBoundarySpeciesAmountCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3375.21" x2="3802.21" y1="4589.5" y2="4589.5"/><ellipse cx="3385.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="3394.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="3385.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="3394.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3375.21" x2="3802.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="3385.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="403" x="3394.21" y="4638.0449">SetBoundarySpeciesAmountCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="3385.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="214" x="3394.21" y="4651">~SetBoundarySpeciesAmountCodeGen()</text><ellipse cx="3385.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="3394.21" y="4663.9551">getIds() : StringIntVector</text><!--MD5=[449fc952abcd7d4122a55c2e0821924f]
class rrllvm.SetBoundarySpeciesConcentrationCodeGen--><rect codeLine="948" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.SetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="463" x="3838.21" y="4557.5"/><ellipse cx="3942.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3944.9331,4579.6431 Q3944.3521,4579.9419 3943.7129,4580.0913 Q3943.0738,4580.2407 3942.3682,4580.2407 Q3939.8614,4580.2407 3938.5415,4578.5889 Q3937.2217,4576.937 3937.2217,4573.8159 Q3937.2217,4570.6865 3938.5415,4569.0347 Q3939.8614,4567.3828 3942.3682,4567.3828 Q3943.0738,4567.3828 3943.7212,4567.5322 Q3944.3687,4567.6816 3944.9331,4567.9805 L3944.9331,4570.7031 Q3944.3023,4570.1221 3943.7088,4569.8523 Q3943.1153,4569.5825 3942.4844,4569.5825 Q3941.1397,4569.5825 3940.4549,4570.6492 Q3939.7701,4571.7158 3939.7701,4573.8159 Q3939.7701,4575.9077 3940.4549,4576.9744 Q3941.1397,4578.041 3942.4844,4578.041 Q3943.1153,4578.041 3943.7088,4577.7712 Q3944.3023,4577.5015 3944.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="246" x="3962.96" y="4578.0352">SetBoundarySpeciesConcentrationCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3839.21" x2="4300.21" y1="4589.5" y2="4589.5"/><ellipse cx="3849.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="3858.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="3849.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="3858.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3839.21" x2="4300.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="3849.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="437" x="3858.21" y="4638.0449">SetBoundarySpeciesConcentrationCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="3849.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="248" x="3858.21" y="4651">~SetBoundarySpeciesConcentrationCodeGen()</text><ellipse cx="3849.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="3858.21" y="4663.9551">getIds() : StringIntVector</text><!--MD5=[d1f2d84242d2f9661bca8021b72d5342]
class rrllvm.SetCompartmentInitVolumeCodeGen--><rect codeLine="956" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.SetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="426" x="6144.71" y="4551"/><ellipse cx="6248.96" cy="4567" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6251.4331,4573.1431 Q6250.8521,4573.4419 6250.2129,4573.5913 Q6249.5738,4573.7407 6248.8682,4573.7407 Q6246.3614,4573.7407 6245.0415,4572.0889 Q6243.7217,4570.437 6243.7217,4567.3159 Q6243.7217,4564.1865 6245.0415,4562.5347 Q6246.3614,4560.8828 6248.8682,4560.8828 Q6249.5738,4560.8828 6250.2212,4561.0322 Q6250.8687,4561.1816 6251.4331,4561.4805 L6251.4331,4564.2031 Q6250.8023,4563.6221 6250.2088,4563.3523 Q6249.6153,4563.0825 6248.9844,4563.0825 Q6247.6397,4563.0825 6246.9549,4564.1492 Q6246.2701,4565.2158 6246.2701,4567.3159 Q6246.2701,4569.4077 6246.9549,4570.4744 Q6247.6397,4571.541 6248.9844,4571.541 Q6249.6153,4571.541 6250.2088,4571.2712 Q6250.8023,4571.0015 6251.4331,4570.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="209" x="6269.46" y="4571.5352">SetCompartmentInitVolumeCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6145.71" x2="6569.71" y1="4583" y2="4583"/><ellipse cx="6155.71" cy="4594" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="6164.71" y="4597.6348">FunctionName : static const char*</text><ellipse cx="6155.71" cy="4606.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="6164.71" y="4610.5898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6145.71" x2="6569.71" y1="4616.9102" y2="4616.9102"/><ellipse cx="6155.71" cy="4627.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="400" x="6164.71" y="4631.5449">SetCompartmentInitVolumeCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="6155.71" cy="4640.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="211" x="6164.71" y="4644.5">~SetCompartmentInitVolumeCodeGen()</text><ellipse cx="6155.71" cy="4653.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="6164.71" y="4657.4551">getIds() : StringIntVector</text><ellipse cx="6155.71" cy="4666.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="6164.71" y="4670.4102">isInitialValue() : bool</text><!--MD5=[21a0c7999acf51998911f366b4b9dd52]
class rrllvm.SetCompartmentVolumeCodeGen--><rect codeLine="965" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.SetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="409" x="4336.21" y="4557.5"/><ellipse cx="4440.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4442.9331,4579.6431 Q4442.3521,4579.9419 4441.7129,4580.0913 Q4441.0738,4580.2407 4440.3682,4580.2407 Q4437.8614,4580.2407 4436.5415,4578.5889 Q4435.2217,4576.937 4435.2217,4573.8159 Q4435.2217,4570.6865 4436.5415,4569.0347 Q4437.8614,4567.3828 4440.3682,4567.3828 Q4441.0738,4567.3828 4441.7212,4567.5322 Q4442.3687,4567.6816 4442.9331,4567.9805 L4442.9331,4570.7031 Q4442.3023,4570.1221 4441.7088,4569.8523 Q4441.1153,4569.5825 4440.4844,4569.5825 Q4439.1397,4569.5825 4438.4549,4570.6492 Q4437.7701,4571.7158 4437.7701,4573.8159 Q4437.7701,4575.9077 4438.4549,4576.9744 Q4439.1397,4578.041 4440.4844,4578.041 Q4441.1153,4578.041 4441.7088,4577.7712 Q4442.3023,4577.5015 4442.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="192" x="4460.96" y="4578.0352">SetCompartmentVolumeCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4337.21" x2="4744.21" y1="4589.5" y2="4589.5"/><ellipse cx="4347.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="4356.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="4347.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="4356.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4337.21" x2="4744.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="4347.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="383" x="4356.21" y="4638.0449">SetCompartmentVolumeCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="4347.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="4356.21" y="4651">~SetCompartmentVolumeCodeGen()</text><ellipse cx="4347.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="4356.21" y="4663.9551">getIds() : StringIntVector</text><!--MD5=[3aadda6f557ae21d6aa550935ab39703]
class rrllvm.SetFloatingSpeciesAmountCodeGen--><rect codeLine="973" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.SetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="421" x="4780.21" y="4557.5"/><ellipse cx="4885.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4888.4331,4579.6431 Q4887.8521,4579.9419 4887.2129,4580.0913 Q4886.5738,4580.2407 4885.8682,4580.2407 Q4883.3614,4580.2407 4882.0415,4578.5889 Q4880.7217,4576.937 4880.7217,4573.8159 Q4880.7217,4570.6865 4882.0415,4569.0347 Q4883.3614,4567.3828 4885.8682,4567.3828 Q4886.5738,4567.3828 4887.2212,4567.5322 Q4887.8687,4567.6816 4888.4331,4567.9805 L4888.4331,4570.7031 Q4887.8023,4570.1221 4887.2088,4569.8523 Q4886.6153,4569.5825 4885.9844,4569.5825 Q4884.6397,4569.5825 4883.9549,4570.6492 Q4883.2701,4571.7158 4883.2701,4573.8159 Q4883.2701,4575.9077 4883.9549,4576.9744 Q4884.6397,4578.041 4885.9844,4578.041 Q4886.6153,4578.041 4887.2088,4577.7712 Q4887.8023,4577.5015 4888.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="201" x="4906.46" y="4578.0352">SetFloatingSpeciesAmountCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4781.21" x2="5200.21" y1="4589.5" y2="4589.5"/><ellipse cx="4791.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="4800.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="4791.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="4800.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4781.21" x2="5200.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="4791.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="395" x="4800.21" y="4638.0449">SetFloatingSpeciesAmountCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="4791.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="206" x="4800.21" y="4651">~SetFloatingSpeciesAmountCodeGen()</text><ellipse cx="4791.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="4800.21" y="4663.9551">getIds() : StringIntVector</text><!--MD5=[4db34c0a7e26d77c3b3b35488e769d46]
class rrllvm.SetFloatingSpeciesConcentrationCodeGen--><rect codeLine="981" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.SetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="455" x="5236.21" y="4557.5"/><ellipse cx="5341.46" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5343.9331,4579.6431 Q5343.3521,4579.9419 5342.7129,4580.0913 Q5342.0738,4580.2407 5341.3682,4580.2407 Q5338.8614,4580.2407 5337.5415,4578.5889 Q5336.2217,4576.937 5336.2217,4573.8159 Q5336.2217,4570.6865 5337.5415,4569.0347 Q5338.8614,4567.3828 5341.3682,4567.3828 Q5342.0738,4567.3828 5342.7212,4567.5322 Q5343.3687,4567.6816 5343.9331,4567.9805 L5343.9331,4570.7031 Q5343.3023,4570.1221 5342.7088,4569.8523 Q5342.1153,4569.5825 5341.4844,4569.5825 Q5340.1397,4569.5825 5339.4549,4570.6492 Q5338.7701,4571.7158 5338.7701,4573.8159 Q5338.7701,4575.9077 5339.4549,4576.9744 Q5340.1397,4578.041 5341.4844,4578.041 Q5342.1153,4578.041 5342.7088,4577.7712 Q5343.3023,4577.5015 5343.9331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="236" x="5361.96" y="4578.0352">SetFloatingSpeciesConcentrationCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5237.21" x2="5690.21" y1="4589.5" y2="4589.5"/><ellipse cx="5247.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="5256.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="5247.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="5256.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5237.21" x2="5690.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="5247.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="429" x="5256.21" y="4638.0449">SetFloatingSpeciesConcentrationCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="5247.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="240" x="5256.21" y="4651">~SetFloatingSpeciesConcentrationCodeGen()</text><ellipse cx="5247.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="5256.21" y="4663.9551">getIds() : StringIntVector</text><!--MD5=[d1811601a9a8b8b5a2b9b5b53f669cc6]
class rrllvm.SetFloatingSpeciesInitAmountCodeGen--><rect codeLine="989" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.SetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="438" x="6605.71" y="4551"/><ellipse cx="6711.46" cy="4567" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M6713.9331,4573.1431 Q6713.3521,4573.4419 6712.7129,4573.5913 Q6712.0738,4573.7407 6711.3682,4573.7407 Q6708.8614,4573.7407 6707.5415,4572.0889 Q6706.2217,4570.437 6706.2217,4567.3159 Q6706.2217,4564.1865 6707.5415,4562.5347 Q6708.8614,4560.8828 6711.3682,4560.8828 Q6712.0738,4560.8828 6712.7212,4561.0322 Q6713.3687,4561.1816 6713.9331,4561.4805 L6713.9331,4564.2031 Q6713.3023,4563.6221 6712.7088,4563.3523 Q6712.1153,4563.0825 6711.4844,4563.0825 Q6710.1397,4563.0825 6709.4549,4564.1492 Q6708.7701,4565.2158 6708.7701,4567.3159 Q6708.7701,4569.4077 6709.4549,4570.4744 Q6710.1397,4571.541 6711.4844,4571.541 Q6712.1153,4571.541 6712.7088,4571.2712 Q6713.3023,4571.0015 6713.9331,4570.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="218" x="6731.96" y="4571.5352">SetFloatingSpeciesInitAmountCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6606.71" x2="7042.71" y1="4583" y2="4583"/><ellipse cx="6616.71" cy="4594" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="6625.71" y="4597.6348">FunctionName : static const char*</text><ellipse cx="6616.71" cy="4606.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="6625.71" y="4610.5898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="6606.71" x2="7042.71" y1="4616.9102" y2="4616.9102"/><ellipse cx="6616.71" cy="4627.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="412" x="6625.71" y="4631.5449">SetFloatingSpeciesInitAmountCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="6616.71" cy="4640.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="223" x="6625.71" y="4644.5">~SetFloatingSpeciesInitAmountCodeGen()</text><ellipse cx="6616.71" cy="4653.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="6625.71" y="4657.4551">getIds() : StringIntVector</text><ellipse cx="6616.71" cy="4666.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="6625.71" y="4670.4102">isInitialValue() : bool</text><!--MD5=[00a91e22d09e71fbbbb118eb27c814c8]
class rrllvm.SetFloatingSpeciesInitConcentrationCodeGen--><rect codeLine="998" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.SetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="472" x="7078.71" y="4551"/><ellipse cx="7183.96" cy="4567" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M7186.4331,4573.1431 Q7185.8521,4573.4419 7185.2129,4573.5913 Q7184.5738,4573.7407 7183.8682,4573.7407 Q7181.3614,4573.7407 7180.0415,4572.0889 Q7178.7217,4570.437 7178.7217,4567.3159 Q7178.7217,4564.1865 7180.0415,4562.5347 Q7181.3614,4560.8828 7183.8682,4560.8828 Q7184.5738,4560.8828 7185.2212,4561.0322 Q7185.8687,4561.1816 7186.4331,4561.4805 L7186.4331,4564.2031 Q7185.8023,4563.6221 7185.2088,4563.3523 Q7184.6153,4563.0825 7183.9844,4563.0825 Q7182.6397,4563.0825 7181.9549,4564.1492 Q7181.2701,4565.2158 7181.2701,4567.3159 Q7181.2701,4569.4077 7181.9549,4570.4744 Q7182.6397,4571.541 7183.9844,4571.541 Q7184.6153,4571.541 7185.2088,4571.2712 Q7185.8023,4571.0015 7186.4331,4570.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="253" x="7204.46" y="4571.5352">SetFloatingSpeciesInitConcentrationCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="7079.71" x2="7549.71" y1="4583" y2="4583"/><ellipse cx="7089.71" cy="4594" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="7098.71" y="4597.6348">FunctionName : static const char*</text><ellipse cx="7089.71" cy="4606.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="7098.71" y="4610.5898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="7079.71" x2="7549.71" y1="4616.9102" y2="4616.9102"/><ellipse cx="7089.71" cy="4627.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="446" x="7098.71" y="4631.5449">SetFloatingSpeciesInitConcentrationCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="7089.71" cy="4640.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="257" x="7098.71" y="4644.5">~SetFloatingSpeciesInitConcentrationCodeGen()</text><ellipse cx="7089.71" cy="4653.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="7098.71" y="4657.4551">getIds() : StringIntVector</text><ellipse cx="7089.71" cy="4666.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="7098.71" y="4670.4102">isInitialValue() : bool</text><!--MD5=[06fc21a34018f58abcefe8dca9d5ac0e]
class rrllvm.SetGlobalParameterCodeGen--><rect codeLine="1007" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="112.7754" id="rrllvm.SetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="383" x="5726.21" y="4557.5"/><ellipse cx="5829.96" cy="4573.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M5832.4331,4579.6431 Q5831.8521,4579.9419 5831.2129,4580.0913 Q5830.5738,4580.2407 5829.8682,4580.2407 Q5827.3614,4580.2407 5826.0415,4578.5889 Q5824.7217,4576.937 5824.7217,4573.8159 Q5824.7217,4570.6865 5826.0415,4569.0347 Q5827.3614,4567.3828 5829.8682,4567.3828 Q5830.5738,4567.3828 5831.2212,4567.5322 Q5831.8687,4567.6816 5832.4331,4567.9805 L5832.4331,4570.7031 Q5831.8023,4570.1221 5831.2088,4569.8523 Q5830.6153,4569.5825 5829.9844,4569.5825 Q5828.6397,4569.5825 5827.9549,4570.6492 Q5827.2701,4571.7158 5827.2701,4573.8159 Q5827.2701,4575.9077 5827.9549,4576.9744 Q5828.6397,4578.041 5829.9844,4578.041 Q5830.6153,4578.041 5831.2088,4577.7712 Q5831.8023,4577.5015 5832.4331,4576.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="167" x="5850.46" y="4578.0352">SetGlobalParameterCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5727.21" x2="6108.21" y1="4589.5" y2="4589.5"/><ellipse cx="5737.21" cy="4600.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="5746.21" y="4604.1348">FunctionName : static const char*</text><ellipse cx="5737.21" cy="4613.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="5746.21" y="4617.0898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="5727.21" x2="6108.21" y1="4623.4102" y2="4623.4102"/><ellipse cx="5737.21" cy="4634.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="357" x="5746.21" y="4638.0449">SetGlobalParameterCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="5737.21" cy="4647.3652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="168" x="5746.21" y="4651">~SetGlobalParameterCodeGen()</text><ellipse cx="5737.21" cy="4660.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="5746.21" y="4663.9551">getIds() : StringIntVector</text><!--MD5=[7cfca3f3040b23ea702a01c43be889e5]
class rrllvm.SetGlobalParameterInitValueCodeGen--><rect codeLine="1015" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="125.7305" id="rrllvm.SetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.5;" width="429" x="7586.21" y="4551"/><ellipse cx="7688.46" cy="4567" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M7690.9331,4573.1431 Q7690.3521,4573.4419 7689.7129,4573.5913 Q7689.0738,4573.7407 7688.3682,4573.7407 Q7685.8614,4573.7407 7684.5415,4572.0889 Q7683.2217,4570.437 7683.2217,4567.3159 Q7683.2217,4564.1865 7684.5415,4562.5347 Q7685.8614,4560.8828 7688.3682,4560.8828 Q7689.0738,4560.8828 7689.7212,4561.0322 Q7690.3687,4561.1816 7690.9331,4561.4805 L7690.9331,4564.2031 Q7690.3023,4563.6221 7689.7088,4563.3523 Q7689.1153,4563.0825 7688.4844,4563.0825 Q7687.1397,4563.0825 7686.4549,4564.1492 Q7685.7701,4565.2158 7685.7701,4567.3159 Q7685.7701,4569.4077 7686.4549,4570.4744 Q7687.1397,4571.541 7688.4844,4571.541 Q7689.1153,4571.541 7689.7088,4571.2712 Q7690.3023,4571.0015 7690.9331,4570.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="216" x="7708.96" y="4571.5352">SetGlobalParameterInitValueCodeGen</text><line style="stroke:#A80036;stroke-width:1.5;" x1="7587.21" x2="8014.21" y1="4583" y2="4583"/><ellipse cx="7597.21" cy="4594" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="180" x="7606.21" y="4597.6348">FunctionName : static const char*</text><ellipse cx="7597.21" cy="4606.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" text-decoration="underline" textLength="183" x="7606.21" y="4610.5898">IndexArgName : static const char*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="7587.21" x2="8014.21" y1="4616.9102" y2="4616.9102"/><ellipse cx="7597.21" cy="4627.9102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="403" x="7606.21" y="4631.5449">SetGlobalParameterInitValueCodeGen(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="7597.21" cy="4640.8652" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="214" x="7606.21" y="4644.5">~SetGlobalParameterInitValueCodeGen()</text><ellipse cx="7597.21" cy="4653.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="7606.21" y="4657.4551">getIds() : StringIntVector</text><ellipse cx="7597.21" cy="4666.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="7606.21" y="4670.4102">isInitialValue() : bool</text><!--MD5=[08ca2a74a489c70bbf6fb72c43457bc4]
class rrllvm.SetInitialValueCodeGenBase--><rect codeLine="1024" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="86.8652" id="rrllvm.SetInitialValueCodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="495" x="7067.21" y="3808.5"/><ellipse cx="7082.21" cy="3824.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M7084.6831,3830.6431 Q7084.1021,3830.9419 7083.4629,3831.0913 Q7082.8238,3831.2407 7082.1182,3831.2407 Q7079.6114,3831.2407 7078.2915,3829.5889 Q7076.9717,3827.937 7076.9717,3824.8159 Q7076.9717,3821.6865 7078.2915,3820.0347 Q7079.6114,3818.3828 7082.1182,3818.3828 Q7082.8238,3818.3828 7083.4712,3818.5322 Q7084.1187,3818.6816 7084.6831,3818.9805 L7084.6831,3821.7031 Q7084.0523,3821.1221 7083.4588,3820.8523 Q7082.8653,3820.5825 7082.2344,3820.5825 Q7080.8897,3820.5825 7080.2049,3821.6492 Q7079.5201,3822.7158 7079.5201,3824.8159 Q7079.5201,3826.9077 7080.2049,3827.9744 Q7080.8897,3829.041 7082.2344,3829.041 Q7082.8653,3829.041 7083.4588,3828.7712 Q7084.0523,3828.5015 7084.6831,3827.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="159" x="7096.21" y="3829.0352">SetInitialValueCodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="302" x="7263.21" y="3805.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="300" x="7264.21" y="3818.1016">template&lt;typename Derived, bool substanceUnits&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="7068.21" x2="7561.21" y1="3840.5" y2="3840.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="7068.21" x2="7561.21" y1="3848.5" y2="3848.5"/><ellipse cx="7078.21" cy="3859.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="351" x="7087.21" y="3863.1348">SetInitialValueCodeGenBase(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="7078.21" cy="3872.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="7087.21" y="3876.0898">~SetInitialValueCodeGenBase()</text><ellipse cx="7078.21" cy="3885.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="7087.21" y="3889.0449">codeGen() : llvm::Value*</text><!--MD5=[0e7b2841ff348a9c18bfad2ab436a5e7]
class rrllvm.SetValueCodeGenBase--><rect codeLine="1030" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="86.8652" id="rrllvm.SetValueCodeGenBase" style="stroke:#A80036;stroke-width:1.5;" width="465" x="4758.21" y="3808.5"/><ellipse cx="4773.21" cy="3824.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M4775.6831,3830.6431 Q4775.1021,3830.9419 4774.4629,3831.0913 Q4773.8238,3831.2407 4773.1182,3831.2407 Q4770.6114,3831.2407 4769.2915,3829.5889 Q4767.9717,3827.937 4767.9717,3824.8159 Q4767.9717,3821.6865 4769.2915,3820.0347 Q4770.6114,3818.3828 4773.1182,3818.3828 Q4773.8238,3818.3828 4774.4712,3818.5322 Q4775.1187,3818.6816 4775.6831,3818.9805 L4775.6831,3821.7031 Q4775.0523,3821.1221 4774.4588,3820.8523 Q4773.8653,3820.5825 4773.2344,3820.5825 Q4771.8897,3820.5825 4771.2049,3821.6492 Q4770.5201,3822.7158 4770.5201,3824.8159 Q4770.5201,3826.9077 4771.2049,3827.9744 Q4771.8897,3829.041 4773.2344,3829.041 Q4773.8653,3829.041 4774.4588,3828.7712 Q4775.0523,3828.5015 4775.6831,3827.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="129" x="4787.21" y="3829.0352">SetValueCodeGenBase</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="302" x="4924.21" y="3805.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="300" x="4925.21" y="3818.1016">template&lt;typename Derived, bool substanceUnits&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="4759.21" x2="5222.21" y1="3840.5" y2="3840.5"/><line style="stroke:#A80036;stroke-width:1.5;" x1="4759.21" x2="5222.21" y1="3848.5" y2="3848.5"/><ellipse cx="4769.21" cy="3859.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="322" x="4778.21" y="3863.1348">SetValueCodeGenBase(const ModelGeneratorContext&amp; mgc)</text><ellipse cx="4769.21" cy="3872.4551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="4778.21" y="3876.0898">~SetValueCodeGenBase()</text><ellipse cx="4769.21" cy="3885.4102" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="4778.21" y="3889.0449">codeGen() : llvm::Value*</text><!--MD5=[56f3d79b15a525e77349913537c88f09]
class rrllvm.StoreSymbolResolver--><rect codeLine="1036" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="73.9102" id="rrllvm.StoreSymbolResolver" style="stroke:#A80036;stroke-width:1.5;" width="438" x="1563.71" y="151"/><ellipse cx="1718.96" cy="167" fill="#A9DCDF" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1718.8233,162.3481 L1717.6695,167.4199 L1719.9854,167.4199 Z M1717.3291,160.1069 L1720.3257,160.1069 L1723.6709,172.5 L1721.2222,172.5 L1720.4585,169.437 L1717.1797,169.437 L1716.4327,172.5 L1713.9839,172.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="119" x="1739.46" y="171.5352">StoreSymbolResolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1564.71" x2="2000.71" y1="183" y2="183"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1564.71" x2="2000.71" y1="191" y2="191"/><polygon fill="#FFFF44" points="1574.71,197,1578.71,201,1574.71,205,1570.71,201" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="1583.71" y="205.6348">~StoreSymbolResolver()</text><ellipse cx="1574.71" cy="214.9551" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacing" textLength="412" x="1583.71" y="218.5898">storeSymbolValue(const std::string&amp; symbol, llvm::Value* value) : llvm::Value*</text><!--MD5=[9868ea8184ba5d49638d99afd351dab4]
class rrllvm.SymbolForest--><rect codeLine="1041" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="151.6406" id="rrllvm.SymbolForest" style="stroke:#A80036;stroke-width:1.5;" width="539" x="10354.21" y="5831"/><ellipse cx="10581.46" cy="5847" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10583.9331,5853.1431 Q10583.3521,5853.4419 10582.7129,5853.5913 Q10582.0738,5853.7407 10581.3682,5853.7407 Q10578.8614,5853.7407 10577.5415,5852.0889 Q10576.2217,5850.437 10576.2217,5847.3159 Q10576.2217,5844.1865 10577.5415,5842.5347 Q10578.8614,5840.8828 10581.3682,5840.8828 Q10582.0738,5840.8828 10582.7212,5841.0322 Q10583.3687,5841.1816 10583.9331,5841.4805 L10583.9331,5844.2031 Q10583.3023,5843.6221 10582.7088,5843.3523 Q10582.1153,5843.0825 10581.4844,5843.0825 Q10580.1397,5843.0825 10579.4549,5844.1492 Q10578.7701,5845.2158 10578.7701,5847.3159 Q10578.7701,5849.4077 10579.4549,5850.4744 Q10580.1397,5851.541 10581.4844,5851.541 Q10582.1153,5851.541 10582.7088,5851.2712 Q10583.3023,5851.0015 10583.9331,5850.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="76" x="10601.96" y="5851.5352">SymbolForest</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10355.21" x2="10892.21" y1="5863" y2="5863"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10362.21" y="5871"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="10374.21" y="5877.6348">_end : ConstIterator</text><ellipse cx="10365.21" cy="5886.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="358" x="10374.21" y="5890.5898">boundarySpecies : std::map&lt;std::string, const libsbml::ASTNode*&gt;</text><ellipse cx="10365.21" cy="5899.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="344" x="10374.21" y="5903.5449">compartments : std::map&lt;std::string, const libsbml::ASTNode*&gt;</text><ellipse cx="10365.21" cy="5912.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="347" x="10374.21" y="5916.5">floatingSpecies : std::map&lt;std::string, const libsbml::ASTNode*&gt;</text><ellipse cx="10365.21" cy="5925.8203" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="359" x="10374.21" y="5929.4551">globalParameters : std::map&lt;std::string, const libsbml::ASTNode*&gt;</text><ellipse cx="10365.21" cy="5938.7754" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="365" x="10374.21" y="5942.4102">speciesReferences : std::map&lt;std::string, const libsbml::ASTNode*&gt;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10355.21" x2="10892.21" y1="5948.7305" y2="5948.7305"/><ellipse cx="10365.21" cy="5959.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="513" x="10374.21" y="5963.3652">find(const std::map&lt;std::string, const libsbml::ASTNode*&gt;::key_type&amp; x) : ConstIterator {query}</text><ellipse cx="10365.21" cy="5972.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="159" x="10374.21" y="5976.3203">end() : ConstIterator&amp; {query}</text><!--MD5=[5b3593c5f2cd7fec93ea76526b59eec9]
class rrllvm.SymbolForest::ConstIterator--><rect codeLine="1052" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="151.6406" id="rrllvm.SymbolForest::ConstIterator" style="stroke:#A80036;stroke-width:1.5;" width="272" x="10487.71" y="6807"/><ellipse cx="10540.46" cy="6823" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10542.9331,6829.1431 Q10542.3521,6829.4419 10541.7129,6829.5913 Q10541.0738,6829.7407 10540.3682,6829.7407 Q10537.8614,6829.7407 10536.5415,6828.0889 Q10535.2217,6826.437 10535.2217,6823.3159 Q10535.2217,6820.1865 10536.5415,6818.5347 Q10537.8614,6816.8828 10540.3682,6816.8828 Q10541.0738,6816.8828 10541.7212,6817.0322 Q10542.3687,6817.1816 10542.9331,6817.4805 L10542.9331,6820.2031 Q10542.3023,6819.6221 10541.7088,6819.3523 Q10541.1153,6819.0825 10540.4844,6819.0825 Q10539.1397,6819.0825 10538.4549,6820.1492 Q10537.7701,6821.2158 10537.7701,6823.3159 Q10537.7701,6825.4077 10538.4549,6826.4744 Q10539.1397,6827.541 10540.4844,6827.541 Q10541.1153,6827.541 10541.7088,6827.2712 Q10542.3023,6827.0015 10542.9331,6826.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="158" x="10560.96" y="6827.5352">SymbolForest::ConstIterator</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10488.71" x2="10758.71" y1="6839" y2="6839"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10495.71" y="6847"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="53" x="10507.71" y="6853.6348">end : bool</text><ellipse cx="10498.71" cy="6862.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="10507.71" y="6866.5898">second : const libsbml::ASTNode*</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10488.71" x2="10758.71" y1="6872.9102" y2="6872.9102"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10495.71" y="6880.9102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="168" x="10507.71" y="6887.5449">ConstIterator(_const_iterator i)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10495.71" y="6893.8652"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="80" x="10507.71" y="6900.5">ConstIterator()</text><ellipse cx="10498.71" cy="6909.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="10507.71" y="6913.4551">ConstIterator(ConstIterator o)</text><ellipse cx="10498.71" cy="6922.7754" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="235" x="10507.71" y="6926.4102">operator=(ConstIterator o) : ConstIterator&amp;</text><ellipse cx="10498.71" cy="6935.7305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="198" x="10507.71" y="6939.3652">operator-&gt;() : ConstIterator* {query}</text><ellipse cx="10498.71" cy="6948.6855" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="10507.71" y="6952.3203">operator!=(ConstIterator other) : bool {query}</text><!--MD5=[608a6a4ffe7cc5b72ceb002a47ff2721]
class rrllvm.EventAtributes--><rect codeLine="1063" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="86.8652" id="rrllvm.EventAtributes" style="stroke:#A80036;stroke-width:1.5;" width="190" x="11452.71" y="550.5"/><ellipse cx="11501.96" cy="566.5" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M11505.5743,573 L11497.8545,573 L11497.8545,560.6069 L11505.5743,560.6069 L11505.5743,562.7651 L11500.3033,562.7651 L11500.3033,565.438 L11505.0762,565.438 L11505.0762,567.5962 L11500.3033,567.5962 L11500.3033,570.8418 L11505.5743,570.8418 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="83" x="11522.46" y="571.0352">EventAtributes</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11453.71" x2="11641.71" y1="582.5" y2="582.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="87" x="11458.71" y="597.1348">EventInitialValue</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="11458.71" y="610.0898">EventPersistent</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="178" x="11458.71" y="623.0449">EventUseValuesFromTriggerTime</text><line style="stroke:#A80036;stroke-width:1.5;" x1="11453.71" x2="11641.71" y1="629.3652" y2="629.3652"/><!--MD5=[0ad6988864a2a2243684d4fb8dfec6fa]
class rrllvm.LLVMModelDataSymbols::SpeciesReferenceType--><rect codeLine="1069" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.LLVMModelDataSymbols::SpeciesReferenceType" style="stroke:#A80036;stroke-width:1.5;" width="309" x="2973.21" y="6833"/><ellipse cx="2988.21" cy="6849" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2991.8243,6855.5 L2984.1045,6855.5 L2984.1045,6843.1069 L2991.8243,6843.1069 L2991.8243,6845.2651 L2986.5533,6845.2651 L2986.5533,6847.938 L2991.3262,6847.938 L2991.3262,6850.0962 L2986.5533,6850.0962 L2986.5533,6853.3418 L2991.8243,6853.3418 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="277" x="3002.21" y="6853.5352">LLVMModelDataSymbols::SpeciesReferenceType</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2974.21" x2="3281.21" y1="6865" y2="6865"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="44" x="2979.21" y="6879.6348">Modifier</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="2979.21" y="6892.5898">MultiReactantProduct</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="42" x="2979.21" y="6905.5449">Product</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="46" x="2979.21" y="6918.5">Reactant</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2974.21" x2="3281.21" y1="6924.8203" y2="6924.8203"/><!--MD5=[6d25fd9c55a53133f991145518d017f3]
class rrllvm.LLVMModelDataSymbols::SymbolIndexType--><rect codeLine="1076" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="138.6855" id="rrllvm.LLVMModelDataSymbols::SymbolIndexType" style="stroke:#A80036;stroke-width:1.5;" width="281" x="2321.21" y="6813.5"/><ellipse cx="2336.21" cy="6829.5" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2339.8243,6836 L2332.1045,6836 L2332.1045,6823.6069 L2339.8243,6823.6069 L2339.8243,6825.7651 L2334.5533,6825.7651 L2334.5533,6828.438 L2339.3262,6828.438 L2339.3262,6830.5962 L2334.5533,6830.5962 L2334.5533,6833.8418 L2339.8243,6833.8418 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="249" x="2350.21" y="6834.0352">LLVMModelDataSymbols::SymbolIndexType</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2322.21" x2="2601.21" y1="6845.5" y2="6845.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="108" x="2327.21" y="6860.1348">BOUNDARY_SPECIES</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="84" x="2327.21" y="6873.0898">COMPARTMENT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="34" x="2327.21" y="6886.0449">EVENT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="102" x="2327.21" y="6899">FLOATING_SPECIES</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="113" x="2327.21" y="6911.9551">GLOBAL_PARAMETER</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="2327.21" y="6924.9102">INVALID_SYMBOL</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="56" x="2327.21" y="6937.8652">REACTION</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2322.21" x2="2601.21" y1="6944.1855" y2="6944.1855"/><!--MD5=[57e06065e5291dbc81116384b7ba085e]
class rrllvm.LLVMModelSymbols::SpeciesReferenceType--><rect codeLine="1086" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="73.9102" id="rrllvm.LLVMModelSymbols::SpeciesReferenceType" style="stroke:#A80036;stroke-width:1.5;" width="282" x="823.71" y="5870"/><ellipse cx="838.71" cy="5886" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M842.3243,5892.5 L834.6045,5892.5 L834.6045,5880.1069 L842.3243,5880.1069 L842.3243,5882.2651 L837.0533,5882.2651 L837.0533,5884.938 L841.8262,5884.938 L841.8262,5887.0962 L837.0533,5887.0962 L837.0533,5890.3418 L842.3243,5890.3418 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="250" x="852.71" y="5890.5352">LLVMModelSymbols::SpeciesReferenceType</text><line style="stroke:#A80036;stroke-width:1.5;" x1="824.71" x2="1104.71" y1="5902" y2="5902"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="42" x="829.71" y="5916.6348">Product</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="46" x="829.71" y="5929.5898">Reactant</text><line style="stroke:#A80036;stroke-width:1.5;" x1="824.71" x2="1104.71" y1="5935.9102" y2="5935.9102"/><!--MD5=[082f61c3ea55d2f8c5a1f29757142911]
class rrllvm.ModelDataFields--><rect codeLine="1091" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="579.1582" id="rrllvm.ModelDataFields" style="stroke:#A80036;stroke-width:1.5;" width="195" x="10444.21" y="853"/><ellipse cx="10489.96" cy="869" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M10493.5743,875.5 L10485.8545,875.5 L10485.8545,863.1069 L10493.5743,863.1069 L10493.5743,865.2651 L10488.3033,865.2651 L10488.3033,867.938 L10493.0762,867.938 L10493.0762,870.0962 L10488.3033,870.0962 L10488.3033,873.3418 L10493.5743,873.3418 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="95" x="10510.46" y="873.5352">ModelDataFields</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10445.21" x2="10638.21" y1="885" y2="885"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="140" x="10450.21" y="899.6348">BoundarySpeciesAmounts</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="166" x="10450.21" y="912.5898">BoundarySpeciesAmountsAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="120" x="10450.21" y="925.5449">CompartmentVolumes</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="146" x="10450.21" y="938.5">CompartmentVolumesAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="28" x="10450.21" y="951.4551">Flags</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="155" x="10450.21" y="964.4102">FloatingSpeciesAmountRates</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="158" x="10450.21" y="977.3652">FloatingSpeciesAmountsAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="94" x="10450.21" y="990.3203">GlobalParameters</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="120" x="10450.21" y="1003.2754">GlobalParametersAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="157" x="10450.21" y="1016.2305">InitBoundarySpeciesAmounts</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="183" x="10450.21" y="1029.1855">InitBoundarySpeciesAmountsAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="137" x="10450.21" y="1042.1406">InitCompartmentVolumes</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="163" x="10450.21" y="1055.0957">InitCompartmentVolumesAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="149" x="10450.21" y="1068.0508">InitFloatingSpeciesAmounts</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="175" x="10450.21" y="1081.0059">InitFloatingSpeciesAmountsAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="111" x="10450.21" y="1093.9609">InitGlobalParameters</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="137" x="10450.21" y="1106.916">InitGlobalParametersAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="179" x="10450.21" y="1119.8711">NotSafe_FloatingSpeciesAmounts</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="10450.21" y="1132.8262">NotSafe_RateRuleValues</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="60" x="10450.21" y="1145.7813">NumEvents</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="10450.21" y="1158.7363">NumIndBoundarySpecies</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="122" x="10450.21" y="1171.6914">NumIndCompartments</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="10450.21" y="1184.6465">NumIndFloatingSpecies</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="10450.21" y="1197.6016">NumIndGlobalParameters</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="133" x="10450.21" y="1210.5566">NumInitBoundarySpecies</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="122" x="10450.21" y="1223.5117">NumInitCompartments</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="125" x="10450.21" y="1236.4668">NumInitFloatingSpecies</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="136" x="10450.21" y="1249.4219">NumInitGlobalParameters</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="10450.21" y="1262.377">NumRateRules</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="10450.21" y="1275.332">NumReactions</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="59" x="10450.21" y="1288.2871">RandomPtr</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="75" x="10450.21" y="1301.2422">RateRuleRates</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="10450.21" y="1314.1973">RateRuleValuesAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="75" x="10450.21" y="1327.1523">ReactionRates</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="101" x="10450.21" y="1340.1074">ReactionRatesAlias</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="21" x="10450.21" y="1353.0625">Size</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="10450.21" y="1366.0176">StateVector</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="84" x="10450.21" y="1378.9727">StateVectorRate</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="10450.21" y="1391.9277">StateVectorSize</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="74" x="10450.21" y="1404.8828">Stoichiometry</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="26" x="10450.21" y="1417.8379">Time</text><line style="stroke:#A80036;stroke-width:1.5;" x1="10445.21" x2="10638.21" y1="1424.1582" y2="1424.1582"/><!--MD5=[56911866fdbd5c6b61121e34f8c95166]
class rrllvm.RR_DECLSPECLLVMExecutableModel::empty--><rect codeLine="1135" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="86.8652" id="rrllvm.RR_DECLSPECLLVMExecutableModel::empty" style="stroke:#A80036;stroke-width:1.5;" width="284" x="9624.71" y="3808.5"/><ellipse cx="9639.71" cy="3824.5" fill="#EB937F" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M9643.3243,3831 L9635.6045,3831 L9635.6045,3818.6069 L9643.3243,3818.6069 L9643.3243,3820.7651 L9638.0533,3820.7651 L9638.0533,3823.438 L9642.8262,3823.438 L9642.8262,3825.5962 L9638.0533,3825.5962 L9638.0533,3828.8418 L9643.3243,3828.8418 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="252" x="9653.71" y="3829.0352">RR_DECLSPECLLVMExecutableModel::empty</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9625.71" x2="9907.71" y1="3840.5" y2="3840.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="158" x="9630.71" y="3855.1348">DIRTY_CONSERVED_MOIETIES</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="106" x="9630.71" y="3868.0898">DIRTY_INIT_SPECIES</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="9630.71" y="3881.0449">DIRTY_REACTION_RATES</text><line style="stroke:#A80036;stroke-width:1.5;" x1="9625.71" x2="9907.71" y1="3887.3652" y2="3887.3652"/><!--MD5=[26f5dd2d62731307ff7da3685823d7b4]
class rrllvm.LLVMModelData--><rect codeLine="1141" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="462.5625" id="rrllvm.LLVMModelData" style="stroke:#A80036;stroke-width:1.5;" width="260" x="3788.71" y="3620.5"/><ellipse cx="3868.46" cy="3636.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M3870.9331,3642.6431 Q3870.3521,3642.9419 3869.7129,3643.0913 Q3869.0738,3643.2407 3868.3682,3643.2407 Q3865.8614,3643.2407 3864.5415,3641.5889 Q3863.2217,3639.937 3863.2217,3636.8159 Q3863.2217,3633.6865 3864.5415,3632.0347 Q3865.8614,3630.3828 3868.3682,3630.3828 Q3869.0738,3630.3828 3869.7212,3630.5322 Q3870.3687,3630.6816 3870.9331,3630.9805 L3870.9331,3633.7031 Q3870.3023,3633.1221 3869.7088,3632.8523 Q3869.1153,3632.5825 3868.4844,3632.5825 Q3867.1397,3632.5825 3866.4549,3633.6492 Q3865.7701,3634.7158 3865.7701,3636.8159 Q3865.7701,3638.9077 3866.4549,3639.9744 Q3867.1397,3641.041 3868.4844,3641.041 Q3869.1153,3641.041 3869.7088,3640.7712 Q3870.3023,3640.5015 3870.9331,3639.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="92" x="3888.96" y="3641.0352">LLVMModelData</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3789.71" x2="4047.71" y1="3652.5" y2="3652.5"/><ellipse cx="3799.71" cy="3663.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="3808.71" y="3667.1348">random : class Random*</text><ellipse cx="3799.71" cy="3676.4551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="69" x="3808.71" y="3680.0898">data : double</text><ellipse cx="3799.71" cy="3689.4102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="69" x="3808.71" y="3693.0449">time : double</text><ellipse cx="3799.71" cy="3702.3652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="218" x="3808.71" y="3706">boundarySpeciesAmountsAlias : double*</text><ellipse cx="3799.71" cy="3715.3203" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="195" x="3808.71" y="3718.9551">compartmentVolumesAlias : double*</text><ellipse cx="3799.71" cy="3728.2754" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="204" x="3808.71" y="3731.9102">floatingSpeciesAmountRates : double*</text><ellipse cx="3799.71" cy="3741.2305" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="207" x="3808.71" y="3744.8652">floatingSpeciesAmountsAlias : double*</text><ellipse cx="3799.71" cy="3754.1855" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="170" x="3808.71" y="3757.8203">globalParametersAlias : double*</text><ellipse cx="3799.71" cy="3767.1406" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="234" x="3808.71" y="3770.7754">initBoundarySpeciesAmountsAlias : double*</text><ellipse cx="3799.71" cy="3780.0957" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="214" x="3808.71" y="3783.7305">initCompartmentVolumesAlias : double*</text><ellipse cx="3799.71" cy="3793.0508" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="226" x="3808.71" y="3796.6855">initFloatingSpeciesAmountsAlias : double*</text><ellipse cx="3799.71" cy="3806.0059" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="188" x="3808.71" y="3809.6406">initGlobalParametersAlias : double*</text><ellipse cx="3799.71" cy="3818.9609" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="124" x="3808.71" y="3822.5957">rateRuleRates : double*</text><ellipse cx="3799.71" cy="3831.916" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="156" x="3808.71" y="3835.5508">rateRuleValuesAlias : double*</text><ellipse cx="3799.71" cy="3844.8711" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="150" x="3808.71" y="3848.5059">reactionRatesAlias : double*</text><ellipse cx="3799.71" cy="3857.8262" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="112" x="3808.71" y="3861.4609">stateVector : double*</text><ellipse cx="3799.71" cy="3870.7813" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="3808.71" y="3874.416">stateVectorRate : double*</text><ellipse cx="3799.71" cy="3883.7363" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="3808.71" y="3887.3711">stoichiometry : rr::csr_matrix*</text><ellipse cx="3799.71" cy="3896.6914" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="85" x="3808.71" y="3900.3262">flags : unsigned</text><ellipse cx="3799.71" cy="3909.6465" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="118" x="3808.71" y="3913.2813">numEvents : unsigned</text><ellipse cx="3799.71" cy="3922.6016" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="191" x="3808.71" y="3926.2363">numIndBoundarySpecies : unsigned</text><ellipse cx="3799.71" cy="3935.5566" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="3808.71" y="3939.1914">numIndCompartments : unsigned</text><ellipse cx="3799.71" cy="3948.5117" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="183" x="3808.71" y="3952.1465">numIndFloatingSpecies : unsigned</text><ellipse cx="3799.71" cy="3961.4668" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="3808.71" y="3965.1016">numIndGlobalParameters : unsigned</text><ellipse cx="3799.71" cy="3974.4219" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="191" x="3808.71" y="3978.0566">numInitBoundarySpecies : unsigned</text><ellipse cx="3799.71" cy="3987.377" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="3808.71" y="3991.0117">numInitCompartments : unsigned</text><ellipse cx="3799.71" cy="4000.332" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="183" x="3808.71" y="4003.9668">numInitFloatingSpecies : unsigned</text><ellipse cx="3799.71" cy="4013.2871" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="3808.71" y="4016.9219">numInitGlobalParameters : unsigned</text><ellipse cx="3799.71" cy="4026.2422" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="3808.71" y="4029.877">numRateRules : unsigned</text><ellipse cx="3799.71" cy="4039.1973" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="3808.71" y="4042.832">numReactions : unsigned</text><ellipse cx="3799.71" cy="4052.1523" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="80" x="3808.71" y="4055.7871">size : unsigned</text><ellipse cx="3799.71" cy="4065.1074" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="141" x="3808.71" y="4068.7422">stateVectorSize : unsigned</text><line style="stroke:#A80036;stroke-width:1.5;" x1="3789.71" x2="4047.71" y1="4075.0625" y2="4075.0625"/><!--MD5=[5c909fa56a5c66ca658405ba7fa26b95]
class rrllvm.LLVMModelDataSymbols::SpeciesReferenceInfo--><rect codeLine="1176" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="99.8203" id="rrllvm.LLVMModelDataSymbols::SpeciesReferenceInfo" style="stroke:#A80036;stroke-width:1.5;" width="301" x="2637.21" y="6833"/><ellipse cx="2652.21" cy="6849" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M2654.6831,6855.1431 Q2654.1021,6855.4419 2653.4629,6855.5913 Q2652.8238,6855.7407 2652.1182,6855.7407 Q2649.6114,6855.7407 2648.2915,6854.0889 Q2646.9717,6852.437 2646.9717,6849.3159 Q2646.9717,6846.1865 2648.2915,6844.5347 Q2649.6114,6842.8828 2652.1182,6842.8828 Q2652.8238,6842.8828 2653.4712,6843.0322 Q2654.1187,6843.1816 2654.6831,6843.4805 L2654.6831,6846.2031 Q2654.0523,6845.6221 2653.4588,6845.3523 Q2652.8653,6845.0825 2652.2344,6845.0825 Q2650.8897,6845.0825 2650.2049,6846.1492 Q2649.5201,6847.2158 2649.5201,6849.3159 Q2649.5201,6851.4077 2650.2049,6852.4744 Q2650.8897,6853.541 2652.2344,6853.541 Q2652.8653,6853.541 2653.4588,6853.2712 Q2654.0523,6853.0015 2654.6831,6852.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="269" x="2666.21" y="6853.5352">LLVMModelDataSymbols::SpeciesReferenceInfo</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2638.21" x2="2937.21" y1="6865" y2="6865"/><ellipse cx="2648.21" cy="6876" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="151" x="2657.21" y="6879.6348">type : SpeciesReferenceType</text><ellipse cx="2648.21" cy="6888.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="74" x="2657.21" y="6892.5898">id : std::string</text><ellipse cx="2648.21" cy="6901.9102" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="116" x="2657.21" y="6905.5449">column : unsigned int</text><ellipse cx="2648.21" cy="6914.8652" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="96" x="2657.21" y="6918.5">row : unsigned int</text><line style="stroke:#A80036;stroke-width:1.5;" x1="2638.21" x2="2937.21" y1="6924.8203" y2="6924.8203"/><!--MD5=[30870db982b0756ee8260a0845d06ba0]
class rrllvm.LLVMModelSymbols::ReactionSymbols--><rect codeLine="1183" fill="#FEFECE" filter="url(#f1uvyvoyjf98rw)" height="73.9102" id="rrllvm.LLVMModelSymbols::ReactionSymbols" style="stroke:#A80036;stroke-width:1.5;" width="248" x="1140.71" y="5870"/><ellipse cx="1155.71" cy="5886" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M1158.1831,5892.1431 Q1157.6021,5892.4419 1156.9629,5892.5913 Q1156.3238,5892.7407 1155.6182,5892.7407 Q1153.1114,5892.7407 1151.7915,5891.0889 Q1150.4717,5889.437 1150.4717,5886.3159 Q1150.4717,5883.1865 1151.7915,5881.5347 Q1153.1114,5879.8828 1155.6182,5879.8828 Q1156.3238,5879.8828 1156.9712,5880.0322 Q1157.6187,5880.1816 1158.1831,5880.4805 L1158.1831,5883.2031 Q1157.5523,5882.6221 1156.9588,5882.3523 Q1156.3653,5882.0825 1155.7344,5882.0825 Q1154.3897,5882.0825 1153.7049,5883.1492 Q1153.0201,5884.2158 1153.0201,5886.3159 Q1153.0201,5888.4077 1153.7049,5889.4744 Q1154.3897,5890.541 1155.7344,5890.541 Q1156.3653,5890.541 1156.9588,5890.2712 Q1157.5523,5890.0015 1158.1831,5889.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="216" x="1169.71" y="5890.5352">LLVMModelSymbols::ReactionSymbols</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1141.71" x2="1387.71" y1="5902" y2="5902"/><ellipse cx="1151.71" cy="5913" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="1160.71" y="5916.6348">products : IntASTNodeListMap</text><ellipse cx="1151.71" cy="5925.9551" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="163" x="1160.71" y="5929.5898">reactants : IntASTNodeListMap</text><line style="stroke:#A80036;stroke-width:1.5;" x1="1141.71" x2="1387.71" y1="5935.9102" y2="5935.9102"/><!--MD5=[7b7676c8beebd2c950c18d9d374de47e]
reverse link rrllvm.CodeGenBase to rrllvm.EvalConversionFactorCodeGen--><path codeLine="1195" d="M8975,2647.39 C8812.57,3086.99 8362.85,4304.09 8266.88,4563.83 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.EvalConversionFactorCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="8968.55,2644.64,8982.05,2628.3,8981.68,2649.49,8968.55,2644.64" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5060e59bde4681968c43d998b90b8d3c]
reverse link rrllvm.CodeGenBase to rrllvm.EvalInitialConditionsCodeGen--><path codeLine="1198" d="M9023.4,2648.3 C8996.42,3066.76 8924.29,4185.3 8902.82,4518.24 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.EvalInitialConditionsCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9016.42,2647.81,9024.69,2628.3,9030.39,2648.71,9016.42,2647.81" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c7080ae9d673eada7c01062a120292f5]
reverse link rrllvm.CodeGenBase to rrllvm.EvalRateRuleRatesCodeGen--><path codeLine="1201" d="M9041.28,2648.5 C9059.44,2951.17 9118.23,3625.25 9297.71,4161 C9307.31,4189.66 9315.59,4194.28 9329.71,4221 C9394.72,4344.09 9470.43,4489.38 9509.11,4563.74 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.EvalRateRuleRatesCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9034.28,2648.6,9040.09,2628.23,9048.25,2647.78,9034.28,2648.6" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b86575e959458c9071f3c9709976d172]
reverse link rrllvm.CodeGenBase to rrllvm.EvalReactionRatesCodeGen--><path codeLine="1204" d="M9062.97,2647.9 C9137.26,3045.12 9335.12,4054.77 9445.71,4161 C9541.88,4253.38 9633.15,4140.81 9739.71,4221 C9855.38,4308.05 9911.85,4479.44 9933.59,4563.77 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.EvalReactionRatesCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9056.05,2648.98,9059.26,2628.03,9069.81,2646.41,9056.05,2648.98" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d494c004a61fc9fe5e28d1cd9a3eaf0f]
reverse link rrllvm.CodeGenBase to rrllvm.EvalVolatileStoichCodeGen--><path codeLine="1207" d="M9083.23,2647.55 C9210.96,3055.67 9545.92,4111.52 9607.71,4161 C9796.89,4312.49 9942.58,4095.16 10149.71,4221 C10275.98,4297.72 10354.44,4461.13 10389.73,4550.84 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.EvalVolatileStoichCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9076.5,2649.5,9077.21,2628.32,9089.86,2645.32,9076.5,2649.5" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3e7e15e76bd4a809880deec922ddacba]
reverse link rrllvm.CodeGenBase to rrllvm.EventCodeGenBase--><path codeLine="1210" d="M9126.96,2645.58 C9273.09,2875.38 9579.68,3296.16 9965.71,3483 C10252.75,3621.93 10395.62,3400.1 10680.71,3543 C10796.17,3600.87 10884.68,3730.57 10926.74,3801.81 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.EventCodeGenBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9120.84,2649,9116.08,2628.35,9132.68,2641.52,9120.84,2649" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0fb2d1c032562915c1314240334024b5]
reverse link rrllvm.CodeGenBase to rrllvm.GetEventValueCodeGenBase--><path codeLine="1213" d="M9124.14,2645.34 C9268.11,2877.7 9573.67,3305.06 9965.71,3483 C10142.57,3563.27 11526.32,3488.4 11712.71,3543 C11890.18,3594.99 12069.64,3721.7 12163.99,3795.38 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.GetEventValueCodeGenBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9118.15,2648.97,9113.63,2628.27,9130.08,2641.63,9118.15,2648.97" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0fb749489cc79daa718860d0cc6f0042]
reverse link rrllvm.CodeGenBase to rrllvm.GetInitialValueCodeGenBase--><path codeLine="1216" d="M9123.1,2645.43 C9266.23,2878.92 9571.3,3308.94 9965.71,3483 C10079.34,3533.15 14312.92,3532.88 14436.71,3543 C15106.93,3597.79 15891.2,3737.63 16262.62,3808.48 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.GetInitialValueCodeGenBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9117.08,2649,9112.66,2628.28,9129.04,2641.72,9117.08,2649" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7aaae4463c6a5b04b964ea18accfea38]
reverse link rrllvm.CodeGenBase to rrllvm.GetValueCodeGenBase--><path codeLine="1219" d="M9123.58,2645.46 C9267.09,2878.47 9572.36,3307.28 9965.71,3483 C10101.33,3543.59 12491.06,3526.76 12638.71,3543 C13148.27,3599.04 13739.83,3737.97 14020.59,3808.48 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.GetValueCodeGenBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="9117.58,2649.05,9113.12,2628.34,9129.52,2641.75,9117.58,2649.05" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[32a27680790b24ef0021e87392dc5a33]
reverse link rrllvm.CodeGenBase to rrllvm.SetInitialValueCodeGenBase--><path codeLine="1222" d="M8841.54,2640.81 C8453.06,2948.73 7592.21,3631.05 7368.62,3808.27 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.SetInitialValueCodeGenBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="8837.4,2635.16,8857.42,2628.23,8846.1,2646.13,8837.4,2635.16" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0366833e41321ada8f8856bcb620bc6b]
reverse link rrllvm.CodeGenBase to rrllvm.SetValueCodeGenBase--><path codeLine="1225" d="M8579.37,2555.25 C7860.67,2674.41 6432.57,2967.11 5354.71,3543 C5220.55,3614.68 5091.45,3742.14 5029.26,3808.38 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.SetValueCodeGenBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="8578.24,2548.34,8599.11,2551.99,8580.52,2562.15,8578.24,2548.34" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a44b92369f4e6f31188661613f9cac14]
reverse link rrllvm.EventCodeGenBase to rrllvm.EventAssignCodeGen--><path codeLine="1228" d="M10956.53,3922.27 C10962.72,4074.01 10977.35,4432.64 10982.7,4563.83 " fill="none" id="rrllvm.EventCodeGenBase-backto-rrllvm.EventAssignCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="10949.54,3922.55,10955.72,3902.28,10963.53,3921.98,10949.54,3922.55" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[49ef1f0ccd7d690f9615c578b154afc8]
reverse link rrllvm.EventCodeGenBase to rrllvm.EventTriggerCodeGen--><path codeLine="1231" d="M11010.01,3917.83 C11072.33,3990.33 11174.9,4111.93 11257.71,4221 C11348.98,4341.22 11448.46,4488.63 11498.34,4563.81 " fill="none" id="rrllvm.EventCodeGenBase-backto-rrllvm.EventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="11004.34,3921.97,10996.59,3902.25,11014.94,3912.83,11004.34,3921.97" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[30970d1fad9dc9e6deb6cd547cfc51de]
reverse link rrllvm.GetEventValueCodeGenBase to rrllvm.GetEventDelayCodeGen--><path codeLine="1234" d="M12208.79,3927.75 C12163.57,4075.27 12063.44,4401.87 12019.76,4544.32 " fill="none" id="rrllvm.GetEventValueCodeGenBase-backto-rrllvm.GetEventDelayCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="12202.11,3925.65,12214.67,3908.58,12215.5,3929.75,12202.11,3925.65" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b7fb55a778f67257cf262d7919928579]
reverse link rrllvm.GetEventValueCodeGenBase to rrllvm.GetEventPriorityCodeGen--><path codeLine="1237" d="M12247.81,3928.52 C12279.82,4078.73 12350.96,4412.44 12380.47,4550.92 " fill="none" id="rrllvm.GetEventValueCodeGenBase-backto-rrllvm.GetEventPriorityCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="12240.88,3929.6,12243.55,3908.58,12254.57,3926.68,12240.88,3929.6" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[6f87757a373b7368b82bd348382d3734]
reverse link rrllvm.GetEventValueCodeGenBase to rrllvm.GetEventTriggerCodeGen--><path codeLine="1240" d="M12312.79,3922.14 C12391.33,3991.97 12510.45,4105.72 12593.71,4221 C12669.38,4325.78 12732.74,4463.05 12767.06,4544.26 " fill="none" id="rrllvm.GetEventValueCodeGenBase-backto-rrllvm.GetEventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="12308.01,3927.26,12297.65,3908.77,12317.28,3916.76,12308.01,3927.26" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[6f7af1f495a73e46ab9bf55152ba734c]
reverse link rrllvm.GetInitialValueCodeGenBase to rrllvm.GetCompartmentInitVolumeCodeGen--><path codeLine="1243" d="M16439.41,3912.5 C16391.82,3984.9 16309.59,4111.1 16241.71,4221 C16168.36,4339.75 16085.87,4481.09 16041.71,4557.43 " fill="none" id="rrllvm.GetInitialValueCodeGenBase-backto-rrllvm.GetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="16433.61,3908.58,16450.45,3895.72,16445.3,3916.28,16433.61,3908.58" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[6bd5c53521c37aeaf2b9194c9b397c3c]
reverse link rrllvm.GetInitialValueCodeGenBase to rrllvm.GetFloatingSpeciesInitAmountCodeGen--><path codeLine="1246" d="M16478.71,3916.06 C16478.71,4061.67 16478.71,4419.42 16478.71,4557.44 " fill="none" id="rrllvm.GetInitialValueCodeGenBase-backto-rrllvm.GetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="16471.71,3915.76,16478.71,3895.76,16485.71,3915.76,16471.71,3915.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a1b115b1797b14a2a4c59db4d6cf4ea1]
reverse link rrllvm.GetInitialValueCodeGenBase to rrllvm.GetFloatingSpeciesInitConcentrationCodeGen--><path codeLine="1249" d="M16517.52,3912.95 C16610.46,4056.52 16844.75,4418.43 16934.74,4557.44 " fill="none" id="rrllvm.GetInitialValueCodeGenBase-backto-rrllvm.GetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="16511.38,3916.36,16506.39,3895.76,16523.14,3908.75,16511.38,3916.36" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[793e401b7fcb07ee2e447317c73d8e52]
reverse link rrllvm.GetInitialValueCodeGenBase to rrllvm.GetGlobalParameterInitValueCodeGen--><path codeLine="1252" d="M16640.49,3902.19 C16803.53,3958.24 17054.83,4063.05 17225.71,4221 C17331.08,4318.4 17404.04,4474.38 17437.66,4557.17 " fill="none" id="rrllvm.GetInitialValueCodeGenBase-backto-rrllvm.GetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="16637.74,3908.65,16621.05,3895.6,16642.24,3895.4,16637.74,3908.65" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d17d43d4f516e14d4790d3b7b77a7392]
reverse link rrllvm.GetValueCodeGenBase to rrllvm.GetBoundarySpeciesAmountCodeGen--><path codeLine="1255" d="M14030.85,3902.46 C13873.15,3959.26 13628.11,4065.15 13461.71,4221 C13356.98,4319.09 13283.75,4474.78 13249.92,4557.34 " fill="none" id="rrllvm.GetValueCodeGenBase-backto-rrllvm.GetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="14028.92,3895.71,14050.11,3895.61,14033.61,3908.9,14028.92,3895.71" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[6b8ef4078ac7aefeb30b65ada932afb9]
reverse link rrllvm.GetValueCodeGenBase to rrllvm.GetBoundarySpeciesConcentrationCodeGen--><path codeLine="1258" d="M14147.4,3912.95 C14058.04,4056.52 13832.8,4418.43 13746.29,4557.44 " fill="none" id="rrllvm.GetValueCodeGenBase-backto-rrllvm.GetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="14141.58,3909.04,14158.09,3895.76,14153.47,3916.44,14141.58,3909.04" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d8d9cb3a0e5b92c8ebbfe63234b53531]
reverse link rrllvm.GetValueCodeGenBase to rrllvm.GetCompartmentVolumeCodeGen--><path codeLine="1261" d="M14184.71,3916.06 C14184.71,4061.67 14184.71,4419.42 14184.71,4557.44 " fill="none" id="rrllvm.GetValueCodeGenBase-backto-rrllvm.GetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="14177.71,3915.76,14184.71,3895.76,14191.71,3915.76,14177.71,3915.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a73bf3fe00154b15ac01a9b6cbd1911f]
reverse link rrllvm.GetValueCodeGenBase to rrllvm.GetFloatingSpeciesAmountCodeGen--><path codeLine="1264" d="M14221.43,3912.92 C14265.87,3985.61 14342.82,4111.96 14407.71,4221 C14478.74,4340.38 14560.51,4481.19 14604.56,4557.33 " fill="none" id="rrllvm.GetValueCodeGenBase-backto-rrllvm.GetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="14215.32,3916.36,14210.85,3895.64,14227.26,3909.05,14215.32,3916.36" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ffcfde434a652b864b8c83ba07f8efb1]
reverse link rrllvm.GetValueCodeGenBase to rrllvm.GetFloatingSpeciesConcentrationCodeGen--><path codeLine="1267" d="M14322.88,3902.97 C14470.46,3961.58 14704.83,4070.25 14865.71,4221 C14971.83,4320.44 15050.86,4475.22 15088.06,4557.38 " fill="none" id="rrllvm.GetValueCodeGenBase-backto-rrllvm.GetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="14320.04,3909.38,14303.98,3895.55,14325.16,3896.35,14320.04,3909.38" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[cfe4d634bab7aa94cf2e1ca9deb39b03]
reverse link rrllvm.GetValueCodeGenBase to rrllvm.GetGlobalParameterCodeGen--><path codeLine="1270" d="M14349.88,3901.23 C14663.53,3993.31 15317.8,4187.96 15357.71,4221 C15466.39,4310.97 15526.92,4472.25 15552.66,4557.18 " fill="none" id="rrllvm.GetValueCodeGenBase-backto-rrllvm.GetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="14347.86,3907.93,14330.64,3895.58,14351.8,3894.5,14347.86,3907.93" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9a7cbe923a43581d92c6586b23878190]
reverse link rrllvm.LoadSymbolResolver to rrllvm.FunctionResolver--><path codeLine="1273" d="M2502.76,1218.89 C2576.41,1283.97 2682.5,1384.29 2749.71,1492 C2937.15,1792.4 3038.48,2207.74 3084.05,2391.97 " fill="none" id="rrllvm.LoadSymbolResolver-backto-rrllvm.FunctionResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2497.97,1224,2487.56,1205.55,2507.21,1213.48,2497.97,1224" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[959c139bbbf02e596e1506fd2644d6ca]
reverse link rrllvm.FunctionResolver to rrllvm.LoadSymbolResolver--><path codeLine="1353" d="M3101.67,2378.93 C3068.78,2188.74 2967.85,1785.5 2784.71,1492 C2712.72,1376.63 2596.12,1269.74 2514.1,1205.55 " fill="none" id="rrllvm.FunctionResolver-backto-rrllvm.LoadSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3103.88,2391.97,3106.8297,2385.3898,3101.8901,2380.1361,3098.9404,2386.7164,3103.88,2391.97" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[758d1feb9867f552840f336bbd373610]
reverse link rrllvm.LoadSymbolResolver to rrllvm.KineticLawParameterResolver--><path codeLine="1276" d="M2411.44,1225.56 C2394.93,1467.93 2371.21,2178.18 2371.95,2411.37 " fill="none" id="rrllvm.LoadSymbolResolver-backto-rrllvm.KineticLawParameterResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2404.46,1225.03,2412.86,1205.58,2418.42,1226.03,2404.46,1225.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ed2849bbe0e02df3e9e4de3c4af166a2]
reverse link rrllvm.KineticLawParameterResolver to rrllvm.LoadSymbolResolver--><path codeLine="1359" d="M2385.79,2398.25 C2403.09,2145.34 2426.98,1422.24 2424.73,1205.58 " fill="none" id="rrllvm.KineticLawParameterResolver-backto-rrllvm.LoadSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="2384.87,2411.37,2389.282,2405.6661,2385.7137,2399.3997,2381.3018,2405.1036,2384.87,2411.37" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7570d253766ca5c3c05e22592778543b]
reverse link rrllvm.LoadSymbolResolver to rrllvm.LoadSymbolResolverBase--><path codeLine="1279" d="M2296.19,1216.58 C2199.49,1278.94 2068.22,1376.68 1984.71,1492 C1785.83,1766.62 1681.18,2160.24 1638.05,2359.92 " fill="none" id="rrllvm.LoadSymbolResolver-backto-rrllvm.LoadSymbolResolverBase" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="2292.59,1210.58,2313.22,1205.74,2300.11,1222.38,2292.59,1210.58" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b4047faf97f4be402aa4845353c78271]
reverse link rrllvm.LoadSymbolResolverBase to rrllvm.ModelDataLoadSymbolResolver--><path codeLine="1282" d="M1552.84,2633.99 C1426.93,2934.96 1143.03,3613.59 1064.3,3801.79 " fill="none" id="rrllvm.LoadSymbolResolverBase-backto-rrllvm.ModelDataLoadSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1546.55,2630.9,1560.72,2615.15,1559.46,2636.3,1546.55,2630.9" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[85bc76ad955ead9715925ade18c3d109]
reverse link rrllvm.LoadSymbolResolverBase to rrllvm.ModelInitialValueSymbolResolver--><path codeLine="1285" d="M1616.73,2635.34 C1622.92,2936.99 1636.84,3613.87 1640.7,3801.79 " fill="none" id="rrllvm.LoadSymbolResolverBase-backto-rrllvm.ModelInitialValueSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1609.72,2635.29,1616.31,2615.15,1623.72,2635,1609.72,2635.29" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[42601b6674a3d1b48eeb4fbd13d3683f]
reverse link rrllvm.LoadSymbolResolverBase to rrllvm.SBMLInitialValueSymbolResolver--><path codeLine="1288" d="M1648.27,2634.85 C1698.87,2834.36 1803.99,3199.31 1956.71,3483 C2023.85,3607.72 2132.19,3734.64 2193.51,3801.95 " fill="none" id="rrllvm.LoadSymbolResolverBase-backto-rrllvm.SBMLInitialValueSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1641.41,2636.29,1643.32,2615.18,1654.99,2632.87,1641.41,2636.29" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[414eeec379bb736813394d3d313bf421]
reverse link rrllvm.SetInitialValueCodeGenBase to rrllvm.SetCompartmentInitVolumeCodeGen--><path codeLine="1291" d="M7262.64,3910.5 C7194.77,3981.54 7068.91,4100.42 6935.71,4161 C6793.24,4225.79 6717.46,4132.01 6588.71,4221 C6471.9,4301.73 6405.24,4462.35 6375.89,4550.87 " fill="none" id="rrllvm.SetInitialValueCodeGenBase-backto-rrllvm.SetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="7257.81,3905.42,7276.63,3895.67,7267.99,3915.02,7257.81,3905.42" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2883b5f717bb71dc811feb5d0e4b2e85]
reverse link rrllvm.SetInitialValueCodeGenBase to rrllvm.SetFloatingSpeciesInitAmountCodeGen--><path codeLine="1294" d="M7272.42,3912.21 C7221.27,3984.33 7133.16,4110.26 7061.71,4221 C6987.65,4335.77 6906.29,4472.98 6860.76,4550.87 " fill="none" id="rrllvm.SetInitialValueCodeGenBase-backto-rrllvm.SetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="7266.99,3907.76,7284.28,3895.51,7278.41,3915.87,7266.99,3907.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[66a7fd8db240db7bb92eab25d9a73c80]
reverse link rrllvm.SetInitialValueCodeGenBase to rrllvm.SetFloatingSpeciesInitConcentrationCodeGen--><path codeLine="1297" d="M7314.71,3916.18 C7314.71,4059.65 7314.71,4408.6 7314.71,4550.97 " fill="none" id="rrllvm.SetInitialValueCodeGenBase-backto-rrllvm.SetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="7307.71,3915.76,7314.71,3895.76,7321.71,3915.76,7307.71,3915.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3a588cac4bde59cdf4a19f5ec1632a6e]
reverse link rrllvm.SetInitialValueCodeGenBase to rrllvm.SetGlobalParameterInitValueCodeGen--><path codeLine="1300" d="M7357.59,3912.37 C7409.16,3984.4 7497.68,4110 7568.71,4221 C7641.92,4335.4 7721.32,4472.74 7765.65,4550.75 " fill="none" id="rrllvm.SetInitialValueCodeGenBase-backto-rrllvm.SetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="7351.58,3916.01,7345.61,3895.68,7362.96,3907.85,7351.58,3916.01" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[93c9f237065005272843c22796c8ba70]
reverse link rrllvm.SetValueCodeGenBase to rrllvm.SetBoundarySpeciesAmountCodeGen--><path codeLine="1303" d="M4887.57,3904.37 C4744.41,3973.46 4475.72,4095.23 4233.71,4161 C4054.72,4209.64 3974.8,4117.75 3820.71,4221 C3699.5,4302.22 3632.5,4469.98 3604.53,4557.35 " fill="none" id="rrllvm.SetValueCodeGenBase-backto-rrllvm.SetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4884.61,3898.02,4905.66,3895.59,4890.72,3910.62,4884.61,3898.02" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c13885bba73b79c8f80ff916be734359]
reverse link rrllvm.SetValueCodeGenBase to rrllvm.SetBoundarySpeciesConcentrationCodeGen--><path codeLine="1306" d="M4855.82,3903.05 C4710.42,3962.04 4478.4,4071.34 4318.71,4221 C4212.23,4320.79 4131.84,4475.43 4093.88,4557.47 " fill="none" id="rrllvm.SetValueCodeGenBase-backto-rrllvm.SetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4853.26,3896.53,4874.43,3895.58,4858.47,3909.52,4853.26,3896.53" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[515e0899dcf7683e65775d26e7d5cbc2]
reverse link rrllvm.SetValueCodeGenBase to rrllvm.SetCompartmentVolumeCodeGen--><path codeLine="1309" d="M4952.55,3912.95 C4906.67,3985.43 4827.7,4111.33 4762.71,4221 C4692.33,4339.76 4613.47,4481.09 4571.28,4557.43 " fill="none" id="rrllvm.SetValueCodeGenBase-backto-rrllvm.SetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4946.86,3908.87,4963.48,3895.72,4958.68,3916.36,4946.86,3908.87" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d7cedd8486e390018b2e1a299611e3a5]
reverse link rrllvm.SetValueCodeGenBase to rrllvm.SetFloatingSpeciesAmountCodeGen--><path codeLine="1312" d="M4990.71,3916.06 C4990.71,4061.67 4990.71,4419.42 4990.71,4557.44 " fill="none" id="rrllvm.SetValueCodeGenBase-backto-rrllvm.SetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="4983.71,3915.76,4990.71,3895.76,4997.71,3915.76,4983.71,3915.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c8f5d4d929b59ecde2bbbc2d30325720]
reverse link rrllvm.SetValueCodeGenBase to rrllvm.SetFloatingSpeciesConcentrationCodeGen--><path codeLine="1315" d="M5028.02,3912.95 C5117.38,4056.52 5342.62,4418.43 5429.13,4557.44 " fill="none" id="rrllvm.SetValueCodeGenBase-backto-rrllvm.SetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="5021.95,3916.44,5017.32,3895.76,5033.83,3909.04,5021.95,3916.44" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d59dbdb8bdf1c3b3b2779ed9b465a95a]
reverse link rrllvm.SetValueCodeGenBase to rrllvm.SetGlobalParameterCodeGen--><path codeLine="1318" d="M5148.15,3902.29 C5306.04,3958.33 5548.16,4063.04 5708.71,4221 C5808.35,4319.04 5871.66,4474.75 5900.14,4557.33 " fill="none" id="rrllvm.SetValueCodeGenBase-backto-rrllvm.SetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="5145.41,3908.75,5128.84,3895.53,5150.03,3895.54,5145.41,3908.75" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e119e04b86fcba1c08dcca63c773185e]
reverse link rrllvm.StoreSymbolResolver to rrllvm.ModelDataStoreSymbolResolver--><path codeLine="1321" d="M1704.31,235.31 C1590.42,302.57 1377.53,428.32 1236.94,511.36 " fill="none" id="rrllvm.StoreSymbolResolver-backto-rrllvm.ModelDataStoreSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1700.93,229.17,1721.71,225.03,1708.05,241.23,1700.93,229.17" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2ec0c29fd34f7446725f03370755c4cc]
reverse link rrllvm.StoreSymbolResolver to rrllvm.ModelInitialValueStoreSymbolResolver--><path codeLine="1324" d="M1861.11,235.31 C1974.99,302.57 2187.89,428.32 2328.48,511.36 " fill="none" id="rrllvm.StoreSymbolResolver-backto-rrllvm.ModelInitialValueStoreSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="1857.37,241.23,1843.71,225.03,1864.49,229.17,1857.37,241.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[88c841dd1769f188d98e62969c0fdf25]
reverse link rrllvm.ASTNodeCodeGen to rrllvm.LoadSymbolResolver--><path codeLine="1332" d="M3164.71,790.59 C3163.04,791.39 3161.37,792.2 3159.71,793 C2948.71,894.7 2702.45,1010.2 2554.2,1079.38 " fill="none" id="rrllvm.ASTNodeCodeGen-backto-rrllvm.LoadSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3176.65,784.82,3169.5071,783.8307,3165.8466,790.0436,3172.9895,791.033,3176.65,784.82" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5dc355c70c783b600bda3e54a8e31711]
reverse link rrllvm.ASTNodeCodeGen to rrllvm.ModelGeneratorContext--><path codeLine="1335" d="M3624.81,805.65 C3763.74,1314.47 4041.44,2631.22 3483.71,3483 C3449.29,3535.56 3405.61,3504.82 3355.71,3543 C3337.62,3556.84 3319.91,3572.13 3302.79,3588.28 " fill="none" id="rrllvm.ASTNodeCodeGen-backto-rrllvm.ModelGeneratorContext" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3621.35,793.05,3619.0809,799.8948,3624.5264,804.622,3626.7955,797.7772,3621.35,793.05" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[056a62f83c94271c37b6ee9d9fdfb91b]
reverse link rrllvm.ASTNodeCodeGenScalarTicket to rrllvm.ASTNodeCodeGen--><path codeLine="1338" d="M3561.71,258.23 C3561.71,296.26 3561.71,345.56 3561.71,394.58 " fill="none" id="rrllvm.ASTNodeCodeGenScalarTicket-backto-rrllvm.ASTNodeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3561.71,244.75,3557.71,250.75,3561.71,256.75,3565.71,250.75,3561.71,244.75" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a428ad075df536787c93840036ba6ba4]
reverse link rrllvm.AssignmentRuleEvaluator to rrllvm.SymbolForest--><path codeLine="1341" d="M17887.74,4677.08 C17871.38,4765.85 17827.78,4927.15 17719.71,5007 C16606.74,5829.35 12053.24,5901.22 10893.48,5906.05 " fill="none" id="rrllvm.AssignmentRuleEvaluator-backto-rrllvm.SymbolForest" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="17890.01,4664.26,17885.0232,4669.4688,17887.9133,4676.0754,17892.9001,4670.8666,17890.01,4664.26" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0160e44d8fb59894eed6f40bf1639492]
reverse link rrllvm.CodeGenBase to rrllvm.LLVMModelDataSymbols--><path codeLine="1344" d="M8585.98,2531.89 C7461.84,2648.01 4554.49,2994.74 3771.71,3543 C3508.37,3727.44 3665.99,3986.88 3395.71,4161 C3302.37,4221.13 2975.64,4140 2899.71,4221 C2839.88,4284.81 2861.45,4919.72 2855.71,5007 C2854.41,5026.72 2853.08,5046.68 2851.71,5066.81 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="8599.12,2530.54,8592.7425,2527.1743,8587.1829,2531.7667,8593.5603,2535.1324,8599.12,2530.54" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[aa45c0881f6d0bf2d9a0d5f47d5cd58b]
reverse link rrllvm.CodeGenBase to rrllvm.LLVMModelSymbols--><path codeLine="1347" d="M8586.13,2564.98 C7269.88,2790.87 3498.22,3445.34 3410.71,3543 C3318.79,3645.57 3463.44,4066.01 3363.71,4161 C3274.85,4245.63 1268.21,4172 1155.71,4221 C1057.54,4263.76 971.44,4344.39 905.7,4421.45 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.LLVMModelSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="8599.11,2562.76,8592.5197,2559.8329,8587.283,2564.7905,8593.8733,2567.7176,8599.11,2562.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0655309f999f874fa049599ccea8f341]
reverse link rrllvm.CodeGenBase to rrllvm.ModelGeneratorContext--><path codeLine="1350" d="M8585.75,2563.91 C7288.05,2783.43 3603.5,3414.62 3373.71,3543 C3350.72,3555.84 3328.61,3571.29 3307.61,3588.33 " fill="none" id="rrllvm.CodeGenBase-backto-rrllvm.ModelGeneratorContext" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="8599.01,2561.67,8592.4292,2558.7215,8587.1765,2563.662,8593.7573,2566.6105,8599.01,2561.67" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[1fbe945d626967400e1e5e04fb851096]
reverse link rrllvm.FunctionResolver to rrllvm.ModelGeneratorContext--><path codeLine="1356" d="M3110.36,2596.54 C3107.71,2809.24 3101.74,3287.68 3097.98,3588.39 " fill="none" id="rrllvm.FunctionResolver-backto-rrllvm.ModelGeneratorContext" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="3110.53,2583.23,3106.4578,2589.1812,3110.385,2595.2291,3114.4572,2589.2779,3110.53,2583.23" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[33f46603c8d6a90cf33352a80fac8fbb]
reverse link rrllvm.LLVMModelData to rrllvm.Random--><path codeLine="1362" d="M3777.35,3940.81 C3622.19,4037.94 3390.47,4185.47 3356.71,4221 C3288.71,4292.56 3232.43,4387.93 3192.68,4466.69 " fill="none" id="rrllvm.LLVMModelData-backto-rrllvm.Random" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="3788.39,3933.91,3781.1818,3933.7056,3778.2207,3940.2807,3785.4289,3940.4851,3788.39,3933.91" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0d84194129b4c039036416baeb8dc132]
reverse link rrllvm.LLVMModelDataIRBuilderTesting to rrllvm.LLVMModelDataSymbols--><path codeLine="1365" d="M2433.75,4728.28 C2458.77,4811.51 2495.29,4933.03 2535.48,5066.77 " fill="none" id="rrllvm.LLVMModelDataIRBuilderTesting-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="2429.99,4715.76,2427.8806,4722.6557,2433.4345,4727.255,2435.5439,4720.3593,2429.99,4715.76" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8ad0dc8c84bc7650b62df3476d55040e]
reverse link rrllvm.LLVMModelSymbols to rrllvm.ASTNodeFactory--><path codeLine="1368" d="M745.95,4819.86 C710.59,5112.53 647.29,5636.4 623.8,5830.74 " fill="none" id="rrllvm.LLVMModelSymbols-backto-rrllvm.ASTNodeFactory" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="747.56,4806.53,742.8638,4812.0023,746.1089,4818.4419,750.8051,4812.9697,747.56,4806.53" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7778760678f586815f975e17eea18e23]
reverse link rrllvm.LLVMModelSymbols to rrllvm.LLVMModelDataSymbols--><path codeLine="1371" d="M912.67,4816.92 C971.6,4886.96 1045.48,4959.7 1127.71,5007 C1237.65,5070.24 1288.87,5020.09 1406.71,5067 C1800.11,5223.62 2209.69,5487.21 2479.61,5677.19 " fill="none" id="rrllvm.LLVMModelSymbols-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="904.09,4806.61,904.8552,4813.7804,911.7683,4815.8319,911.0031,4808.6615,904.09,4806.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[75dbfea6401fc44db56239620b7cb28e]
reverse link rrllvm.LLVMModelSymbols to rrllvm.SymbolForest--><path codeLine="1374" d="M914.57,4816.58 C979.13,4890.45 1061.94,4965.96 1155.71,5007 C1355.11,5094.26 2896.6,5051.57 3113.71,5067 C5955.89,5268.98 9380.94,5732.13 10354.17,5867.92 " fill="none" id="rrllvm.LLVMModelSymbols-backto-rrllvm.SymbolForest" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="905.99,4806.64,906.8893,4813.7948,913.8396,4815.7165,912.9403,4808.5617,905.99,4806.64" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="8" x="903.1181" y="4827.0357">4</text><!--MD5=[849e97da3f8559d7e8391df08bd7e6e5]
reverse link rrllvm.LoadSymbolResolverBase to rrllvm.LLVMModelDataSymbols--><path codeLine="1377" d="M1621.51,2628.69 C1641.98,2849.4 1716.13,3274.21 1984.71,3483 C2180.24,3635 2347.25,3385.9 2538.71,3543 C2782.88,3743.36 2700.49,3909.33 2751.71,4221 C2778.46,4383.82 2788.63,4730.21 2791.64,5066.83 " fill="none" id="rrllvm.LoadSymbolResolverBase-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1620.32,2615.43,1616.8696,2621.762,1621.3874,2627.3824,1624.8379,2621.0504,1620.32,2615.43" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e69a1da54b91c7871ab461ff367f9f0f]
reverse link rrllvm.LoadSymbolResolverBase to rrllvm.LLVMModelSymbols--><path codeLine="1380" d="M1446.68,2623.83 C1235.95,2806.52 884.25,3154.25 744.71,3543 C688.66,3699.15 723.45,4158.04 749.62,4421.38 " fill="none" id="rrllvm.LoadSymbolResolverBase-backto-rrllvm.LLVMModelSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1456.6,2615.26,1449.4445,2616.1542,1447.5178,2623.1031,1454.6733,2622.2089,1456.6,2615.26" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c9af027847fb4055d57189f89d16a2e2]
reverse link rrllvm.LoadSymbolResolverBase to rrllvm.ModelGeneratorContext--><path codeLine="1383" d="M1621.35,2628.41 C1641.58,2849.22 1715.42,3274.76 1984.71,3483 C2087.56,3562.54 2443.1,3502.67 2566.71,3543 C2661.92,3574.07 2758.69,3624.09 2842.93,3674.86 " fill="none" id="rrllvm.LoadSymbolResolverBase-backto-rrllvm.ModelGeneratorContext" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1620.17,2615.14,1616.7133,2621.4686,1621.2255,2627.0935,1624.6822,2620.7649,1620.17,2615.14" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[4a8d868d23bbf297611f6444d0c3da37]
reverse link rrllvm.ModelDataIRBuilder to rrllvm.LLVMModelDataSymbols--><path codeLine="1386" d="M1970.96,5016.94 C2134.25,5194.69 2324.07,5401.31 2479.59,5570.61 " fill="none" id="rrllvm.ModelDataIRBuilder-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1961.97,5007.16,1963.0805,5014.2851,1970.0847,5016.0004,1968.9741,5008.8753,1961.97,5007.16" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c94ff11be0cb777924cf63e05d146ce3]
reverse link rrllvm.ModelDataStoreSymbolResolver to rrllvm.LLVMModelDataSymbols--><path codeLine="1389" d="M1231.21,684.52 C1430.17,827.8 1798.55,1129.72 1946.71,1492 C1988.59,1594.4 1910.03,3401.38 1984.71,3483 C2068.3,3574.36 2455.99,3450.84 2538.71,3543 C2722.17,3747.41 2728.67,3962.62 2538.71,4161 C2432.33,4272.09 1262.09,4109.91 1155.71,4221 C1125.51,4252.54 1128.66,4972.72 1155.71,5007 C1226.76,5097.04 1300.64,5023.36 1406.71,5067 C1798.79,5228.3 2209.22,5491.54 2479.7,5680.16 " fill="none" id="rrllvm.ModelDataStoreSymbolResolver-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1220.4,676.77,1222.9488,683.5156,1230.1559,683.7573,1227.6071,677.0117,1220.4,676.77" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[fa1edb3e14c2c26b26803b7316b99db1]
reverse link rrllvm.ModelDataStoreSymbolResolver to rrllvm.LLVMModelSymbols--><path codeLine="1392" d="M867.5,682.83 C794.11,722.98 721.28,778.58 679.71,853 C6,2059.02 507.97,3839.63 702.54,4421.47 " fill="none" id="rrllvm.ModelDataStoreSymbolResolver-backto-rrllvm.LLVMModelSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="879.28,676.52,872.103,675.8192,868.6958,682.1746,875.8728,682.8754,879.28,676.52" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[99011b925bf714ebd30596aa9f71b2ba]
reverse link rrllvm.ModelDataStoreSymbolResolver to rrllvm.LoadSymbolResolver--><path codeLine="1395" d="M1390.02,680.27 C1642.18,754.16 1967.66,849.77 1974.71,853 C2111.11,915.61 2254.34,1015.21 2340.58,1079.47 " fill="none" id="rrllvm.ModelDataStoreSymbolResolver-backto-rrllvm.LoadSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="1377.32,676.55,1381.9578,682.0718,1388.8387,679.9146,1384.2009,674.3927,1377.32,676.55" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e8ddd4a07bec6864322d38c10a336a1e]
reverse link rrllvm.ModelGeneratorContext to rrllvm.LLVMModelDataSymbols--><path codeLine="1398" d="M2909.13,4127.23 C2894.31,4157.91 2881.36,4189.49 2871.71,4221 C2858.32,4264.7 2838.01,4666.51 2820.72,5066.76 " fill="none" id="rrllvm.ModelGeneratorContext-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="2914.9,4115.51,2908.6602,4119.1246,2909.5969,4126.2746,2915.8366,4122.66,2914.9,4115.51" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0e5ff374368ef35b9c46988194ac8ec2]
reverse link rrllvm.ModelGeneratorContext to rrllvm.LLVMModelSymbols--><path codeLine="1401" d="M2831.82,4031.21 C2742.58,4082.64 2639.8,4132.52 2538.71,4161 C2242.61,4244.42 1436.74,4095.88 1155.71,4221 C1058.22,4264.41 972.41,4344.74 906.69,4421.43 " fill="none" id="rrllvm.ModelGeneratorContext-backto-rrllvm.LLVMModelSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="2843.19,4024.61,2835.9927,4024.1639,2832.8127,4030.6359,2840.01,4031.0821,2843.19,4024.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5884b26d16be5b124158687ed2d924d4]
reverse link rrllvm.ModelGeneratorContext to rrllvm.Random--><path codeLine="1404" d="M3106.68,4128.78 C3111.65,4243.2 3117.21,4371.29 3121.37,4466.97 " fill="none" id="rrllvm.ModelGeneratorContext-backto-rrllvm.Random" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="3106.11,4115.61,3102.3776,4121.78,3106.6375,4127.5984,3110.3699,4121.4284,3106.11,4115.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5c01342ff90b6e70990787801ca91115]
reverse link rrllvm.ModelInitialValueStoreSymbolResolver to rrllvm.LLVMModelDataSymbols--><path codeLine="1407" d="M2630.28,683.36 C2864.83,820.59 3287.1,1109.46 3456.71,1492 C3479.12,1542.56 3493.92,3442.08 3456.71,3483 C3361.94,3587.21 2921.32,3439.57 2825.71,3543 C2621.14,3764.31 2819.57,3919.67 2814.71,4221 C2810.27,4496.26 2805.45,4796.81 2801.12,5066.87 " fill="none" id="rrllvm.ModelInitialValueStoreSymbolResolver-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="2618.91,676.74,2622.0803,683.2168,2629.2782,682.7815,2626.108,676.3047,2618.91,676.74" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c7b1035bf31b3647ad3106a749eae365]
reverse link rrllvm.ModelInitialValueStoreSymbolResolver to rrllvm.LLVMModelSymbols--><path codeLine="1410" d="M2286.09,682.69 C2024.41,819.06 1542.62,1106.85 1280.71,1492 C748.36,2274.84 834.69,2605.13 705.71,3543 C663.71,3848.36 703.26,4206.48 736.42,4421.27 " fill="none" id="rrllvm.ModelInitialValueStoreSymbolResolver-backto-rrllvm.LLVMModelSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="2297.99,676.51,2290.8218,675.7248,2287.3399,682.0396,2294.5082,682.8248,2297.99,676.51" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[cbcbe6128f930840fb3a8e2076e39aa6]
reverse link rrllvm.ModelInitialValueStoreSymbolResolver to rrllvm.LoadSymbolResolver--><path codeLine="1413" d="M2458.73,689.8 C2449.32,801.61 2433.94,984.28 2425.93,1079.45 " fill="none" id="rrllvm.ModelInitialValueStoreSymbolResolver-backto-rrllvm.LoadSymbolResolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="2459.85,676.52,2455.3568,682.1601,2458.8349,688.477,2463.3281,682.8369,2459.85,676.52" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e41b3d18ed7b49254d92156396ceb0e2]
reverse link rrllvm.ModelResources to rrllvm.EvalConversionFactorCodeGen--><path codeLine="1416" d="M10006.6,4125.77 C9980.49,4139.43 9953.74,4151.43 9926.71,4161 C9773.45,4215.27 8602.96,4135.45 8464.71,4221 C8339.16,4298.68 8280.99,4476.99 8259.34,4563.76 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EvalConversionFactorCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.14,4119.6,10010.963,4118.8992,10007.5558,4125.2546,10014.7328,4125.9554,10018.14,4119.6" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[92e496974a6221def9d2335a11200657]
reverse link rrllvm.ModelResources to rrllvm.EvalInitialConditionsCodeGen--><path codeLine="1419" d="M10006.45,4123.66 C9980.33,4137.87 9953.63,4150.56 9926.71,4161 C9678.07,4257.41 9573.42,4112.76 9329.71,4221 C9180.5,4287.27 9047.71,4425.23 8969.7,4518.49 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EvalInitialConditionsCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018,4117.25,10010.8129,4116.6626,10007.5064,4123.071,10014.6935,4123.6584,10018,4117.25" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[1bda4b473e19ece6fb07f898948b7d39]
reverse link rrllvm.ModelResources to rrllvm.EvalRateRuleRatesCodeGen--><path codeLine="1422" d="M10006.79,4115.34 C9980.31,4131.79 9953.46,4147.24 9926.71,4161 C9849.09,4200.92 9806.48,4164.79 9739.71,4221 C9629.54,4313.74 9570.78,4480.91 9547.22,4563.74 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EvalRateRuleRatesCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.11,4108.22,10010.9015,4108.0265,10007.9504,4114.6061,10015.1589,4114.7996,10018.11,4108.22" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[765c90fbd15443d3aabb6aa639f4e02f]
reverse link rrllvm.ModelResources to rrllvm.EvalReactionRatesCodeGen--><path codeLine="1425" d="M10174.14,4172.68 C10096.23,4322.19 10011.67,4484.48 9970.36,4563.78 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EvalReactionRatesCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10180.21,4161.03,10173.8884,4164.4995,10174.6597,4171.6693,10180.9812,4168.1997,10180.21,4161.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c14d26eae4fc32768a5f4522f9202dfc]
reverse link rrllvm.ModelResources to rrllvm.EvalVolatileStoichCodeGen--><path codeLine="1428" d="M10370.72,4174.24 C10383.93,4315.66 10398.18,4468.21 10405.91,4550.97 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EvalVolatileStoichCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10369.48,4161.03,10366.051,4167.3737,10370.5878,4172.9788,10374.0168,4166.6351,10369.48,4161.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f2149dfdd2ad8c1d644abb436598128e]
reverse link rrllvm.ModelResources to rrllvm.EventAssignCodeGen--><path codeLine="1431" d="M10658.22,4170.94 C10673.15,4187.67 10687.72,4204.41 10701.71,4221 C10800.59,4338.27 10902.52,4487.87 10952.75,4563.89 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EventAssignCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10649.39,4161.1,10650.423,4168.2367,10657.4081,4170.028,10656.3751,4162.8913,10649.39,4161.1" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f770c0d8cd68f15ccb93d18e4b80ab69]
reverse link rrllvm.ModelResources to rrllvm.EventTriggerCodeGen--><path codeLine="1434" d="M10675.26,4158.52 C10677.07,4159.36 10678.89,4160.19 10680.71,4161 C10916.14,4266.09 11035.65,4089.98 11257.71,4221 C11393.24,4300.97 11477.84,4477.75 11512.55,4563.9 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.EventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.35,4152.8,10667.0258,4159.0039,10674.1662,4157.9971,10670.4905,4151.7931,10663.35,4152.8" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[90fd8671823560280c2522d9c6a350cb]
reverse link rrllvm.ModelResources to rrllvm.GetBoundarySpeciesAmountCodeGen--><path codeLine="1437" d="M10675.53,4158.88 C10677.25,4159.6 10678.98,4160.31 10680.71,4161 C10919.57,4256.68 12773.73,4090.87 12995.71,4221 C13122.58,4295.37 13188.01,4468.19 13214.36,4557.45 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.35,4153.57,10667.249,4159.6361,10674.3481,4158.3701,10670.4491,4152.304,10663.35,4153.57" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e641adebca3393a207d558da84ef85dc]
reverse link rrllvm.ModelResources to rrllvm.GetBoundarySpeciesConcentrationCodeGen--><path codeLine="1440" d="M10675.53,4158.9 C10677.25,4159.61 10678.98,4160.31 10680.71,4161 C10967.87,4275.3 13192.32,4069.49 13461.71,4221 C13592.39,4294.5 13665.05,4467.72 13695.09,4557.25 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.34,4153.61,10667.2478,4159.6705,10674.3451,4158.3942,10670.4373,4152.3338,10663.34,4153.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7baaaa52d53fffb46efdc6e41c55307e]
reverse link rrllvm.ModelResources to rrllvm.GetCompartmentInitVolumeCodeGen--><path codeLine="1443" d="M10675.52,4158.92 C10677.24,4159.63 10678.97,4160.32 10680.71,4161 C10944.33,4264.44 15532.53,4079.29 15777.71,4221 C15904.89,4294.51 15969.65,4467.72 15995.62,4557.25 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.31,4153.69,10667.2448,4159.7329,10674.3363,4158.425,10670.4015,4152.3821,10663.31,4153.69" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3892acff9aec0186c0ca36ba860b3122]
reverse link rrllvm.ModelResources to rrllvm.GetCompartmentVolumeCodeGen--><path codeLine="1446" d="M10675.52,4158.9 C10677.25,4159.62 10678.98,4160.31 10680.71,4161 C10850.2,4228.14 13804.96,4127.91 13961.71,4221 C14086.75,4295.27 14147.74,4468.14 14171.8,4557.42 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.33,4153.63,10667.2526,4159.6809,10674.3467,4158.3872,10670.4241,4152.3364,10663.33,4153.63" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f5f89e5ab826368249924ab31d848e3a]
reverse link rrllvm.ModelResources to rrllvm.GetEventDelayCodeGen--><path codeLine="1449" d="M10675.56,4158.81 C10677.27,4159.56 10678.99,4160.28 10680.71,4161 C10911.4,4257.1 11594.84,4083.77 11803.71,4221 C11915.83,4294.67 11966.04,4453.09 11986.41,4544.38 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetEventDelayCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.45,4153.35,10667.2681,4159.4673,10674.3834,4158.2958,10670.5653,4152.1784,10663.45,4153.35" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[cca79370a4b6913b4be97addc8e01c48]
reverse link rrllvm.ModelResources to rrllvm.GetEventPriorityCodeGen--><path codeLine="1452" d="M10675.55,4158.85 C10677.26,4159.58 10678.98,4160.3 10680.71,4161 C10836.46,4224.63 12052,4130.31 12193.71,4221 C12310.18,4295.55 12361.93,4460.64 12382.26,4550.97 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetEventPriorityCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.4,4153.46,10667.2631,4159.5491,10674.3695,4158.3251,10670.5065,4152.236,10663.4,4153.46" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b5afc199513fb6e75692285f89920983]
reverse link rrllvm.ModelResources to rrllvm.GetEventTriggerCodeGen--><path codeLine="1455" d="M10675.54,4158.87 C10677.26,4159.59 10678.98,4160.3 10680.71,4161 C10877.9,4240.61 12414,4107.29 12593.71,4221 C12707.94,4293.28 12760.25,4452.62 12781.69,4544.34 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetEventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.37,4153.53,10667.2541,4159.6057,10674.3563,4158.3571,10670.4722,4152.2815,10663.37,4153.53" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9813172b9e49e3d57c8fdebbab1db1a8]
reverse link rrllvm.ModelResources to rrllvm.GetFloatingSpeciesAmountCodeGen--><path codeLine="1458" d="M10675.52,4158.91 C10677.25,4159.62 10678.98,4160.32 10680.71,4161 C10873.32,4237.06 14228.94,4116.48 14407.71,4221 C14534.09,4294.9 14597.63,4467.93 14622.99,4557.34 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.32,4153.65,10667.2461,4159.6986,10674.3395,4158.4009,10670.4134,4152.3523,10663.32,4153.65" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5c5dee6e0f2da692c70755474554fa87]
reverse link rrllvm.ModelResources to rrllvm.GetFloatingSpeciesConcentrationCodeGen--><path codeLine="1461" d="M10675.52,4158.91 C10677.25,4159.62 10678.98,4160.32 10680.71,4161 C10897.06,4246.21 14663.04,4107.01 14865.71,4221 C14995.79,4294.16 15066.61,4467.53 15095.69,4557.17 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.32,4153.67,10667.2487,4159.7169,10674.3415,4158.4161,10670.4128,4152.3692,10663.32,4153.67" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[515691bf6eeba08f47dd97aff4af78bf]
reverse link rrllvm.ModelResources to rrllvm.GetFloatingSpeciesInitAmountCodeGen--><path codeLine="1464" d="M10675.52,4158.92 C10677.24,4159.63 10678.97,4160.32 10680.71,4161 C10968.38,4273.71 15973.42,4067.78 16241.71,4221 C16369.98,4294.26 16436.88,4467.58 16463.94,4557.19 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.3,4153.7,10667.2409,4159.739,10674.3311,4158.4238,10670.3902,4152.3849,10663.3,4153.7" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f9ccf53c602885e580a9dee56c782fa6]
reverse link rrllvm.ModelResources to rrllvm.GetFloatingSpeciesInitConcentrationCodeGen--><path codeLine="1467" d="M10675.52,4158.92 C10677.24,4159.63 10678.97,4160.32 10680.71,4161 C10836.85,4222.1 16569.79,4140.19 16716.71,4221 C16848.87,4293.7 16923.07,4467.69 16953.76,4557.41 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.3,4153.7,10667.2496,4159.7333,10674.3379,4158.4079,10670.3883,4152.3747,10663.3,4153.7" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c8dd4e2a63e7cffa619156d498e66d5e]
reverse link rrllvm.ModelResources to rrllvm.GetGlobalParameterCodeGen--><path codeLine="1470" d="M10675.52,4158.92 C10677.25,4159.62 10678.98,4160.32 10680.71,4161 C10922.56,4256.04 15135.62,4086.08 15357.71,4221 C15480.27,4295.46 15535.54,4468.24 15556.64,4557.47 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.31,4153.68,10667.2475,4159.7212,10674.3384,4158.4102,10670.4009,4152.369,10663.31,4153.68" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e3bd943abc64228b52ea629a6f0d7262]
reverse link rrllvm.ModelResources to rrllvm.GetGlobalParameterInitValueCodeGen--><path codeLine="1473" d="M10675.52,4158.93 C10677.24,4159.63 10678.97,4160.32 10680.71,4161 C10850.05,4227.19 17068.09,4130.37 17225.71,4221 C17353.19,4294.3 17418.34,4467.61 17444.5,4557.2 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.GetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10663.3,4153.71,10667.2496,4159.7433,10674.3379,4158.4179,10670.3883,4152.3847,10663.3,4153.71" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[3e93dc930561934a3f283a9868e8501c]
reverse link rrllvm.ModelResources to rrllvm.LLVMModelDataSymbols--><path codeLine="1476" d="M10651.62,4172.64 C10659.95,4188.44 10667.38,4204.58 10673.71,4221 C10705.11,4302.49 10731.86,4941.84 10673.71,5007 C10609.08,5079.42 4544.5,5721.27 3095.9,5873.65 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="10645.4,4161.2,10644.7452,4168.3813,10651.1222,4171.7478,10651.777,4164.5665,10645.4,4161.2" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[46be64d56f6cf5b965bc4966533e309e]
reverse link rrllvm.ModelResources to rrllvm.Random--><path codeLine="1479" d="M10006.05,4127.22 C9980.14,4140.45 9953.58,4151.96 9926.71,4161 C9753.72,4219.17 3514.58,4129.43 3356.71,4221 C3265.35,4273.99 3206.89,4378.91 3171.92,4466.88 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.Random" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="10017.91,4121.02,10010.7391,4120.2594,10007.279,4126.5861,10014.4499,4127.3467,10017.91,4121.02" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8a430009ffa31683a622532f6645c0c8]
reverse link rrllvm.ModelResources to rrllvm.SetBoundarySpeciesAmountCodeGen--><path codeLine="1482" d="M10006.05,4127.19 C9980.14,4140.44 9953.58,4151.95 9926.71,4161 C9765.95,4215.12 3967.64,4136.26 3820.71,4221 C3693.46,4294.39 3628.73,4467.65 3602.78,4557.22 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10017.9,4120.99,10010.7299,4120.2224,10007.2636,4126.5458,10014.4337,4127.3134,10017.9,4120.99" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d1eb585d34d66de2f2d65be25f1c7e46]
reverse link rrllvm.ModelResources to rrllvm.SetBoundarySpeciesConcentrationCodeGen--><path codeLine="1485" d="M10006.66,4126.85 C9980.55,4140.23 9953.79,4151.87 9926.71,4161 C9779.08,4210.77 4454.84,4145.25 4318.71,4221 C4187.67,4293.92 4115.6,4467.81 4085.99,4557.46 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.2,4120.8,10011.0284,4120.0464,10007.5744,4126.3765,10014.746,4127.1301,10018.2,4120.8" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ccc957438177235d9d5639f838c58b7b]
reverse link rrllvm.ModelResources to rrllvm.SetCompartmentInitVolumeCodeGen--><path codeLine="1488" d="M10006.58,4126.63 C9980.5,4140.06 9953.76,4151.77 9926.71,4161 C9751.17,4220.89 6748.91,4127.54 6588.71,4221 C6465.04,4293.15 6400.69,4459.63 6373.66,4550.71 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.11,4120.55,10010.9373,4119.807,10007.4927,4126.1422,10014.6654,4126.8852,10018.11,4120.55" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[72670f400ac2696b7254a76690148418]
reverse link rrllvm.ModelResources to rrllvm.SetCompartmentVolumeCodeGen--><path codeLine="1491" d="M10006.65,4126.82 C9980.55,4140.21 9953.79,4151.86 9926.71,4161 C9790.79,4206.89 4886.22,4148.04 4762.71,4221 C4637.62,4294.89 4577.18,4467.93 4553.43,4557.34 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.19,4120.77,10011.0184,4120.0164,10007.5644,4126.3465,10014.736,4127.1001,10018.19,4120.77" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[770fb2e3da49df40dadd18855ce211b4]
reverse link rrllvm.ModelResources to rrllvm.SetFloatingSpeciesAmountCodeGen--><path codeLine="1494" d="M10006.63,4126.79 C9980.54,4140.18 9953.78,4151.84 9926.71,4161 C9678.92,4244.82 5444.61,4089.13 5218.71,4221 C5092.41,4294.72 5029.36,4467.84 5004.26,4557.3 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.17,4120.73,10010.9984,4119.9764,10007.5444,4126.3065,10014.716,4127.0601,10018.17,4120.73" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[47ddced722d500b92a88d327948578dd]
reverse link rrllvm.ModelResources to rrllvm.SetFloatingSpeciesConcentrationCodeGen--><path codeLine="1497" d="M10006.62,4126.74 C9980.53,4140.15 9953.78,4151.82 9926.71,4161 C9704.76,4236.26 5912.87,4105.94 5708.71,4221 C5578.84,4294.19 5508.45,4467.55 5479.59,4557.18 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.16,4120.68,10010.9873,4119.937,10007.5427,4126.2722,10014.7154,4127.0152,10018.16,4120.68" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[5d9f5f74d52338ebf44c49bea2b28439]
reverse link rrllvm.ModelResources to rrllvm.SetFloatingSpeciesInitAmountCodeGen--><path codeLine="1500" d="M10006.55,4126.53 C9980.47,4139.99 9953.74,4151.73 9926.71,4161 C9776.11,4212.63 7199.55,4141.35 7061.71,4221 C6936.9,4293.12 6870.02,4459.62 6841.61,4550.7 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.08,4120.45,10010.9073,4119.707,10007.4627,4126.0422,10014.6354,4126.7852,10018.08,4120.45" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[87bb3e8967b7f0330d11f2b64727956c]
reverse link rrllvm.ModelResources to rrllvm.SetFloatingSpeciesInitConcentrationCodeGen--><path codeLine="1503" d="M10006.5,4126.39 C9980.43,4139.88 9953.72,4151.67 9926.71,4161 C9678.98,4246.55 7797.36,4092.91 7568.71,4221 C7440.48,4292.84 7366.5,4459.45 7334.23,4550.63 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.03,4120.3,10010.8566,4119.564,10007.4181,4125.9025,10014.5916,4126.6386,10018.03,4120.3" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e373d99a3971fa5a8873266d76d2e955]
reverse link rrllvm.ModelResources to rrllvm.SetGlobalParameterCodeGen--><path codeLine="1506" d="M10006.6,4126.69 C9980.51,4140.11 9953.77,4151.8 9926.71,4161 C9726.86,4228.94 6307.95,4111.14 6127.71,4221 C6005.42,4295.54 5950.09,4467.88 5928.89,4557.15 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10018.14,4120.63,10010.968,4119.88,10007.5173,4126.2119,10014.6893,4126.9619,10018.14,4120.63" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f4007190bf5971077f530e713c98433f]
reverse link rrllvm.ModelResources to rrllvm.SetGlobalParameterInitValueCodeGen--><path codeLine="1509" d="M10006.43,4126.2 C9980.38,4139.73 9953.69,4151.59 9926.71,4161 C9728.01,4230.32 8214.95,4114.05 8033.71,4221 C7910.12,4293.93 7844.74,4460.09 7817.09,4550.91 " fill="none" id="rrllvm.ModelResources-backto-rrllvm.SetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10017.95,4120.08,10010.7755,4119.3546,10007.3465,4125.6983,10014.521,4126.4237,10017.95,4120.08" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2079a945377b073ef0b287199f6bdcf2]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EvalConversionFactorCodeGen--><path codeLine="1512" d="M9973.86,2858.3 C9806.4,3048 9620.85,3291.69 9508.71,3543 C9395.12,3797.56 9609.12,3974.77 9401.71,4161 C9246.46,4300.4 8640.87,4109.19 8464.71,4221 C8340.22,4300.01 8281.61,4477.26 8259.61,4563.7 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EvalConversionFactorCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.57,2848.45,9975.5977,2850.2904,9974.6148,2857.4342,9981.5871,2855.5938,9982.57,2848.45" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[6fcd565f451118be37059355ec97b80e]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EvalInitialConditionsCodeGen--><path codeLine="1515" d="M9974.08,2867 C9815.47,3054.9 9645.43,3294.57 9553.71,3543 C9506.04,3672.12 9597.11,4052.28 9512.71,4161 C9460.22,4228.61 9403.72,4178 9329.71,4221 C9192.05,4300.97 9060.38,4430.29 8979.13,4518.35 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EvalInitialConditionsCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.58,2856.97,9975.6478,2858.9563,9974.8151,2866.1191,9981.7473,2864.1329,9982.58,2856.97" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[77dff972659062949f9ef46772a65e32]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EvalRateRuleRatesCodeGen--><path codeLine="1518" d="M9974.53,2903.3 C9834.23,3086.72 9688.56,3312.8 9607.71,3543 C9590.59,3591.75 9548.26,4360.6 9537.32,4563.97 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EvalRateRuleRatesCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.48,2892.95,9975.654,2895.2751,9975.1749,2902.4703,9982.0009,2900.1452,9982.48,2892.95" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[7c4e6f064b45982c9e4a06ccebfd394a]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EvalReactionRatesCodeGen--><path codeLine="1521" d="M9979.54,3417.33 C9969.31,3459.48 9960.26,3501.49 9952.71,3543 C9916.37,3742.67 9936.23,4380.98 9942.83,4563.7 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EvalReactionRatesCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.68,3404.54,9977.3649,3409.4134,9979.8192,3416.194,9985.1343,3411.3206,9982.68,3404.54" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a1cfd421ff2ed1f083c1d7eb59a29396]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EvalVolatileStoichCodeGen--><path codeLine="1524" d="M10008.57,3496.29 C10005.77,3511.93 10003.14,3527.51 10000.71,3543 C9979.38,3678.67 9923.85,4047.19 10000.71,4161 C10040.66,4220.16 10094.3,4175.99 10149.71,4221 C10262.48,4312.61 10344.83,4465.64 10384.72,4550.87 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EvalVolatileStoichCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10010.97,3483.14,10005.9597,3488.3262,10008.8199,3494.9458,10013.8302,3489.7596,10010.97,3483.14" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0ba97fbebfc9309b0f226961bfd2842a]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EventAssignCodeGen--><path codeLine="1527" d="M10710.63,2653.18 C11041.64,2823.12 11505.64,3122.69 11712.71,3543 C11743.05,3604.6 11757.98,4109.37 11712.71,4161 C11645.47,4237.68 11344.82,4167.97 11257.71,4221 C11123.46,4302.71 11038.37,4478.25 11003.23,4563.93 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EventAssignCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.91,2647.19,10702.4353,2653.4806,10709.5979,2652.646,10706.0726,2646.3553,10698.91,2647.19" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[75c4345c75e409db43df65751cdb8930]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EventQueue--><path codeLine="1530" d="M10707.43,2918.87 C10868.15,3109.05 11058.17,3336.02 11226.71,3543 C11282.51,3611.53 11344.17,3689.71 11391.41,3750.16 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EventQueue" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.83,2908.7,10699.6456,2915.8648,10706.573,2917.8676,10705.7574,2910.7028,10698.83,2908.7" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[71ab5b6ee6ec5d79247ec99a9de5685c]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.EventTriggerCodeGen--><path codeLine="1533" d="M10710.66,2648.54 C11047.45,2816.76 11523.5,3116.57 11735.71,3543 C11796.89,3665.95 11764.73,4026.77 11735.71,4161 C11702.03,4316.81 11609.97,4483.47 11561.49,4563.94 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.EventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.74,2642.61,10702.3331,2648.8622,10709.4863,2647.9502,10705.8932,2641.698,10698.74,2642.61" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[86ec2774092330a490f8c7c6d8eecad0]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetBoundarySpeciesAmountCodeGen--><path codeLine="1536" d="M10711.43,2557.94 C11236.58,2674.3 12197.72,2956.1 12778.71,3543 C13080.16,3847.52 13191.29,4384.32 13220.29,4557.48 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.72,2555.14,10703.7181,2560.338,10710.4386,2557.7236,10705.4405,2552.5256,10698.72,2555.14" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b5003c1e87eeb9ba20d3f62b95496230]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetBoundarySpeciesConcentrationCodeGen--><path codeLine="1539" d="M10711.85,2570.39 C11249.63,2703.14 12257.31,3006.12 12954.71,3543 C13338.55,3838.49 13607.47,4382.42 13687.18,4557.29 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.84,2567.19,10703.712,2572.5063,10710.4933,2570.0538,10705.6212,2564.7375,10698.84,2567.19" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[6ca460de0f3f98c06448e1c1681c693f]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetCompartmentInitVolumeCodeGen--><path codeLine="1542" d="M10711.84,2505.36 C11539.04,2556.56 13577.51,2759.08 15056.71,3543 C15445.37,3748.98 15502.74,3877.66 15777.71,4221 C15865.95,4331.18 15943.93,4478.29 15983.06,4557.27 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.85,2504.56,10704.5924,2508.9218,10710.8272,2505.2987,10705.0848,2500.9369,10698.85,2504.56" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[14a54925db1c5dc6540639ceccf619b8]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetCompartmentVolumeCodeGen--><path codeLine="1545" d="M10711.73,2574.42 C11281.25,2716.95 12392.1,3037.66 13222.71,3543 C13603.5,3774.67 13683.93,3872.41 13961.71,4221 C14048.93,4330.45 14123.07,4478.17 14159.87,4557.36 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.79,2571.19,10703.6436,2576.5232,10710.4333,2574.0942,10705.5797,2568.761,10698.79,2571.19" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2add818114e14a84a2f8bef7a0d3292c]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetEventDelayCodeGen--><path codeLine="1548" d="M10710.81,2653.5 C11046.57,2824.42 11524.23,3125.33 11761.71,3543 C11829.94,3663 11792.63,4026.73 11824.71,4161 C11858.32,4301.67 11925.31,4457.35 11965.66,4544.38 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetEventDelayCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.93,2647.47,10702.4769,2653.7485,10709.6366,2652.8892,10706.0897,2646.6107,10698.93,2647.47" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b276e796b21eee23fc68117badc8af8d]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetEventPriorityCodeGen--><path codeLine="1551" d="M10711.63,2535.67 C11244.95,2625.64 12211.17,2876.41 12638.71,3543 C12786.99,3774.2 12724.16,3899.97 12638.71,4161 C12628.42,4192.43 12612.09,4192.86 12594.71,4221 C12525.38,4333.25 12458.22,4472.21 12421.78,4550.92 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetEventPriorityCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.72,2533.51,10703.979,2538.4439,10710.556,2535.4871,10705.297,2530.5532,10698.72,2533.51" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[471beeda3ceafadc74ab46464ede896e]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetEventTriggerCodeGen--><path codeLine="1554" d="M10711.77,2538.58 C11246.53,2632.2 12221.19,2887.49 12691.71,3543 C12916.7,3856.45 12845.46,4361.51 12809.72,4544.24 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetEventTriggerCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.83,2536.33,10704.055,2541.2999,10710.6522,2538.3883,10705.4272,2533.4184,10698.83,2536.33" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[a6ba47f54d69635cef973f963998b530]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetFloatingSpeciesAmountCodeGen--><path codeLine="1557" d="M10711.67,2533.11 C11621.05,2650.09 13924.42,2995.08 14436.71,3543 C14711.62,3837.03 14667.52,4382.51 14644.94,4557.46 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.71,2531.44,10704.1508,2536.1726,10710.612,2532.9706,10705.1712,2528.238,10698.71,2531.44" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[b14ecf67f5a3ae5bd219f9dbb75caa6a]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetFloatingSpeciesConcentrationCodeGen--><path codeLine="1560" d="M10712.12,2541.59 C11625.5,2678.29 13950.76,3065.34 14555.71,3543 C14906.5,3819.98 15058.9,4379.18 15099.83,4557.22 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10699.11,2539.65,10704.4503,2544.4958,10710.9772,2541.4301,10705.637,2536.5843,10699.11,2539.65" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[f4dada6cea807f93219d34f913b32944]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetFloatingSpeciesInitAmountCodeGen--><path codeLine="1563" d="M10712.3,2507.11 C11574.83,2562.56 13763.5,2774.34 15394.71,3543 C15830.9,3748.54 15923.84,3858.41 16241.71,4221 C16335.68,4328.19 16414.25,4477.46 16452.91,4557.33 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10699.07,2506.27,10704.8031,2510.6439,10711.0456,2507.0341,10705.3125,2502.6602,10699.07,2506.27" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[0b14d72cac6cef9267fec373d74f4725]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetFloatingSpeciesInitConcentrationCodeGen--><path codeLine="1566" d="M10711.96,2496.48 C11944.17,2530.79 15870.01,2705.08 16745.71,3543 C17038.53,3823.19 16999.43,4380.25 16978.38,4557.49 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.93,2496.12,10704.8178,2500.2834,10710.9255,2496.4499,10705.0377,2492.2865,10698.93,2496.12" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c5b80515d960f98fe2ec4e473e3f140e]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetGlobalParameterCodeGen--><path codeLine="1569" d="M10711.9,2501.2 C11511.26,2543.91 13431.44,2730.25 14770.71,3543 C15194.97,3800.47 15467.33,4376.43 15544.88,4557.45 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.75,2500.5,10704.5305,2504.8112,10710.7333,2501.1335,10704.9528,2496.8223,10698.75,2500.5" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[2fafc684e7435050d3240064f6c14f39]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.GetGlobalParameterInitValueCodeGen--><path codeLine="1572" d="M10711.92,2506.08 C11942.37,2570.71 15866.15,2829.66 16874.71,3543 C17244.68,3804.67 17404.31,4377.19 17446.64,4557.48 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.GetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10698.9,2505.4,10704.6855,2509.7045,10710.884,2506.0196,10705.0985,2501.7152,10698.9,2505.4" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[09f2187087c7c2203b53f656e1b90c26]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.LLVMModelData--><path codeLine="1575" d="M9974.33,3077.49 C9841.85,3238.92 9677,3393.87 9485.71,3483 C9220.31,3606.66 4484.53,3426.97 4215.71,3543 C4151.94,3570.52 4095.13,3619.03 4048.71,3669.52 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.LLVMModelData" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="9982.61,3067.35,9975.7177,3069.4704,9975.0241,3076.648,9981.9164,3074.5277,9982.61,3067.35" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ad049fb85f8ee3517178df2557413a56]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.LLVMModelDataSymbols--><path codeLine="1578" d="M10711.96,2512.99 C11958.79,2600.32 15980.58,2924.81 17100.71,3543 C17450.69,3736.15 17551.46,3846.67 17691.71,4221 C17722.35,4302.78 17753.21,4944.99 17691.71,5007 C17619.77,5079.53 10438.68,5060.93 10336.71,5067 C7513.18,5234.98 4121.41,5710.49 3095.94,5860.25 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.LLVMModelDataSymbols" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#FFFFFF" points="10698.78,2512.07,10704.4839,2516.482,10710.7503,2512.9137,10705.0464,2508.5018,10698.78,2512.07" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d60c9695aed68cebffdd18b6d6d62f55]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.ModelResources--><path codeLine="1581" d="M10340.71,3496.52 C10340.71,3512.3 10340.71,3527.78 10340.71,3542.9 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.ModelResources" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="10340.71,3483.19,10336.71,3489.19,10340.71,3495.19,10344.71,3489.19,10340.71,3483.19" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[50d80bc983cb877853eef6b886f93c3e]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetBoundarySpeciesAmountCodeGen--><path codeLine="1584" d="M9974.33,3077.49 C9841.85,3238.92 9677,3393.87 9485.71,3483 C9353.36,3544.67 4344.86,3453.23 4229.71,3543 C4005.68,3717.65 4269.43,3962.02 4066.71,4161 C3986.39,4239.83 3911.12,4153.99 3820.71,4221 C3704.12,4307.41 3635.47,4471.35 3605.94,4557.28 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetBoundarySpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.61,3067.34,9975.718,3069.4615,9975.0255,3076.6392,9981.9175,3074.5178,9982.61,3067.34" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[450eed4866d5a1024f426786e2bc323c]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetBoundarySpeciesConcentrationCodeGen--><path codeLine="1587" d="M9974.29,3077.42 C9841.81,3238.84 9676.97,3393.81 9485.71,3483 C9360.05,3541.6 4608.95,3464.44 4494.71,3543 C4449.42,3574.14 4168.1,4341.98 4089.87,4557.32 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetBoundarySpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.57,3067.27,9975.678,3069.3915,9974.9855,3076.5692,9981.8775,3074.4478,9982.57,3067.27" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[df71b3c0908de9d69cd7ad61b7aaa041]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetCompartmentInitVolumeCodeGen--><path codeLine="1590" d="M9974.39,3074.99 C9841.74,3236.69 9676.78,3392.43 9485.71,3483 C9241.05,3598.97 7282.6,3404.92 7049.71,3543 C6776.67,3704.89 6915.89,3936.28 6691.71,4161 C6654.29,4198.51 6626.26,4183.63 6588.71,4221 C6490.15,4319.06 6417.93,4467.57 6382.41,4550.81 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetCompartmentInitVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.68,3064.83,9975.788,3066.9515,9975.0955,3074.1292,9981.9875,3072.0078,9982.68,3064.83" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[16b95715874b58c4b14b63ef5a0f7e7b]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetCompartmentVolumeCodeGen--><path codeLine="1593" d="M9974.26,3077.35 C9841.78,3238.77 9676.94,3393.75 9485.71,3483 C9366.26,3538.75 4841.58,3458.15 4740.71,3543 C4431.04,3803.48 4499.48,4376.8 4530.15,4557.39 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetCompartmentVolumeCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.54,3067.2,9975.648,3069.3215,9974.9555,3076.4992,9981.8475,3074.3778,9982.54,3067.2" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[54e598f9c8bafbf068ce86be55d16e26]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetFloatingSpeciesAmountCodeGen--><path codeLine="1596" d="M9974.36,3076.67 C9841.82,3238.19 9676.93,3393.4 9485.71,3483 C9293.21,3573.2 5845.77,3440.17 5659.71,3543 C5554.49,3601.15 5137.87,4346.22 5021.21,4557.49 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetFloatingSpeciesAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.64,3066.52,9975.748,3068.6415,9975.0555,3075.8192,9981.9475,3073.6978,9982.64,3066.52" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[e39843c694db73f2ba34bafdc9b180e8]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetFloatingSpeciesConcentrationCodeGen--><path codeLine="1599" d="M9974.21,3076.35 C9841.66,3237.85 9676.81,3393.13 9485.71,3483 C9158.87,3636.7 6558.65,3381.28 6235.71,3543 C5794.58,3763.9 5549.28,4370.46 5482.53,4557.4 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetFloatingSpeciesConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.49,3066.2,9975.5977,3068.3204,9974.9041,3075.498,9981.7964,3073.3777,9982.49,3066.2" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[c553c181f8f039c2ffc513b0c187003b]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetFloatingSpeciesInitAmountCodeGen--><path codeLine="1602" d="M9974.22,3065.25 C9840.93,3227.9 9675.64,3386.62 9485.71,3483 C9334.04,3559.96 8885.83,3494.84 8722.71,3543 C8168.84,3706.51 8130.47,3987.31 7579.71,4161 C7358.68,4230.7 7256.68,4095.71 7061.71,4221 C6941.11,4298.49 6872.85,4461.2 6843,4550.7 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetFloatingSpeciesInitAmountCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.55,3055.03,9975.658,3057.1515,9974.9655,3064.3292,9981.8575,3062.2078,9982.55,3055.03" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[d13bf1ec220c730aee250ea880174eb6]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetFloatingSpeciesInitConcentrationCodeGen--><path codeLine="1605" d="M9974.21,3059.46 C9840.5,3222.69 9674.98,3383.22 9485.71,3483 C9270.14,3596.64 9131.18,3391 8940.71,3543 C8713.52,3724.31 8959.05,3986.34 8726.71,4161 C8520.74,4315.83 7791.84,4092.11 7568.71,4221 C7441.61,4294.42 7367.26,4459.98 7334.61,4550.68 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetFloatingSpeciesInitConcentrationCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.56,3049.2,9975.6698,3051.3273,9974.9835,3058.5057,9981.8736,3056.3784,9982.56,3049.2" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[ae7671f5ea857f610a600870abb342b6]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetGlobalParameterCodeGen--><path codeLine="1608" d="M9974.3,3075.68 C9841.71,3237.28 9676.8,3392.79 9485.71,3483 C9204.51,3615.75 6963.17,3398.72 6687.71,3543 C6387.19,3700.41 6495.27,3937.9 6239.71,4161 C6197.17,4198.14 6167.64,4181.07 6127.71,4221 C6028.9,4319.81 5964.83,4474.86 5935.78,4557.22 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetGlobalParameterCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.59,3065.52,9975.698,3067.6415,9975.0055,3074.8192,9981.8975,3072.6978,9982.59,3065.52" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[8c96578ae0d54f322c419a4f288bf293]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.SetGlobalParameterInitValueCodeGen--><path codeLine="1611" d="M9974.33,2965.16 C9831.04,3137.44 9659.5,3327.61 9485.71,3483 C9450.42,3514.55 9431.75,3510.1 9397.71,3543 C9152.83,3779.66 9243.24,3997.13 8944.71,4161 C8766.86,4258.63 8206.66,4114.93 8033.71,4221 C7911.72,4295.81 7845.84,4460.4 7817.65,4550.69 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.SetGlobalParameterInitValueCodeGen" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="9982.65,2955.15,9975.7383,2957.2064,9974.9782,2964.3773,9981.8898,2962.3209,9982.65,2955.15" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[96bbf48ea53b2797be4b7ae50b2ba502]
reverse link rrllvm.LLVMModelDataSymbols to rrllvm.LLVMModelDataSymbols::SpeciesReferenceInfo--><path codeLine="1620" d="M2787.71,6762.32 C2787.71,6789.93 2787.71,6813.78 2787.71,6832.77 " fill="none" id="rrllvm.LLVMModelDataSymbols-backto-rrllvm.LLVMModelDataSymbols::SpeciesReferenceInfo" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="2787.71" cy="6755.08" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2787.71" x2="2787.71" y1="6763.08" y2="6747.08"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2779.71" x2="2795.71" y1="6755.08" y2="6755.08"/><!--MD5=[88a12abf94aa9d461bfcfd936490fca3]
reverse link rrllvm.LLVMModelDataSymbols to rrllvm.LLVMModelDataSymbols::SpeciesReferenceType--><path codeLine="1623" d="M3085.67,6761.56 C3095.42,6789.49 3103.83,6813.61 3110.52,6832.77 " fill="none" id="rrllvm.LLVMModelDataSymbols-backto-rrllvm.LLVMModelDataSymbols::SpeciesReferenceType" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="3083.247" cy="6754.6329" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="3085.8841" x2="3080.61" y1="6762.1858" y2="6747.08"/><line style="stroke:#A80036;stroke-width:1.0;" x1="3075.6941" x2="3090.7999" y1="6757.2699" y2="6751.9959"/><!--MD5=[62b0f098b4559c21c86132ceb14d3ea6]
reverse link rrllvm.LLVMModelDataSymbols to rrllvm.LLVMModelDataSymbols::SymbolIndexType--><path codeLine="1626" d="M2502.06,6761.44 C2495.61,6780.72 2489.76,6798.19 2484.65,6813.46 " fill="none" id="rrllvm.LLVMModelDataSymbols-backto-rrllvm.LLVMModelDataSymbols::SymbolIndexType" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="2504.331" cy="6754.6664" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2501.7921" x2="2506.87" y1="6762.2528" y2="6747.08"/><line style="stroke:#A80036;stroke-width:1.0;" x1="2496.7446" x2="2511.9174" y1="6752.1274" y2="6757.2054"/><!--MD5=[32e8286687888b22483c6aa013d6fc83]
reverse link rrllvm.LLVMModelSymbols to rrllvm.LLVMModelSymbols::ReactionSymbols--><path codeLine="1629" d="M964.27,4818.27 C1024.17,4891.57 1084.62,4978.23 1123.71,5067 C1251.38,5356.96 1264.09,5750.04 1264.86,5869.86 " fill="none" id="rrllvm.LLVMModelSymbols-backto-rrllvm.LLVMModelSymbols::ReactionSymbols" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="959.7499" cy="4812.7919" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="964.8399" x2="954.66" y1="4818.9638" y2="4806.62"/><line style="stroke:#A80036;stroke-width:1.0;" x1="953.578" x2="965.9219" y1="4817.8819" y2="4807.702"/><!--MD5=[a8d9da9eac1cd889a7d075423c8835c6]
reverse link rrllvm.LLVMModelSymbols to rrllvm.LLVMModelSymbols::SpeciesReferenceType--><path codeLine="1632" d="M801.72,4821.37 C849.19,5137.25 936.74,5719.89 959.3,5869.98 " fill="none" id="rrllvm.LLVMModelSymbols-backto-rrllvm.LLVMModelSymbols::SpeciesReferenceType" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="800.679" cy="4814.4412" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="801.8679" x2="799.49" y1="4822.3523" y2="4806.53"/><line style="stroke:#A80036;stroke-width:1.0;" x1="792.7678" x2="808.5901" y1="4815.6301" y2="4813.2522"/><!--MD5=[355aa9de7537663e55bf28f9235b4ce6]
reverse link rrllvm.RR_DECLSPECLLVMExecutableModel to rrllvm.RR_DECLSPECLLVMExecutableModel::empty--><path codeLine="1635" d="M9976.86,3352.17 C9892.47,3552.49 9817.64,3730.09 9784.63,3808.46 " fill="none" id="rrllvm.RR_DECLSPECLLVMExecutableModel-backto-rrllvm.RR_DECLSPECLLVMExecutableModel::empty" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="9979.5828" cy="3345.6919" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="9976.4756" x2="9982.69" y1="3353.0639" y2="3338.32"/><line style="stroke:#A80036;stroke-width:1.0;" x1="9972.2109" x2="9986.9548" y1="3342.5848" y2="3348.7991"/><!--MD5=[10962a9d22de92384168fea26d7d4e65]
reverse link rrllvm.SymbolForest to rrllvm.SymbolForest::ConstIterator--><path codeLine="1638" d="M10623.71,5998.43 C10623.71,6189.24 10623.71,6629.96 10623.71,6806.68 " fill="none" id="rrllvm.SymbolForest-backto-rrllvm.SymbolForest::ConstIterator" style="stroke:#A80036;stroke-width:1.0;"/><ellipse cx="10623.71" cy="5991.21" fill="#FFFFFF" rx="8" ry="8" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.0;" x1="10623.71" x2="10623.71" y1="5999.21" y2="5983.21"/><line style="stroke:#A80036;stroke-width:1.0;" x1="10615.71" x2="10631.71" y1="5991.21" y2="5991.21"/><!--MD5=[da4231c10e2cc45a62b7a6aca7f97ed7]
link rrllvm.CodeGen to rrllvm.Event--><!--MD5=[4b27d92f9082fa3f0235c7c207f76399]
link rrllvm.Event to rrllvm.LLVMException--><!--MD5=[5e7b531e90714ca4562f72e30397d39e]
link rrllvm.CodeGen to rrllvm.RR_DECLSPECLLVMCompiler--><!--MD5=[357fd617125fd6e404ec2278fd2211fd]
link rrllvm.RR_DECLSPECLLVMCompiler to rrllvm.RR_DECLSPECLLVMModelGenerator--><!--MD5=[9511342a5be0d87c5eef8a9a6425a753]
link rrllvm.RR_DECLSPECLLVMModelGenerator to rrllvm.EventAtributes--><!--MD5=[84f387fd169cdb02e3a4a23933da90f6]
link rrllvm.RR_DECLSPECLLVMCompiler to rrllvm.ModelDataFields--><!--MD5=[2f89fca426fb76f3c79a6acede6b4af9]
@startuml





/' Objects '/

namespace rrllvm {
	class ASTNodeCodeGen {
		+ASTNodeCodeGen(llvm::IRBuilder<>& builder, LoadSymbolResolver& resolver, const ModelGeneratorContext& ctx, llvm::Value* modelData)
		+~ASTNodeCodeGen()
		-resolver : LoadSymbolResolver&
		-scalar_mode_ : bool
		-ctx : const ModelGeneratorContext&
		-builder : llvm::IRBuilder<>&
		-getModule() : llvm::Module*
		-applyArithmeticCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-applyBinaryRelationalCodeGen(const libsbml::ASTNode* ast, llvm::Value* left, llvm::Value* right) : llvm::Value*
		-applyLogicalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-applyRelationalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-applyScalarRelationalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-binaryExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		+codeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-delayExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-distribCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-functionCallCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-integerCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-intrinsicCallCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-minmaxCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-modelData : llvm::Value*
		-nameExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-notImplemented(const libsbml::ASTNode* ast) : llvm::Value*
		-piecewiseCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-realExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-toBoolean(llvm::Value* value) : llvm::Value*
		-toDouble(llvm::Value* value) : llvm::Value*
	}

	class ASTNodeCodeGenScalarTicket {
		+ASTNodeCodeGenScalarTicket(ASTNodeCodeGen& gen, bool val, std::string n)
		+~ASTNodeCodeGenScalarTicket()
		-z_ : ASTNodeCodeGen&
		-v_ : bool
		-n_ : std::string
	}

	class ASTNodeFactory {
		-ASTNodeFactory(const ASTNodeFactory &)
		+ASTNodeFactory()
		+~ASTNodeFactory()
		-operator=(const ASTNodeFactory& rhs) : ASTNodeFactory&
		+create(libsbml::ASTNodeType_t type) : libsbml::ASTNode*
		+create(libsbml::Token_t* token) : libsbml::ASTNode*
		+create(const libsbml::ASTNode& orig) : libsbml::ASTNode*
		-nodes : std::list<libsbml::ASTNode*>
	}

	class AssignmentRuleEvaluator {
		+AssignmentRuleEvaluator(SymbolForest& symbols)
		#symbols : SymbolForest&
		+visit(const libsbml::AssignmentRule& x) : bool
		+evaluate(const libsbml::Model& model) : void
	}

	abstract class CodeGen {
		#~CodeGen()
		+{abstract} codeGen() : llvm::Value*
	}

	abstract class CodeGenBase <template<typename FunctionPtrType>> {
		#CodeGenBase(const ModelGeneratorContext& mgc)
		#~CodeGenBase()
		#dataSymbols : const LLVMModelDataSymbols&
		#modelSymbols : const LLVMModelSymbols&
		#modelGenContext : const ModelGeneratorContext&
		#model : const libsbml::Model*
		#options : const unsigned
		#codeGenHeader(const char* functionName, llvm::Type* retType, llvm::Type* (& argTypes ), const char* (& argNames ), llvm::Value* (& args )) : llvm::BasicBlock*
		#codeGenVoidModelDataHeader(const char* functionName, llvm::Value*& modelData) : llvm::BasicBlock*
		#engine : llvm::ExecutionEngine&
		+createFunction() : llvm::Function*
		#function : llvm::Function*
		#verifyFunction() : llvm::Function*
		#builder : llvm::IRBuilder<>&
		#context : llvm::LLVMContext&
		#module : llvm::Module*
		#{abstract} codeGen() : llvm::Value*
		#functionPassManager : llvm::legacy::FunctionPassManager*
	}

	class EvalConversionFactorCodeGen {
		+EvalConversionFactorCodeGen(const ModelGeneratorContext& mgc)
		+~EvalConversionFactorCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class EvalInitialConditionsCodeGen {
		+EvalInitialConditionsCodeGen(const ModelGeneratorContext& mgc)
		+~EvalInitialConditionsCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
		-codeGenCompartments(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenGlobalParameters(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenInitCompartments(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenInitGlobalParameters(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenInitSpecies(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenSpecies(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenStoichiometry(llvm::Value* modelData, ModelDataStoreSymbolResolver& modelDataResolver, LoadSymbolResolver& initialValueResolver) : void
	}

	class EvalRateRuleRatesCodeGen {
		+EvalRateRuleRatesCodeGen(const ModelGeneratorContext& mgc)
		+~EvalRateRuleRatesCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class EvalReactionRatesCodeGen {
		+EvalReactionRatesCodeGen(const ModelGeneratorContext& mgc)
		+~EvalReactionRatesCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class EvalVolatileStoichCodeGen {
		+EvalVolatileStoichCodeGen(const ModelGeneratorContext& mgc)
		+~EvalVolatileStoichCodeGen()
		-isConstantASTNode(const libsbml::ASTNode* ast) : bool {query}
		-isConstantSpeciesReference(const libsbml::SimpleSpeciesReference* ref) : bool {query}
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class Event {
		+Event(LLVMExecutableModel &, unsigned int id)
		+Event(const Event& other)
		+~Event()
		+operator=(const Event& rhs) : Event&
		+model : LLVMExecutableModel&
		+isCurrent() : bool {query}
		+isExpired() : bool {query}
		+isPersistent() : bool {query}
		+isRipe() : bool {query}
		+isTriggered() : bool {query}
		+operator<(const Event& a, const Event& b) : bool
		+useValuesFromTriggerTime() : bool {query}
		+assignTime : double
		+delay : double
		+getPriority() : double {query}
		+data : double*
		+dataSize : unsigned int
		+id : unsigned int
		+assign() : void {query}
	}

	class EventAssignCodeGen {
		+EventAssignCodeGen(const ModelGeneratorContext& mgc)
		+~EventAssignCodeGen()
		+eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool
		+{static} FunctionName : static const char*
	}

	class EventCodeGenBase <template<typename Derived>> {
		+EventCodeGenBase(const ModelGeneratorContext& mgc)
		+~EventCodeGenBase()
		+eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool
		+codeGen() : llvm::Value*
	}

	class EventQueue {
		-comp : _Compare
		-sequence : _Sequence
		+applyEvents() : bool
		+eraseExpiredEvents() : bool
		+hasCurrentEvents() : bool
		+top() : const_reference
		+getNextPendingEventTime() : double
		+operator<<(std::ostream& stream, const EventQueue& queue) : std :: ostream&
		+size() : unsigned int {query}
		+loadState(std::istream& in, LLVMExecutableModel& model) : void
		+push(const Event& e) : void
		+saveState(std::ostream& out) : void
	}

	class EventTriggerCodeGen {
		+EventTriggerCodeGen(const ModelGeneratorContext& mgc)
		+~EventTriggerCodeGen()
		+eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool
		+{static} FunctionName : static const char*
	}

	class FunctionResolver {
		+FunctionResolver(LoadSymbolResolver& parentResolver, llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~FunctionResolver()
		-parentResolver : LoadSymbolResolver&
		-modelGenContext : const ModelGeneratorContext&
		-model : const libsbml::Model*
		-builder : llvm::IRBuilder<>&
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
		-symbols : std::map<std::string, llvm::Value*>*
		+recursiveSymbolPop() : void
		+recursiveSymbolPush(const std::string& symbol) : void
	}

	class GetBoundarySpeciesAmountCodeGen {
		+GetBoundarySpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~GetBoundarySpeciesAmountCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetBoundarySpeciesConcentrationCodeGen {
		+GetBoundarySpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~GetBoundarySpeciesConcentrationCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetCompartmentInitVolumeCodeGen {
		+GetCompartmentInitVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~GetCompartmentInitVolumeCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetCompartmentVolumeCodeGen {
		+GetCompartmentVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~GetCompartmentVolumeCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetEventDelayCodeGen {
		+GetEventDelayCodeGen(const ModelGeneratorContext& mgc)
		+~GetEventDelayCodeGen()
		+getMath(const libsbml::Event*) : libsbml::ASTNode*
		-node : libsbml::ASTNode*
		+createRet(llvm::Value* value) : llvm::Value*
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class GetEventPriorityCodeGen {
		+GetEventPriorityCodeGen(const ModelGeneratorContext& mgc)
		+~GetEventPriorityCodeGen()
		+getMath(const libsbml::Event*) : libsbml::ASTNode*
		-node : libsbml::ASTNode*
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class GetEventTriggerCodeGen {
		+GetEventTriggerCodeGen(const ModelGeneratorContext& mgc)
		+~GetEventTriggerCodeGen()
		+getMath(const libsbml::Event*) : libsbml::ASTNode*
		+getRetType() : llvm::Type*
		+createRet(llvm::Value*) : llvm::Value*
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class GetEventValueCodeGenBase <template<typename Derived, typename FunctionPtrType=GetEventValueCodeGenBase_FunctionPtr>> {
		+GetEventValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~GetEventValueCodeGenBase()
		+getRetType() : llvm::Type*
		+codeGen() : llvm::Value*
		+createRet(llvm::Value* value) : llvm::Value*
	}

	class GetFloatingSpeciesAmountCodeGen {
		+GetFloatingSpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesAmountCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetFloatingSpeciesConcentrationCodeGen {
		+GetFloatingSpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesConcentrationCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetFloatingSpeciesInitAmountCodeGen {
		+GetFloatingSpeciesInitAmountCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesInitAmountCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetFloatingSpeciesInitConcentrationCodeGen {
		+GetFloatingSpeciesInitConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesInitConcentrationCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetGlobalParameterCodeGen {
		+GetGlobalParameterCodeGen(const ModelGeneratorContext& mgc)
		+~GetGlobalParameterCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetGlobalParameterInitValueCodeGen {
		+GetGlobalParameterInitValueCodeGen(const ModelGeneratorContext& mgc)
		+~GetGlobalParameterInitValueCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetInitialValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+GetInitialValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~GetInitialValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	class GetValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+GetValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~GetValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	class KineticLawParameterResolver {
		+KineticLawParameterResolver(LoadSymbolResolver& parentResolver, const libsbml::KineticLaw& kineticLaw, llvm::IRBuilder<>& builder)
		+~KineticLawParameterResolver()
		-parentResolver : LoadSymbolResolver&
		-kineticLaw : const libsbml::KineticLaw&
		-builder : llvm::IRBuilder<>&
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		+recursiveSymbolPop() : void
		+recursiveSymbolPush(const std::string& symbol) : void
	}

	class LLVMException {
		+LLVMException(const std::string& what)
		+LLVMException(const std::string& what, const std::string& where)
	}

	class LLVMModelDataIRBuilderTesting {
		+LLVMModelDataIRBuilderTesting(LLVMModelDataSymbols const &, llvm::IRBuilder<> &)
		+symbols : LLVMModelDataSymbols const&
		+createDispChar(llvm::Value* doubleVal) : llvm::CallInst*
		+createDispDouble(llvm::Value* doubleVal) : llvm::CallInst*
		+createDispInt(llvm::Value* intVal) : llvm::CallInst*
		+{static} getDispCharDecl(llvm::Module* module) : llvm::Function*
		+{static} getDispDoubleDecl(llvm::Module* module) : llvm::Function*
		+{static} getDispIntDecl(llvm::Module* module) : llvm::Function*
		+builder : llvm::IRBuilder<>&
		+createFloatingSpeciesAccessors(llvm::Module* module, const std::string id) : std::pair<llvm::Function* , llvm::Function*>
		+createAccessors(llvm::Module* module) : void
		+test(llvm::Module* module, llvm::IRBuilder<>* build, llvm::ExecutionEngine* engine) : void
	}

	class LLVMModelDataSymbols {
		+LLVMModelDataSymbols()
		+LLVMModelDataSymbols(libsbml::Model const* model, unsigned options)
		+LLVMModelDataSymbols(std::istream& in)
		+~LLVMModelDataSymbols()
		+getNamedSpeciesReferenceInfo(const std::string& id) : SpeciesReferenceInfo& {query}
		-namedSpeciesReferenceInfo : StringRefInfoMap
		-boundarySpeciesMap : StringUIntMap
		-compartmentsMap : StringUIntMap
		-conservedMoietyDepSpecies : StringUIntMap
		-eventIds : StringUIntMap
		-floatingSpeciesMap : StringUIntMap
		-globalParametersMap : StringUIntMap
		-initBoundarySpeciesMap : StringUIntMap
		-initCompartmentsMap : StringUIntMap
		-initFloatingSpeciesMap : StringUIntMap
		-initGlobalParametersMap : StringUIntMap
		-rateRules : StringUIntMap
		-reactionsMap : StringUIntMap
		-conservedMoietyIndSpecies : StringUIntVectorMap
		-floatingSpeciesToConservedMoietyIdMap : UIntUIntMap
		+hasAssignmentRule(const std::string& id) : bool {query}
		+hasInitialAssignmentRule(const std::string& id) : bool {query}
		+hasRateRule(const std::string& id) : bool {query}
		+isBoundarySpecies(const std::string& id) : bool {query}
		+isConservedMoietyParameter(unsigned int id) : bool {query}
		+isConservedMoietySpecies(const std::string& symbol) : bool {query}
		+isConservedMoietySpecies(unsigned int id, unsigned int result) : bool {query}
		+isIndependentBoundarySpecies(const std::string& id) : bool {query}
		+isIndependentCompartment(const std::string& id) : bool {query}
		+isIndependentElement(const std::string& id) : bool {query}
		+isIndependentFloatingSpecies(const std::string& id) : bool {query}
		+isIndependentGlobalParameter(const std::string& id) : bool {query}
		+isIndependentInitCompartment(const std::string& symbol) : bool {query}
		+isIndependentInitElement(const std::string& symbol) : bool {query}
		+isIndependentInitFloatingSpecies(const std::string& symbol) : bool {query}
		+isIndependentInitGlobalParameter(const std::string& symbol) : bool {query}
		+isIndependentInitGlobalParameter(size_t id) : bool {query}
		+isNamedSpeciesReference(const std::string& id) : bool {query}
		+isRateRuleGlobalParameter(unsigned int gid) : bool {query}
		-isValidFloatingSpeciesReference(const libsbml::SimpleSpeciesReference*, const std::string& reacOrProd) : bool
		+{static} getFieldName(ModelDataFields field) : char*
		+getBoundarySpeciesIndex(std::string const &) : int {query}
		+getCompartmentIndex(std::string const &) : int {query}
		+getCompartmentIndexForFloatingSpecies(size_t floatIndex) : int {query}
		+getCompartmentInitIndex(const std::string& symbol) : int {query}
		+getConservedMoietyGlobalParameterIndex(unsigned int cmIndex) : int {query}
		+getConservedMoietyIndex(const std::string& name) : int {query}
		+getDepSpeciesIndexForConservedMoietyId(std::string id) : int {query}
		+getEventIndex(const std::string& id) : int {query}
		+getFloatingSpeciesIndex(std::string const &, bool requireIndependent) : int {query}
		+getFloatingSpeciesInitIndex(const std::string& symbol) : int {query}
		+getGlobalParameterIndex(std::string const &) : int {query}
		+getGlobalParameterInitIndex(const std::string& symbol) : int {query}
		+getRateRuleIndex(std::string const &) : int {query}
		+getReactionIndex(std::string const &) : int {query}
		+getSymbolIndex(const std::string& name, int& result) : int {query}
		+getBoundarySpeciesSize() : size_t {query}
		+getCompartmentsSize() : size_t {query}
		+getConservedMoietySize() : size_t {query}
		+getEventBufferSize(size_t eventId) : size_t {query}
		+getFloatingSpeciesSize() : size_t {query}
		+getGlobalParametersSize() : size_t {query}
		+getIndependentBoundarySpeciesSize() : size_t {query}
		+getIndependentCompartmentSize() : size_t {query}
		+getIndependentFloatingSpeciesSize() : size_t {query}
		+getIndependentGlobalParameterSize() : size_t {query}
		+getInitBoundarySpeciesSize() : size_t {query}
		+getInitCompartmentSize() : size_t {query}
		+getInitFloatingSpeciesSize() : size_t {query}
		+getInitGlobalParameterSize() : size_t {query}
		+getRateRuleSize() : size_t {query}
		+getReactionSize() : size_t {query}
		-independentBoundarySpeciesSize : size_t
		-independentCompartmentSize : size_t
		-independentFloatingSpeciesSize : size_t
		-independentGlobalParameterSize : size_t
		+getStoichiometryIndx() : std::list<SpeciesReferenceInfo> {query}
		-assignmentRules : std::set<std::string>
		-conservedMoietySpeciesSet : std::set<std::string>
		-initAssignmentRules : std::set<std::string>
		+getConservedMoietyId(size_t indx) : std::string {query}
		+getEventId(size_t indx) : std::string {query}
		+getFloatingSpeciesId(size_t indx) : std::string {query}
		+getGlobalParameterId(size_t indx) : std::string {query}
		+getRateRuleId(size_t indx) : std::string {query}
		-modelName : std::string
		+getModelName() : std::string& {query}
		-stoichTypes : std::vector<SpeciesReferenceType>
		-conservedMoietyGlobalParameter : std::vector<bool>
		-globalParameterRateRules : std::vector<bool>
		-eventAssignmentsSize : std::vector<size_t>
		+getBoundarySpeciesIds() : std::vector<std::string> {query}
		+getCompartmentIds() : std::vector<std::string> {query}
		+getEventIds() : std::vector<std::string> {query}
		+getFloatingSpeciesIds() : std::vector<std::string> {query}
		+getGlobalParameterIds() : std::vector<std::string> {query}
		+getReactionIds() : std::vector<std::string> {query}
		-stoichIds : std::vector<std::string>
		-conservedMoietyGlobalParameterIndex : std::vector<uint>
		-floatingSpeciesCompartmentIndices : std::vector<uint>
		-stoichColIndx : std::vector<uint>
		-stoichRowIndx : std::vector<uint>
		+getIndSpeciesIndexForConservedMoietyId(std::string id) : std::vector<uint>& {query}
		+getStoichColIndx() : std::vector<uint>& {query}
		+getStoichRowIndx() : std::vector<uint>& {query}
		-eventAttributes : std::vector<unsigned char>
		+getEventAttributes() : std::vector<unsigned char>& {query}
		-independentInitBoundarySpeciesSize : unsigned int
		-independentInitCompartmentSize : unsigned int
		-independentInitFloatingSpeciesSize : unsigned int
		-independentInitGlobalParameterSize : unsigned int
		-displayCompartmentInfo() : void
		-initBoundarySpecies(const libsbml::Model*) : void
		-initCompartments(const libsbml::Model*) : void
		-initEvents(const libsbml::Model* model) : void
		-initFloatingSpecies(const libsbml::Model*, bool conservedMoieties) : void
		-initGlobalParameters(const libsbml::Model* model, bool conservedMoieties) : void
		-initReactions(const libsbml::Model* model) : void
		-loadBinarySpeciesReferenceInfo(std::istream &, SpeciesReferenceInfo &) : void
		+loadState(std::istream &) : void
		-loadStringRefInfoMap(std::istream &, StringRefInfoMap &) : void
		+print() : void {query}
		-saveBinarySpeciesReferenceInfo(std::ostream &, SpeciesReferenceInfo sri) : void {query}
		+saveState(std::ostream &) : void {query}
		-saveStringRefInfoMap(std::ostream &, const StringRefInfoMap &) : void {query}
		-setNamedSpeciesReferenceInfo(unsigned int row, unsigned int column, SpeciesReferenceType type) : void
	}

	class LLVMModelSymbols {
		+LLVMModelSymbols(libsbml::Model const* m, LLVMModelDataSymbols const& sym)
		+~LLVMModelSymbols()
		#nodes : ASTNodeFactory
		#assignmentRules : SymbolForest
		#initialAssignmentRules : SymbolForest
		#initialValues : SymbolForest
		#rateRules : SymbolForest
		+getAssigmentRules() : SymbolForest& {query}
		+getInitialAssignmentRules() : SymbolForest& {query}
		+getInitialValues() : SymbolForest& {query}
		+getRateRules() : SymbolForest& {query}
		#visit(const libsbml::Compartment& x) : bool
		#visit(const libsbml::Species& x) : bool
		#visit(const libsbml::AssignmentRule& x) : bool
		#visit(const libsbml::InitialAssignment& x) : bool
		#visit(const libsbml::RateRule& rule) : bool
		#visit(const libsbml::Reaction& x) : bool
		#visit(const libsbml::Rule& x) : bool
		#visit(const libsbml::Event& event) : bool
		-symbols : const LLVMModelDataSymbols&
		+createStoichiometryNode(int row, int col) : libsbml::ASTNode* {query}
		#getSpeciesReferenceStoichMath(const libsbml::SpeciesReference* reference) : libsbml::ASTNode*
		-model : libsbml::Model const*
		#reactions : std::vector<ReactionSymbols>
		#processElement(SymbolForest& currentSymbols, const libsbml::SBase* element, const libsbml::ASTNode* math) : void
		#processSpecies(SymbolForest& currentSymbols, const libsbml::Species* element, const libsbml::ASTNode* math) : void
	}

	abstract class LoadSymbolResolver {
		#~LoadSymbolResolver()
		+{abstract} loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		+popCacheBlock() : size_t
		+pushCacheBlock() : size_t
		+{abstract} recursiveSymbolPop() : void
		+{abstract} recursiveSymbolPush(const std::string& symbol) : void
	}

	class LoadSymbolResolverBase {
		#LoadSymbolResolverBase(const ModelGeneratorContext& ctx, llvm::Value* modelData)
		#symbolStack : StringStack
		#symbolCache : ValueMapStack
		#modelDataSymbols : const LLVMModelDataSymbols&
		#modelSymbols : const LLVMModelSymbols&
		#modelGenContext : const ModelGeneratorContext&
		#model : const libsbml::Model*
		#builder : llvm::IRBuilder<>&
		#cacheValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args, llvm::Value* value) : llvm::Value*
		+loadReactionRate(const libsbml::Reaction*) : llvm::Value*
		#modelData : llvm::Value*
		+popCacheBlock() : size_t
		+pushCacheBlock() : size_t
		+flushCache() : void
		+recursiveSymbolPop() : void
		+recursiveSymbolPush(const std::string& symbol) : void
	}

	class ModelDataIRBuilder {
		+ModelDataIRBuilder(llvm::Value* modelData, LLVMModelDataSymbols const &, llvm::IRBuilder<> &)
		-symbols : LLVMModelDataSymbols const&
		+{static} createCSRMatrixGetNZ(llvm::IRBuilder<> &, llvm::Value* csrPtr, llvm::Value* row, llvm::Value* col, const llvm::Twine& name) : llvm::CallInst*
		+{static} createCSRMatrixSetNZ(llvm::IRBuilder<> &, llvm::Value* csrPtr, llvm::Value* row, llvm::Value* col, llvm::Value* value, const llvm::Twine& name) : llvm::CallInst*
		+{static} getCSRMatrixGetNZDecl(llvm::Module* module) : llvm::Function*
		+{static} getCSRMatrixSetNZDecl(llvm::Module* module) : llvm::Function*
		-builder : llvm::IRBuilder<>&
		-{static} getModule(llvm::IRBuilder<> &, const char* func) : llvm::Module*
		+{static} createModelDataStructType(llvm::Module* module, llvm::ExecutionEngine* engine, LLVMModelDataSymbols const& symbols) : llvm::StructType*
		+{static} getCSRSparseStructType(llvm::Module* module, llvm::ExecutionEngine* engine) : llvm::StructType*
		+{static} getStructType(llvm::Module* module) : llvm::StructType*
		+createBoundSpeciesAmtGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createBoundSpeciesAmtLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createBoundSpeciesAmtStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createCompGEP(const std::string& id) : llvm::Value*
		+createCompLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createCompStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createFloatSpeciesAmtGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtRateGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtRateLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtRateStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createFloatSpeciesAmtStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createGEP(ModelDataFields field, const llvm::Twine& name) : llvm::Value*
		+createGEP(ModelDataFields field, unsigned index, const llvm::Twine& name) : llvm::Value*
		+createGlobalParamGEP(const std::string& id) : llvm::Value*
		+createGlobalParamLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createGlobalParamStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createInitCompGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitCompLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitCompStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createInitFloatSpeciesAmtGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitFloatSpeciesAmtLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitFloatSpeciesAmtStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createInitGlobalParamGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitGlobalParamLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitGlobalParamStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createLoad(ModelDataFields field, unsigned index, const llvm::Twine& name) : llvm::Value*
		+createRandomLoad() : llvm::Value*
		+createRateRuleRateGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleRateLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleRateStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createRateRuleValueGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleValueLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleValueStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createReactionRateLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createReactionRateStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createStoichiometryLoad(unsigned int row, unsigned int col, const llvm::Twine& name) : llvm::Value*
		+createStoichiometryStore(unsigned int row, unsigned int col, llvm::Value* value, const llvm::Twine& name) : llvm::Value*
		+createStore(ModelDataFields field, unsigned index, llvm::Value* value, const llvm::Twine& name) : llvm::Value*
		-modelData : llvm::Value*
		+{static} LLVMModelDataName : static const char*
		+{static} csr_matrixName : static const char*
		+{static} csr_matrix_get_nzName : static const char*
		+{static} csr_matrix_set_nzName : static const char*
		+{static} getModelDataSize(llvm::Module* module, llvm::ExecutionEngine* engine) : unsigned
		-validateStruct(llvm::Value* s, const char* funcName) : void
	}

	class ModelDataLoadSymbolResolver {
		+ModelDataLoadSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~ModelDataLoadSymbolResolver()
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
	}

	class ModelDataStoreSymbolResolver {
		+ModelDataStoreSymbolResolver(llvm::Value* modelData, const libsbml::Model* model, const LLVMModelSymbols& modelSymbols, const LLVMModelDataSymbols& modelDataSymbols, llvm::IRBuilder<>& builder, LoadSymbolResolver& resolver)
		+~ModelDataStoreSymbolResolver()
		-resolver : LoadSymbolResolver&
		-modelDataSymbols : const LLVMModelDataSymbols&
		-modelSymbols : const LLVMModelSymbols&
		-model : const libsbml::Model*
		-builder : llvm::IRBuilder<>&
		-modelData : llvm::Value*
		+storeSymbolValue(const std::string& symbol, llvm::Value* value) : llvm::Value*
	}

	class ModelGeneratorContext {
		+ModelGeneratorContext(std::string const& sbml, unsigned loadSBMLOptions)
		+ModelGeneratorContext(libsbml::SBMLDocument const* doc, unsigned loadSBMLOptions)
		+ModelGeneratorContext()
		+~ModelGeneratorContext()
		+getModelDataSymbols() : LLVMModelDataSymbols& {query}
		+getModelSymbols() : LLVMModelSymbols& {query}
		-modelSymbols : LLVMModelSymbols*
		+getRandom() : Random* {query}
		-random : Random*
		+getConservedMoietyAnalysis() : bool {query}
		+useSymbolCache() : bool {query}
		-symbols : const LLVMModelDataSymbols*
		-model : const libsbml::Model*
		-doc : const libsbml::SBMLDocument*
		+getModel() : libsbml::Model* {query}
		+getDocument() : libsbml::SBMLDocument* {query}
		-ownedDoc : libsbml::SBMLDocument*
		+getExecutionEngine() : llvm::ExecutionEngine& {query}
		-executionEngine : llvm::ExecutionEngine*
		+getBuilder() : llvm::IRBuilder<>& {query}
		-builder : llvm::IRBuilder<>*
		+getContext() : llvm::LLVMContext& {query}
		-context : llvm::LLVMContext*
		+getModule() : llvm::Module* {query}
		-module : llvm::Module*
		-functionPassManager : llvm::legacy::FunctionPassManager*
		+getFunctionPassManager() : llvm::legacy::FunctionPassManager* {query}
		-moietyConverter : rr::conservation::ConservedMoietyConverter*
		-errString : std::string*
		-module_owner : std::unique_ptr<llvm::Module>
		+getOptions() : unsigned {query}
		-options : unsigned
		-addGlobalMapping(const llvm::GlobalValue* gv, void* addr) : void
		-addGlobalMappings() : void
		-cleanup() : void
		-initFunctionPassManager() : void
		+transferObjectsToResources(std::shared_ptr<rrllvm::ModelResources> rc) : void
	}

	class ModelInitialValueStoreSymbolResolver {
		+ModelInitialValueStoreSymbolResolver(llvm::Value* modelData, const libsbml::Model* model, const LLVMModelSymbols& modelSymbols, const LLVMModelDataSymbols& modelDataSymbols, llvm::IRBuilder<>& builder, LoadSymbolResolver& resolver)
		+~ModelInitialValueStoreSymbolResolver()
		-resolver : LoadSymbolResolver&
		-modelDataSymbols : const LLVMModelDataSymbols&
		-modelSymbols : const LLVMModelSymbols&
		-model : const libsbml::Model*
		-builder : llvm::IRBuilder<>&
		-modelData : llvm::Value*
		+storeSymbolValue(const std::string& symbol, llvm::Value* value) : llvm::Value*
	}

	class ModelInitialValueSymbolResolver {
		+ModelInitialValueSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~ModelInitialValueSymbolResolver()
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
	}

	class ModelResources {
		+ModelResources()
		+~ModelResources()
		+evalConversionFactorPtr : EvalConversionFactorCodeGen::FunctionPtr
		+evalInitialConditionsPtr : EvalInitialConditionsCodeGen::FunctionPtr
		+evalRateRuleRatesPtr : EvalRateRuleRatesCodeGen::FunctionPtr
		+evalReactionRatesPtr : EvalReactionRatesCodeGen::FunctionPtr
		+evalVolatileStoichPtr : EvalVolatileStoichCodeGen::FunctionPtr
		+eventAssignPtr : EventAssignCodeGen::FunctionPtr
		+eventTriggerPtr : EventTriggerCodeGen::FunctionPtr
		+getBoundarySpeciesAmountPtr : GetBoundarySpeciesAmountCodeGen::FunctionPtr
		+getBoundarySpeciesConcentrationPtr : GetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		+getCompartmentInitVolumesPtr : GetCompartmentInitVolumeCodeGen::FunctionPtr
		+getCompartmentVolumePtr : GetCompartmentVolumeCodeGen::FunctionPtr
		+getEventDelayPtr : GetEventDelayCodeGen::FunctionPtr
		+getEventPriorityPtr : GetEventPriorityCodeGen::FunctionPtr
		+getEventTriggerPtr : GetEventTriggerCodeGen::FunctionPtr
		+getFloatingSpeciesAmountPtr : GetFloatingSpeciesAmountCodeGen::FunctionPtr
		+getFloatingSpeciesConcentrationPtr : GetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		+getFloatingSpeciesInitAmountsPtr : GetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		+getFloatingSpeciesInitConcentrationsPtr : GetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		+getGlobalParameterPtr : GetGlobalParameterCodeGen::FunctionPtr
		+getGlobalParameterInitValuePtr : GetGlobalParameterInitValueCodeGen::FunctionPtr
		+setBoundarySpeciesAmountPtr : SetBoundarySpeciesAmountCodeGen::FunctionPtr
		+setBoundarySpeciesConcentrationPtr : SetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		+setCompartmentInitVolumesPtr : SetCompartmentInitVolumeCodeGen::FunctionPtr
		+setCompartmentVolumePtr : SetCompartmentVolumeCodeGen::FunctionPtr
		+setFloatingSpeciesAmountPtr : SetFloatingSpeciesAmountCodeGen::FunctionPtr
		+setFloatingSpeciesConcentrationPtr : SetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		+setFloatingSpeciesInitAmountsPtr : SetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		+setFloatingSpeciesInitConcentrationsPtr : SetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		+setGlobalParameterPtr : SetGlobalParameterCodeGen::FunctionPtr
		+setGlobalParameterInitValuePtr : SetGlobalParameterInitValueCodeGen::FunctionPtr
		+symbols : const LLVMModelDataSymbols*
		+random : const class Random*
		+errStr : const std::string*
		+executionEngine : llvm::ExecutionEngine*
		-{static} createGlobalMappingFunction(const char* funcName, llvm::FunctionType* funcType, llvm::Module*) : llvm::Function*
		+context : llvm::LLVMContext*
		+module : llvm::Module*
		+moduleStr : std::string
		-addGlobalMapping(std::string name, void*) : void
		-addGlobalMappings() : void
		+loadState(std::istream& in, unsigned int loadOpt) : void
		+saveState(std::ostream& out) : void {query}
	}

	class RR_DECLSPECLLVMCompiler {
		+LLVMCompiler()
		+~LLVMCompiler()
		+setCompiler(const std::string& compiler) : bool
		+setCompilerLocation(const std::string& path) : bool
		+setSupportCodeFolder(const std::string& path) : bool
		+getCompiler() : std::string {query}
		+getCompilerLocation() : std::string {query}
		+getDefaultTargetTriple() : std::string
		+getHostCPUName() : std::string
		+getProcessTriple() : std::string
		+getSupportCodeFolder() : std::string {query}
		+getVersion() : std::string
	}

	class RR_DECLSPECLLVMExecutableModel {
		+LLVMExecutableModel()
		+LLVMExecutableModel(const std::shared_ptr<ModelResources>& resources, LLVMModelData* modelData)
		+LLVMExecutableModel(std::istream& in, unsigned int modelGeneratorOpt)
		+~LLVMExecutableModel()
		-evalConversionFactorPtr : EvalConversionFactorCodeGen::FunctionPtr
		-evalInitialConditionsPtr : EvalInitialConditionsCodeGen::FunctionPtr
		-evalRateRuleRatesPtr : EvalRateRuleRatesCodeGen::FunctionPtr
		-evalReactionRatesPtr : EvalReactionRatesCodeGen::FunctionPtr
		-evalVolatileStoichPtr : EvalVolatileStoichCodeGen::FunctionPtr
		-eventAssignPtr : EventAssignCodeGen::FunctionPtr
		-eventTriggerPtr : EventTriggerCodeGen::FunctionPtr
		-getBoundarySpeciesAmountPtr : GetBoundarySpeciesAmountCodeGen::FunctionPtr
		-getBoundarySpeciesConcentrationPtr : GetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		-getCompartmentInitVolumesPtr : GetCompartmentInitVolumeCodeGen::FunctionPtr
		-getCompartmentVolumePtr : GetCompartmentVolumeCodeGen::FunctionPtr
		-getEventDelayPtr : GetEventDelayCodeGen::FunctionPtr
		-getEventPriorityPtr : GetEventPriorityCodeGen::FunctionPtr
		-getEventTriggerPtr : GetEventTriggerCodeGen::FunctionPtr
		-getFloatingSpeciesAmountPtr : GetFloatingSpeciesAmountCodeGen::FunctionPtr
		-getFloatingSpeciesConcentrationPtr : GetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		-getFloatingSpeciesInitAmountsPtr : GetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		-getFloatingSpeciesInitConcentrationsPtr : GetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		-getGlobalParameterPtr : GetGlobalParameterCodeGen::FunctionPtr
		-getGlobalParameterInitValuePtr : GetGlobalParameterInitValueCodeGen::FunctionPtr
		-{static} dummy() : LLVMExecutableModel*
		-modelData : LLVMModelData*
		-selectionRecordCache : SelectionMap
		-setBoundarySpeciesAmountPtr : SetBoundarySpeciesAmountCodeGen::FunctionPtr
		-setBoundarySpeciesConcentrationPtr : SetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		-setCompartmentInitVolumesPtr : SetCompartmentInitVolumeCodeGen::FunctionPtr
		-setCompartmentVolumePtr : SetCompartmentVolumeCodeGen::FunctionPtr
		-setFloatingSpeciesAmountPtr : SetFloatingSpeciesAmountCodeGen::FunctionPtr
		-setFloatingSpeciesConcentrationPtr : SetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		-setFloatingSpeciesInitAmountsPtr : SetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		-setFloatingSpeciesInitConcentrationsPtr : SetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		-setGlobalParameterPtr : SetGlobalParameterCodeGen::FunctionPtr
		-setGlobalParameterInitValuePtr : SetGlobalParameterInitValueCodeGen::FunctionPtr
		-tieBreakMap : TieBreakMap
		-applyEvents(unsigned char* prevEventState, unsigned char* currEventState) : bool
		+getEventInitialValue(size_t event) : bool
		+getEventPersistent(size_t event) : bool
		+getEventTieBreak(size_t eventA, size_t eventB) : bool
		+getEventTrigger(size_t event) : bool
		+getEventUseValuesFromTriggerTime(size_t event) : bool
		-symbols : const LLVMModelDataSymbols*
		-resources : cxx11_ns::shared_ptr<ModelResources>
		-conversionFactor : double
		+getEventDelay(size_t event) : double
		+getEventPriority(size_t event) : double
		+getFloatingSpeciesAmountRate(size_t index, const double* reactionRates) : double
		+getNextPendingEventTime(bool pop) : double
		+getRandom() : double
		+getStoichiometry(int speciesIndex, int reactionIndex) : double
		+getTime() : double
		+getValue(const std::string& id) : double
		+applyEvents(double timeEnd, const unsigned char* previousEventState, const double* initialState, double* finalState) : int
		+getBoundarySpeciesAmounts(size_t len, int const* indx, double* values) : int
		+getBoundarySpeciesConcentrations(size_t len, int const* indx, double* values) : int
		+getBoundarySpeciesIndex(const std::string &) : int
		+getCompartmentIndex(const std::string &) : int
		+getCompartmentIndexForFloatingSpecies(size_t index) : int
		+getCompartmentInitVolumes(size_t len, const int* indx, double* values) : int
		+getCompartmentVolumes(size_t len, int const* indx, double* values) : int
		+getConservedMoietyIndex(const std::string& name) : int
		+getConservedMoietyValues(size_t len, int const* indx, double* values) : int
		+getEventIndex(const std::string& eid) : int
		+getEventTriggers(size_t len, const int* indx, unsigned char* eventState) : int
		+getFloatingSpeciesAmountRates(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesAmounts(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesConcentrationRates(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesConcentrations(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesIndex(const std::string &) : int
		+getFloatingSpeciesInitAmounts(size_t size_t, const int* indx, double* values) : int
		+getFloatingSpeciesInitConcentrations(size_t len, const int* indx, double* values) : int
		+getGlobalParameterIndex(const std::string &) : int
		+getGlobalParameterInitValues(size_t len, const int* indx, double* values) : int
		+getGlobalParameterValues(size_t len, int const* indx, double* values) : int
		+getNumBoundarySpecies() : int
		+getNumCompartments() : int
		+getNumConservedMoieties() : int
		+getNumDepFloatingSpecies() : int
		+getNumEvents() : int
		+getNumFloatingSpecies() : int
		+getNumGlobalParameters() : int
		+getNumIndFloatingSpecies() : int
		+getNumRateRules() : int
		+getNumReactions() : int
		+getPendingEventSize() : int
		+getRateRueRates(size_t len, int const* indx, double* values) : int
		+getReactionIndex(const std::string &) : int
		+getReactionRates(size_t len, int const* indx, double* values) : int
		+getStateVector(double* stateVector) : int
		+getStoichiometryMatrix(int* rows, int* cols, double** data) : int
		+getSupportedIdTypes() : int
		-getValues(double (* ) ( LLVMModelData*, size_t ) funcPtr, size_t len, const int* indx, double* values) : int
		+setBoundarySpeciesAmounts(size_t len, int const* indx, double const* values) : int
		+setBoundarySpeciesConcentrations(size_t len, int const* indx, double const* values) : int
		+setCompartmentInitVolumes(size_t len, const int* indx, double const* values) : int
		+setCompartmentVolumes(size_t len, int const* indx, const double* values) : int
		+setConservedMoietyValues(size_t len, int const* indx, const double* values) : int
		+setFloatingSpeciesAmounts(size_t len, int const* indx, const double* values) : int
		+setFloatingSpeciesConcentrations(size_t len, int const* indx, double const* values) : int
		+setFloatingSpeciesInitAmounts(size_t len, const int* indx, double const* values) : int
		+setFloatingSpeciesInitConcentrations(size_t len, const int* indx, double const* values) : int
		+setGlobalParameterInitValues(size_t len, const int* indx, double const* values) : int
		+setGlobalParameterValues(size_t len, int const* indx, const double* values) : int
		+setStateVector(const double* stateVector) : int
		-setValues(bool (* ) ( LLVMModelData*, int, double ) funcPtr, GetNameFuncPtr, size_t len, const int* indx, const double* values) : int
		+getRandomSeed() : int64_t
		+getEventListener(size_t index) : rr::EventListenerPtr
		-getSelection(const std::string& sel) : rr::SelectionRecord&
		-pendingEvents : rrllvm::EventQueue
		+getEventBufferSize(size_t event) : size_t
		+getBoundarySpeciesId(size_t index) : std::string
		+getCompartmentId(size_t) : std::string
		+getConservedMoietyId(size_t index) : std::string
		+getEventId(size_t index) : std::string
		+getExecutableModelDesc() : std::string {query}
		+getFloatingSpeciesId(size_t index) : std::string
		+getGlobalParameterId(size_t) : std::string
		+getInfo() : std::string
		+getModelName() : std::string
		+getReactionId(size_t) : std::string
		+getStateVectorId(size_t index) : std::string
		-eventAssignTimes : std::vector<double>
		-eventListeners : std::vector<rr::EventListenerPtr>
		+getRateRuleSymbols() : std::vector<std::string> {query}
		-dirty : uint32_t
		-flags : uint32_t
		+getFlags() : uint32_t {query}
		+assignEvent(size_t eventId, double* data) : void
		-copyCachedModel(a_type* src, b_type* dst) : void
		+evalInitialConditions(uint32_t flags) : void
		+getEventData(size_t eventId, double* data) : void
		+getEventIds(std::list<std::string>& out) : void
		+getEventRoots(double time, const double* y, double* gdot) : void
		+getIds(int types, std::list<std::string>& ids) : void
		+getRateRuleValues(double* rateRuleValues) : void
		+getStateVectorRate(double time, const double* y, double* dydt) : void
		+print(std::ostream& stream) : void
		+reset() : void
		+reset(int options) : void
		+resetEvents() : void
		+saveState(std::ostream& out) : void
		+setEventListener(size_t index, rr::EventListenerPtr eventHandler) : void
		+setFlags(uint32_t val) : void
		+setRandomSeed(int64_t) : void
		+setTime(double _time) : void
		+setValue(const std::string& id, double value) : void
		+testConstraints() : void
	}

	class RR_DECLSPECLLVMModelGenerator {
		+{static} createModel(const std::string& sbml, std::uint32_t options) : rr::ExecutableModel*
		+{static} regenerateModel(rr::ExecutableModel* oldModel, libsbml::SBMLDocument* doc, unsigned int options) : rr::ExecutableModel*
	}

	class Random {
		+Random(class ModelGeneratorContext& ctx)
		+Random(const Random& other)
		+Random()
		+~Random()
		+operator=(const Random& rhs) : Random&
		+{static} max() : constexpr unsigned long long
		+{static} min() : constexpr unsigned long long
		+engine : cxx11_ns::mt19937
		-normalized_uniform_dist : cxx11_ns::uniform_real<double>
		-normalized_uniform_dist : cxx11_ns::uniform_real_distribution<double>
		+max() : double
		+min() : double
		+operator()() : double
		+getMaxTries() : int {query}
		-mMaxTries : int
		+getRandomSeed() : int64_t
		-randomSeed : int64_t
		+setMaxTries(int maxTries) : void
		+setRandomSeed(int64_t) : void
	}

	class SBMLInitialValueSymbolResolver {
		+SBMLInitialValueSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~SBMLInitialValueSymbolResolver()
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
	}

	class SetBoundarySpeciesAmountCodeGen {
		+SetBoundarySpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~SetBoundarySpeciesAmountCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetBoundarySpeciesConcentrationCodeGen {
		+SetBoundarySpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~SetBoundarySpeciesConcentrationCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetCompartmentInitVolumeCodeGen {
		+SetCompartmentInitVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~SetCompartmentInitVolumeCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetCompartmentVolumeCodeGen {
		+SetCompartmentVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~SetCompartmentVolumeCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesAmountCodeGen {
		+SetFloatingSpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesAmountCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesConcentrationCodeGen {
		+SetFloatingSpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesConcentrationCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesInitAmountCodeGen {
		+SetFloatingSpeciesInitAmountCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesInitAmountCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesInitConcentrationCodeGen {
		+SetFloatingSpeciesInitConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesInitConcentrationCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetGlobalParameterCodeGen {
		+SetGlobalParameterCodeGen(const ModelGeneratorContext& mgc)
		+~SetGlobalParameterCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetGlobalParameterInitValueCodeGen {
		+SetGlobalParameterInitValueCodeGen(const ModelGeneratorContext& mgc)
		+~SetGlobalParameterInitValueCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetInitialValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+SetInitialValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~SetInitialValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	class SetValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+SetValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~SetValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	abstract class StoreSymbolResolver {
		#~StoreSymbolResolver()
		+{abstract} storeSymbolValue(const std::string& symbol, llvm::Value* value) : llvm::Value*
	}

	class SymbolForest {
		-_end : ConstIterator
		+find(const std::map<std::string, const libsbml::ASTNode*>::key_type& x) : ConstIterator {query}
		+end() : ConstIterator& {query}
		+boundarySpecies : std::map<std::string, const libsbml::ASTNode*>
		+compartments : std::map<std::string, const libsbml::ASTNode*>
		+floatingSpecies : std::map<std::string, const libsbml::ASTNode*>
		+globalParameters : std::map<std::string, const libsbml::ASTNode*>
		+speciesReferences : std::map<std::string, const libsbml::ASTNode*>
	}

	class SymbolForest::ConstIterator {
		-ConstIterator(_const_iterator i)
		-ConstIterator()
		+ConstIterator(ConstIterator o)
		+operator=(ConstIterator o) : ConstIterator&
		+operator->() : ConstIterator* {query}
		-end : bool
		+operator!=(ConstIterator other) : bool {query}
		+second : const libsbml::ASTNode*
	}

	enum EventAtributes {
		EventInitialValue
		EventPersistent
		EventUseValuesFromTriggerTime
	}

	enum LLVMModelDataSymbols::SpeciesReferenceType {
		Modifier
		MultiReactantProduct
		Product
		Reactant
	}

	enum LLVMModelDataSymbols::SymbolIndexType {
		BOUNDARY_SPECIES
		COMPARTMENT
		EVENT
		FLOATING_SPECIES
		GLOBAL_PARAMETER
		INVALID_SYMBOL
		REACTION
	}

	enum LLVMModelSymbols::SpeciesReferenceType {
		Product
		Reactant
	}

	enum ModelDataFields {
		BoundarySpeciesAmounts
		BoundarySpeciesAmountsAlias
		CompartmentVolumes
		CompartmentVolumesAlias
		Flags
		FloatingSpeciesAmountRates
		FloatingSpeciesAmountsAlias
		GlobalParameters
		GlobalParametersAlias
		InitBoundarySpeciesAmounts
		InitBoundarySpeciesAmountsAlias
		InitCompartmentVolumes
		InitCompartmentVolumesAlias
		InitFloatingSpeciesAmounts
		InitFloatingSpeciesAmountsAlias
		InitGlobalParameters
		InitGlobalParametersAlias
		NotSafe_FloatingSpeciesAmounts
		NotSafe_RateRuleValues
		NumEvents
		NumIndBoundarySpecies
		NumIndCompartments
		NumIndFloatingSpecies
		NumIndGlobalParameters
		NumInitBoundarySpecies
		NumInitCompartments
		NumInitFloatingSpecies
		NumInitGlobalParameters
		NumRateRules
		NumReactions
		RandomPtr
		RateRuleRates
		RateRuleValuesAlias
		ReactionRates
		ReactionRatesAlias
		Size
		StateVector
		StateVectorRate
		StateVectorSize
		Stoichiometry
		Time
	}

	enum RR_DECLSPECLLVMExecutableModel::empty {
		DIRTY_CONSERVED_MOIETIES
		DIRTY_INIT_SPECIES
		DIRTY_REACTION_RATES
	}

	class LLVMModelData {
		+random : class Random*
		+data : double
		+time : double
		+boundarySpeciesAmountsAlias : double*
		+compartmentVolumesAlias : double*
		+floatingSpeciesAmountRates : double*
		+floatingSpeciesAmountsAlias : double*
		+globalParametersAlias : double*
		+initBoundarySpeciesAmountsAlias : double*
		+initCompartmentVolumesAlias : double*
		+initFloatingSpeciesAmountsAlias : double*
		+initGlobalParametersAlias : double*
		+rateRuleRates : double*
		+rateRuleValuesAlias : double*
		+reactionRatesAlias : double*
		+stateVector : double*
		+stateVectorRate : double*
		+stoichiometry : rr::csr_matrix*
		+flags : unsigned
		+numEvents : unsigned
		+numIndBoundarySpecies : unsigned
		+numIndCompartments : unsigned
		+numIndFloatingSpecies : unsigned
		+numIndGlobalParameters : unsigned
		+numInitBoundarySpecies : unsigned
		+numInitCompartments : unsigned
		+numInitFloatingSpecies : unsigned
		+numInitGlobalParameters : unsigned
		+numRateRules : unsigned
		+numReactions : unsigned
		+size : unsigned
		+stateVectorSize : unsigned
	}

	class LLVMModelDataSymbols::SpeciesReferenceInfo {
		+type : SpeciesReferenceType
		+id : std::string
		+column : unsigned int
		+row : unsigned int
	}

	class LLVMModelSymbols::ReactionSymbols {
		+products : IntASTNodeListMap
		+reactants : IntASTNodeListMap
	}
}





/' Inheritance relationships '/

rrllvm.CodeGenBase <|- - rrllvm.EvalConversionFactorCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalInitialConditionsCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalRateRuleRatesCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalReactionRatesCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalVolatileStoichCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EventCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.GetEventValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.GetInitialValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.GetValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.SetInitialValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.SetValueCodeGenBase


rrllvm.EventCodeGenBase <|- - rrllvm.EventAssignCodeGen


rrllvm.EventCodeGenBase <|- - rrllvm.EventTriggerCodeGen


rrllvm.GetEventValueCodeGenBase <|- - rrllvm.GetEventDelayCodeGen


rrllvm.GetEventValueCodeGenBase <|- - rrllvm.GetEventPriorityCodeGen


rrllvm.GetEventValueCodeGenBase <|- - rrllvm.GetEventTriggerCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetCompartmentInitVolumeCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesInitAmountCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesInitConcentrationCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetGlobalParameterInitValueCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetBoundarySpeciesAmountCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetBoundarySpeciesConcentrationCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetCompartmentVolumeCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesAmountCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesConcentrationCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetGlobalParameterCodeGen


rrllvm.LoadSymbolResolver <|- - rrllvm.FunctionResolver


rrllvm.LoadSymbolResolver <|- - rrllvm.KineticLawParameterResolver


rrllvm.LoadSymbolResolver <|- - rrllvm.LoadSymbolResolverBase


rrllvm.LoadSymbolResolverBase <|- - rrllvm.ModelDataLoadSymbolResolver


rrllvm.LoadSymbolResolverBase <|- - rrllvm.ModelInitialValueSymbolResolver


rrllvm.LoadSymbolResolverBase <|- - rrllvm.SBMLInitialValueSymbolResolver


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetCompartmentInitVolumeCodeGen


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesInitAmountCodeGen


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesInitConcentrationCodeGen


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetGlobalParameterInitValueCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetBoundarySpeciesAmountCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetBoundarySpeciesConcentrationCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetCompartmentVolumeCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesAmountCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesConcentrationCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetGlobalParameterCodeGen


rrllvm.StoreSymbolResolver <|- - rrllvm.ModelDataStoreSymbolResolver


rrllvm.StoreSymbolResolver <|- - rrllvm.ModelInitialValueStoreSymbolResolver





/' Aggregation relationships '/

rrllvm.ASTNodeCodeGen *- - rrllvm.LoadSymbolResolver


rrllvm.ASTNodeCodeGen *- - rrllvm.ModelGeneratorContext


rrllvm.ASTNodeCodeGenScalarTicket *- - rrllvm.ASTNodeCodeGen


rrllvm.AssignmentRuleEvaluator *- - rrllvm.SymbolForest


rrllvm.CodeGenBase *- - rrllvm.LLVMModelDataSymbols


rrllvm.CodeGenBase *- - rrllvm.LLVMModelSymbols


rrllvm.CodeGenBase *- - rrllvm.ModelGeneratorContext


rrllvm.FunctionResolver *- - rrllvm.LoadSymbolResolver


rrllvm.FunctionResolver *- - rrllvm.ModelGeneratorContext


rrllvm.KineticLawParameterResolver *- - rrllvm.LoadSymbolResolver


rrllvm.LLVMModelData o- - rrllvm.Random


rrllvm.LLVMModelDataIRBuilderTesting *- - rrllvm.LLVMModelDataSymbols


rrllvm.LLVMModelSymbols *- - rrllvm.ASTNodeFactory


rrllvm.LLVMModelSymbols *- - rrllvm.LLVMModelDataSymbols


rrllvm.LLVMModelSymbols "4" *- - rrllvm.SymbolForest


rrllvm.LoadSymbolResolverBase *- - rrllvm.LLVMModelDataSymbols


rrllvm.LoadSymbolResolverBase *- - rrllvm.LLVMModelSymbols


rrllvm.LoadSymbolResolverBase *- - rrllvm.ModelGeneratorContext


rrllvm.ModelDataIRBuilder *- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelDataStoreSymbolResolver *- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelDataStoreSymbolResolver *- - rrllvm.LLVMModelSymbols


rrllvm.ModelDataStoreSymbolResolver *- - rrllvm.LoadSymbolResolver


rrllvm.ModelGeneratorContext o- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelGeneratorContext o- - rrllvm.LLVMModelSymbols


rrllvm.ModelGeneratorContext o- - rrllvm.Random


rrllvm.ModelInitialValueStoreSymbolResolver *- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelInitialValueStoreSymbolResolver *- - rrllvm.LLVMModelSymbols


rrllvm.ModelInitialValueStoreSymbolResolver *- - rrllvm.LoadSymbolResolver


rrllvm.ModelResources *- - rrllvm.EvalConversionFactorCodeGen


rrllvm.ModelResources *- - rrllvm.EvalInitialConditionsCodeGen


rrllvm.ModelResources *- - rrllvm.EvalRateRuleRatesCodeGen


rrllvm.ModelResources *- - rrllvm.EvalReactionRatesCodeGen


rrllvm.ModelResources *- - rrllvm.EvalVolatileStoichCodeGen


rrllvm.ModelResources *- - rrllvm.EventAssignCodeGen


rrllvm.ModelResources *- - rrllvm.EventTriggerCodeGen


rrllvm.ModelResources *- - rrllvm.GetBoundarySpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.GetBoundarySpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.GetCompartmentInitVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.GetCompartmentVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.GetEventDelayCodeGen


rrllvm.ModelResources *- - rrllvm.GetEventPriorityCodeGen


rrllvm.ModelResources *- - rrllvm.GetEventTriggerCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesInitAmountCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesInitConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.GetGlobalParameterCodeGen


rrllvm.ModelResources *- - rrllvm.GetGlobalParameterInitValueCodeGen


rrllvm.ModelResources o- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelResources o- - rrllvm.Random


rrllvm.ModelResources *- - rrllvm.SetBoundarySpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.SetBoundarySpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.SetCompartmentInitVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.SetCompartmentVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesInitAmountCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesInitConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.SetGlobalParameterCodeGen


rrllvm.ModelResources *- - rrllvm.SetGlobalParameterInitValueCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalConversionFactorCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalInitialConditionsCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalRateRuleRatesCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalReactionRatesCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalVolatileStoichCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EventAssignCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EventQueue


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EventTriggerCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetBoundarySpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetBoundarySpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetCompartmentInitVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetCompartmentVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetEventDelayCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetEventPriorityCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetEventTriggerCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesInitAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesInitConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetGlobalParameterCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetGlobalParameterInitValueCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel o- - rrllvm.LLVMModelData


rrllvm.RR_DECLSPECLLVMExecutableModel o- - rrllvm.LLVMModelDataSymbols


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.ModelResources


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetBoundarySpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetBoundarySpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetCompartmentInitVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetCompartmentVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesInitAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesInitConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetGlobalParameterCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetGlobalParameterInitValueCodeGen






/' Nested objects '/

rrllvm.LLVMModelDataSymbols +- - rrllvm.LLVMModelDataSymbols::SpeciesReferenceInfo


rrllvm.LLVMModelDataSymbols +- - rrllvm.LLVMModelDataSymbols::SpeciesReferenceType


rrllvm.LLVMModelDataSymbols +- - rrllvm.LLVMModelDataSymbols::SymbolIndexType


rrllvm.LLVMModelSymbols +- - rrllvm.LLVMModelSymbols::ReactionSymbols


rrllvm.LLVMModelSymbols +- - rrllvm.LLVMModelSymbols::SpeciesReferenceType


rrllvm.RR_DECLSPECLLVMExecutableModel +- - rrllvm.RR_DECLSPECLLVMExecutableModel::empty


rrllvm.SymbolForest +- - rrllvm.SymbolForest::ConstIterator




@enduml

@startuml






namespace rrllvm {
	class ASTNodeCodeGen {
		+ASTNodeCodeGen(llvm::IRBuilder<>& builder, LoadSymbolResolver& resolver, const ModelGeneratorContext& ctx, llvm::Value* modelData)
		+~ASTNodeCodeGen()
		-resolver : LoadSymbolResolver&
		-scalar_mode_ : bool
		-ctx : const ModelGeneratorContext&
		-builder : llvm::IRBuilder<>&
		-getModule() : llvm::Module*
		-applyArithmeticCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-applyBinaryRelationalCodeGen(const libsbml::ASTNode* ast, llvm::Value* left, llvm::Value* right) : llvm::Value*
		-applyLogicalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-applyRelationalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-applyScalarRelationalCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-binaryExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		+codeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-delayExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-distribCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-functionCallCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-integerCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-intrinsicCallCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-minmaxCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-modelData : llvm::Value*
		-nameExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-notImplemented(const libsbml::ASTNode* ast) : llvm::Value*
		-piecewiseCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-realExprCodeGen(const libsbml::ASTNode* ast) : llvm::Value*
		-toBoolean(llvm::Value* value) : llvm::Value*
		-toDouble(llvm::Value* value) : llvm::Value*
	}

	class ASTNodeCodeGenScalarTicket {
		+ASTNodeCodeGenScalarTicket(ASTNodeCodeGen& gen, bool val, std::string n)
		+~ASTNodeCodeGenScalarTicket()
		-z_ : ASTNodeCodeGen&
		-v_ : bool
		-n_ : std::string
	}

	class ASTNodeFactory {
		-ASTNodeFactory(const ASTNodeFactory &)
		+ASTNodeFactory()
		+~ASTNodeFactory()
		-operator=(const ASTNodeFactory& rhs) : ASTNodeFactory&
		+create(libsbml::ASTNodeType_t type) : libsbml::ASTNode*
		+create(libsbml::Token_t* token) : libsbml::ASTNode*
		+create(const libsbml::ASTNode& orig) : libsbml::ASTNode*
		-nodes : std::list<libsbml::ASTNode*>
	}

	class AssignmentRuleEvaluator {
		+AssignmentRuleEvaluator(SymbolForest& symbols)
		#symbols : SymbolForest&
		+visit(const libsbml::AssignmentRule& x) : bool
		+evaluate(const libsbml::Model& model) : void
	}

	abstract class CodeGen {
		#~CodeGen()
		+{abstract} codeGen() : llvm::Value*
	}

	abstract class CodeGenBase <template<typename FunctionPtrType>> {
		#CodeGenBase(const ModelGeneratorContext& mgc)
		#~CodeGenBase()
		#dataSymbols : const LLVMModelDataSymbols&
		#modelSymbols : const LLVMModelSymbols&
		#modelGenContext : const ModelGeneratorContext&
		#model : const libsbml::Model*
		#options : const unsigned
		#codeGenHeader(const char* functionName, llvm::Type* retType, llvm::Type* (& argTypes ), const char* (& argNames ), llvm::Value* (& args )) : llvm::BasicBlock*
		#codeGenVoidModelDataHeader(const char* functionName, llvm::Value*& modelData) : llvm::BasicBlock*
		#engine : llvm::ExecutionEngine&
		+createFunction() : llvm::Function*
		#function : llvm::Function*
		#verifyFunction() : llvm::Function*
		#builder : llvm::IRBuilder<>&
		#context : llvm::LLVMContext&
		#module : llvm::Module*
		#{abstract} codeGen() : llvm::Value*
		#functionPassManager : llvm::legacy::FunctionPassManager*
	}

	class EvalConversionFactorCodeGen {
		+EvalConversionFactorCodeGen(const ModelGeneratorContext& mgc)
		+~EvalConversionFactorCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class EvalInitialConditionsCodeGen {
		+EvalInitialConditionsCodeGen(const ModelGeneratorContext& mgc)
		+~EvalInitialConditionsCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
		-codeGenCompartments(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenGlobalParameters(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenInitCompartments(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenInitGlobalParameters(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenInitSpecies(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenSpecies(StoreSymbolResolver& modelDataResolver, LoadSymbolResolver& loadResolver) : void
		-codeGenStoichiometry(llvm::Value* modelData, ModelDataStoreSymbolResolver& modelDataResolver, LoadSymbolResolver& initialValueResolver) : void
	}

	class EvalRateRuleRatesCodeGen {
		+EvalRateRuleRatesCodeGen(const ModelGeneratorContext& mgc)
		+~EvalRateRuleRatesCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class EvalReactionRatesCodeGen {
		+EvalReactionRatesCodeGen(const ModelGeneratorContext& mgc)
		+~EvalReactionRatesCodeGen()
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class EvalVolatileStoichCodeGen {
		+EvalVolatileStoichCodeGen(const ModelGeneratorContext& mgc)
		+~EvalVolatileStoichCodeGen()
		-isConstantASTNode(const libsbml::ASTNode* ast) : bool {query}
		-isConstantSpeciesReference(const libsbml::SimpleSpeciesReference* ref) : bool {query}
		+codeGen() : llvm::Value*
		+{static} FunctionName : static const char*
	}

	class Event {
		+Event(LLVMExecutableModel &, unsigned int id)
		+Event(const Event& other)
		+~Event()
		+operator=(const Event& rhs) : Event&
		+model : LLVMExecutableModel&
		+isCurrent() : bool {query}
		+isExpired() : bool {query}
		+isPersistent() : bool {query}
		+isRipe() : bool {query}
		+isTriggered() : bool {query}
		+operator<(const Event& a, const Event& b) : bool
		+useValuesFromTriggerTime() : bool {query}
		+assignTime : double
		+delay : double
		+getPriority() : double {query}
		+data : double*
		+dataSize : unsigned int
		+id : unsigned int
		+assign() : void {query}
	}

	class EventAssignCodeGen {
		+EventAssignCodeGen(const ModelGeneratorContext& mgc)
		+~EventAssignCodeGen()
		+eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool
		+{static} FunctionName : static const char*
	}

	class EventCodeGenBase <template<typename Derived>> {
		+EventCodeGenBase(const ModelGeneratorContext& mgc)
		+~EventCodeGenBase()
		+eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool
		+codeGen() : llvm::Value*
	}

	class EventQueue {
		-comp : _Compare
		-sequence : _Sequence
		+applyEvents() : bool
		+eraseExpiredEvents() : bool
		+hasCurrentEvents() : bool
		+top() : const_reference
		+getNextPendingEventTime() : double
		+operator<<(std::ostream& stream, const EventQueue& queue) : std :: ostream&
		+size() : unsigned int {query}
		+loadState(std::istream& in, LLVMExecutableModel& model) : void
		+push(const Event& e) : void
		+saveState(std::ostream& out) : void
	}

	class EventTriggerCodeGen {
		+EventTriggerCodeGen(const ModelGeneratorContext& mgc)
		+~EventTriggerCodeGen()
		+eventCodeGen(llvm::Value* modelData, llvm::Value* data, const libsbml::Event* event) : bool
		+{static} FunctionName : static const char*
	}

	class FunctionResolver {
		+FunctionResolver(LoadSymbolResolver& parentResolver, llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~FunctionResolver()
		-parentResolver : LoadSymbolResolver&
		-modelGenContext : const ModelGeneratorContext&
		-model : const libsbml::Model*
		-builder : llvm::IRBuilder<>&
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
		-symbols : std::map<std::string, llvm::Value*>*
		+recursiveSymbolPop() : void
		+recursiveSymbolPush(const std::string& symbol) : void
	}

	class GetBoundarySpeciesAmountCodeGen {
		+GetBoundarySpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~GetBoundarySpeciesAmountCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetBoundarySpeciesConcentrationCodeGen {
		+GetBoundarySpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~GetBoundarySpeciesConcentrationCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetCompartmentInitVolumeCodeGen {
		+GetCompartmentInitVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~GetCompartmentInitVolumeCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetCompartmentVolumeCodeGen {
		+GetCompartmentVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~GetCompartmentVolumeCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetEventDelayCodeGen {
		+GetEventDelayCodeGen(const ModelGeneratorContext& mgc)
		+~GetEventDelayCodeGen()
		+getMath(const libsbml::Event*) : libsbml::ASTNode*
		-node : libsbml::ASTNode*
		+createRet(llvm::Value* value) : llvm::Value*
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class GetEventPriorityCodeGen {
		+GetEventPriorityCodeGen(const ModelGeneratorContext& mgc)
		+~GetEventPriorityCodeGen()
		+getMath(const libsbml::Event*) : libsbml::ASTNode*
		-node : libsbml::ASTNode*
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class GetEventTriggerCodeGen {
		+GetEventTriggerCodeGen(const ModelGeneratorContext& mgc)
		+~GetEventTriggerCodeGen()
		+getMath(const libsbml::Event*) : libsbml::ASTNode*
		+getRetType() : llvm::Type*
		+createRet(llvm::Value*) : llvm::Value*
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class GetEventValueCodeGenBase <template<typename Derived, typename FunctionPtrType=GetEventValueCodeGenBase_FunctionPtr>> {
		+GetEventValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~GetEventValueCodeGenBase()
		+getRetType() : llvm::Type*
		+codeGen() : llvm::Value*
		+createRet(llvm::Value* value) : llvm::Value*
	}

	class GetFloatingSpeciesAmountCodeGen {
		+GetFloatingSpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesAmountCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetFloatingSpeciesConcentrationCodeGen {
		+GetFloatingSpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesConcentrationCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetFloatingSpeciesInitAmountCodeGen {
		+GetFloatingSpeciesInitAmountCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesInitAmountCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetFloatingSpeciesInitConcentrationCodeGen {
		+GetFloatingSpeciesInitConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~GetFloatingSpeciesInitConcentrationCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetGlobalParameterCodeGen {
		+GetGlobalParameterCodeGen(const ModelGeneratorContext& mgc)
		+~GetGlobalParameterCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetGlobalParameterInitValueCodeGen {
		+GetGlobalParameterInitValueCodeGen(const ModelGeneratorContext& mgc)
		+~GetGlobalParameterInitValueCodeGen()
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
		+getIds() : std::vector<std::string>
	}

	class GetInitialValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+GetInitialValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~GetInitialValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	class GetValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+GetValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~GetValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	class KineticLawParameterResolver {
		+KineticLawParameterResolver(LoadSymbolResolver& parentResolver, const libsbml::KineticLaw& kineticLaw, llvm::IRBuilder<>& builder)
		+~KineticLawParameterResolver()
		-parentResolver : LoadSymbolResolver&
		-kineticLaw : const libsbml::KineticLaw&
		-builder : llvm::IRBuilder<>&
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		+recursiveSymbolPop() : void
		+recursiveSymbolPush(const std::string& symbol) : void
	}

	class LLVMException {
		+LLVMException(const std::string& what)
		+LLVMException(const std::string& what, const std::string& where)
	}

	class LLVMModelDataIRBuilderTesting {
		+LLVMModelDataIRBuilderTesting(LLVMModelDataSymbols const &, llvm::IRBuilder<> &)
		+symbols : LLVMModelDataSymbols const&
		+createDispChar(llvm::Value* doubleVal) : llvm::CallInst*
		+createDispDouble(llvm::Value* doubleVal) : llvm::CallInst*
		+createDispInt(llvm::Value* intVal) : llvm::CallInst*
		+{static} getDispCharDecl(llvm::Module* module) : llvm::Function*
		+{static} getDispDoubleDecl(llvm::Module* module) : llvm::Function*
		+{static} getDispIntDecl(llvm::Module* module) : llvm::Function*
		+builder : llvm::IRBuilder<>&
		+createFloatingSpeciesAccessors(llvm::Module* module, const std::string id) : std::pair<llvm::Function* , llvm::Function*>
		+createAccessors(llvm::Module* module) : void
		+test(llvm::Module* module, llvm::IRBuilder<>* build, llvm::ExecutionEngine* engine) : void
	}

	class LLVMModelDataSymbols {
		+LLVMModelDataSymbols()
		+LLVMModelDataSymbols(libsbml::Model const* model, unsigned options)
		+LLVMModelDataSymbols(std::istream& in)
		+~LLVMModelDataSymbols()
		+getNamedSpeciesReferenceInfo(const std::string& id) : SpeciesReferenceInfo& {query}
		-namedSpeciesReferenceInfo : StringRefInfoMap
		-boundarySpeciesMap : StringUIntMap
		-compartmentsMap : StringUIntMap
		-conservedMoietyDepSpecies : StringUIntMap
		-eventIds : StringUIntMap
		-floatingSpeciesMap : StringUIntMap
		-globalParametersMap : StringUIntMap
		-initBoundarySpeciesMap : StringUIntMap
		-initCompartmentsMap : StringUIntMap
		-initFloatingSpeciesMap : StringUIntMap
		-initGlobalParametersMap : StringUIntMap
		-rateRules : StringUIntMap
		-reactionsMap : StringUIntMap
		-conservedMoietyIndSpecies : StringUIntVectorMap
		-floatingSpeciesToConservedMoietyIdMap : UIntUIntMap
		+hasAssignmentRule(const std::string& id) : bool {query}
		+hasInitialAssignmentRule(const std::string& id) : bool {query}
		+hasRateRule(const std::string& id) : bool {query}
		+isBoundarySpecies(const std::string& id) : bool {query}
		+isConservedMoietyParameter(unsigned int id) : bool {query}
		+isConservedMoietySpecies(const std::string& symbol) : bool {query}
		+isConservedMoietySpecies(unsigned int id, unsigned int result) : bool {query}
		+isIndependentBoundarySpecies(const std::string& id) : bool {query}
		+isIndependentCompartment(const std::string& id) : bool {query}
		+isIndependentElement(const std::string& id) : bool {query}
		+isIndependentFloatingSpecies(const std::string& id) : bool {query}
		+isIndependentGlobalParameter(const std::string& id) : bool {query}
		+isIndependentInitCompartment(const std::string& symbol) : bool {query}
		+isIndependentInitElement(const std::string& symbol) : bool {query}
		+isIndependentInitFloatingSpecies(const std::string& symbol) : bool {query}
		+isIndependentInitGlobalParameter(const std::string& symbol) : bool {query}
		+isIndependentInitGlobalParameter(size_t id) : bool {query}
		+isNamedSpeciesReference(const std::string& id) : bool {query}
		+isRateRuleGlobalParameter(unsigned int gid) : bool {query}
		-isValidFloatingSpeciesReference(const libsbml::SimpleSpeciesReference*, const std::string& reacOrProd) : bool
		+{static} getFieldName(ModelDataFields field) : char*
		+getBoundarySpeciesIndex(std::string const &) : int {query}
		+getCompartmentIndex(std::string const &) : int {query}
		+getCompartmentIndexForFloatingSpecies(size_t floatIndex) : int {query}
		+getCompartmentInitIndex(const std::string& symbol) : int {query}
		+getConservedMoietyGlobalParameterIndex(unsigned int cmIndex) : int {query}
		+getConservedMoietyIndex(const std::string& name) : int {query}
		+getDepSpeciesIndexForConservedMoietyId(std::string id) : int {query}
		+getEventIndex(const std::string& id) : int {query}
		+getFloatingSpeciesIndex(std::string const &, bool requireIndependent) : int {query}
		+getFloatingSpeciesInitIndex(const std::string& symbol) : int {query}
		+getGlobalParameterIndex(std::string const &) : int {query}
		+getGlobalParameterInitIndex(const std::string& symbol) : int {query}
		+getRateRuleIndex(std::string const &) : int {query}
		+getReactionIndex(std::string const &) : int {query}
		+getSymbolIndex(const std::string& name, int& result) : int {query}
		+getBoundarySpeciesSize() : size_t {query}
		+getCompartmentsSize() : size_t {query}
		+getConservedMoietySize() : size_t {query}
		+getEventBufferSize(size_t eventId) : size_t {query}
		+getFloatingSpeciesSize() : size_t {query}
		+getGlobalParametersSize() : size_t {query}
		+getIndependentBoundarySpeciesSize() : size_t {query}
		+getIndependentCompartmentSize() : size_t {query}
		+getIndependentFloatingSpeciesSize() : size_t {query}
		+getIndependentGlobalParameterSize() : size_t {query}
		+getInitBoundarySpeciesSize() : size_t {query}
		+getInitCompartmentSize() : size_t {query}
		+getInitFloatingSpeciesSize() : size_t {query}
		+getInitGlobalParameterSize() : size_t {query}
		+getRateRuleSize() : size_t {query}
		+getReactionSize() : size_t {query}
		-independentBoundarySpeciesSize : size_t
		-independentCompartmentSize : size_t
		-independentFloatingSpeciesSize : size_t
		-independentGlobalParameterSize : size_t
		+getStoichiometryIndx() : std::list<SpeciesReferenceInfo> {query}
		-assignmentRules : std::set<std::string>
		-conservedMoietySpeciesSet : std::set<std::string>
		-initAssignmentRules : std::set<std::string>
		+getConservedMoietyId(size_t indx) : std::string {query}
		+getEventId(size_t indx) : std::string {query}
		+getFloatingSpeciesId(size_t indx) : std::string {query}
		+getGlobalParameterId(size_t indx) : std::string {query}
		+getRateRuleId(size_t indx) : std::string {query}
		-modelName : std::string
		+getModelName() : std::string& {query}
		-stoichTypes : std::vector<SpeciesReferenceType>
		-conservedMoietyGlobalParameter : std::vector<bool>
		-globalParameterRateRules : std::vector<bool>
		-eventAssignmentsSize : std::vector<size_t>
		+getBoundarySpeciesIds() : std::vector<std::string> {query}
		+getCompartmentIds() : std::vector<std::string> {query}
		+getEventIds() : std::vector<std::string> {query}
		+getFloatingSpeciesIds() : std::vector<std::string> {query}
		+getGlobalParameterIds() : std::vector<std::string> {query}
		+getReactionIds() : std::vector<std::string> {query}
		-stoichIds : std::vector<std::string>
		-conservedMoietyGlobalParameterIndex : std::vector<uint>
		-floatingSpeciesCompartmentIndices : std::vector<uint>
		-stoichColIndx : std::vector<uint>
		-stoichRowIndx : std::vector<uint>
		+getIndSpeciesIndexForConservedMoietyId(std::string id) : std::vector<uint>& {query}
		+getStoichColIndx() : std::vector<uint>& {query}
		+getStoichRowIndx() : std::vector<uint>& {query}
		-eventAttributes : std::vector<unsigned char>
		+getEventAttributes() : std::vector<unsigned char>& {query}
		-independentInitBoundarySpeciesSize : unsigned int
		-independentInitCompartmentSize : unsigned int
		-independentInitFloatingSpeciesSize : unsigned int
		-independentInitGlobalParameterSize : unsigned int
		-displayCompartmentInfo() : void
		-initBoundarySpecies(const libsbml::Model*) : void
		-initCompartments(const libsbml::Model*) : void
		-initEvents(const libsbml::Model* model) : void
		-initFloatingSpecies(const libsbml::Model*, bool conservedMoieties) : void
		-initGlobalParameters(const libsbml::Model* model, bool conservedMoieties) : void
		-initReactions(const libsbml::Model* model) : void
		-loadBinarySpeciesReferenceInfo(std::istream &, SpeciesReferenceInfo &) : void
		+loadState(std::istream &) : void
		-loadStringRefInfoMap(std::istream &, StringRefInfoMap &) : void
		+print() : void {query}
		-saveBinarySpeciesReferenceInfo(std::ostream &, SpeciesReferenceInfo sri) : void {query}
		+saveState(std::ostream &) : void {query}
		-saveStringRefInfoMap(std::ostream &, const StringRefInfoMap &) : void {query}
		-setNamedSpeciesReferenceInfo(unsigned int row, unsigned int column, SpeciesReferenceType type) : void
	}

	class LLVMModelSymbols {
		+LLVMModelSymbols(libsbml::Model const* m, LLVMModelDataSymbols const& sym)
		+~LLVMModelSymbols()
		#nodes : ASTNodeFactory
		#assignmentRules : SymbolForest
		#initialAssignmentRules : SymbolForest
		#initialValues : SymbolForest
		#rateRules : SymbolForest
		+getAssigmentRules() : SymbolForest& {query}
		+getInitialAssignmentRules() : SymbolForest& {query}
		+getInitialValues() : SymbolForest& {query}
		+getRateRules() : SymbolForest& {query}
		#visit(const libsbml::Compartment& x) : bool
		#visit(const libsbml::Species& x) : bool
		#visit(const libsbml::AssignmentRule& x) : bool
		#visit(const libsbml::InitialAssignment& x) : bool
		#visit(const libsbml::RateRule& rule) : bool
		#visit(const libsbml::Reaction& x) : bool
		#visit(const libsbml::Rule& x) : bool
		#visit(const libsbml::Event& event) : bool
		-symbols : const LLVMModelDataSymbols&
		+createStoichiometryNode(int row, int col) : libsbml::ASTNode* {query}
		#getSpeciesReferenceStoichMath(const libsbml::SpeciesReference* reference) : libsbml::ASTNode*
		-model : libsbml::Model const*
		#reactions : std::vector<ReactionSymbols>
		#processElement(SymbolForest& currentSymbols, const libsbml::SBase* element, const libsbml::ASTNode* math) : void
		#processSpecies(SymbolForest& currentSymbols, const libsbml::Species* element, const libsbml::ASTNode* math) : void
	}

	abstract class LoadSymbolResolver {
		#~LoadSymbolResolver()
		+{abstract} loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		+popCacheBlock() : size_t
		+pushCacheBlock() : size_t
		+{abstract} recursiveSymbolPop() : void
		+{abstract} recursiveSymbolPush(const std::string& symbol) : void
	}

	class LoadSymbolResolverBase {
		#LoadSymbolResolverBase(const ModelGeneratorContext& ctx, llvm::Value* modelData)
		#symbolStack : StringStack
		#symbolCache : ValueMapStack
		#modelDataSymbols : const LLVMModelDataSymbols&
		#modelSymbols : const LLVMModelSymbols&
		#modelGenContext : const ModelGeneratorContext&
		#model : const libsbml::Model*
		#builder : llvm::IRBuilder<>&
		#cacheValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args, llvm::Value* value) : llvm::Value*
		+loadReactionRate(const libsbml::Reaction*) : llvm::Value*
		#modelData : llvm::Value*
		+popCacheBlock() : size_t
		+pushCacheBlock() : size_t
		+flushCache() : void
		+recursiveSymbolPop() : void
		+recursiveSymbolPush(const std::string& symbol) : void
	}

	class ModelDataIRBuilder {
		+ModelDataIRBuilder(llvm::Value* modelData, LLVMModelDataSymbols const &, llvm::IRBuilder<> &)
		-symbols : LLVMModelDataSymbols const&
		+{static} createCSRMatrixGetNZ(llvm::IRBuilder<> &, llvm::Value* csrPtr, llvm::Value* row, llvm::Value* col, const llvm::Twine& name) : llvm::CallInst*
		+{static} createCSRMatrixSetNZ(llvm::IRBuilder<> &, llvm::Value* csrPtr, llvm::Value* row, llvm::Value* col, llvm::Value* value, const llvm::Twine& name) : llvm::CallInst*
		+{static} getCSRMatrixGetNZDecl(llvm::Module* module) : llvm::Function*
		+{static} getCSRMatrixSetNZDecl(llvm::Module* module) : llvm::Function*
		-builder : llvm::IRBuilder<>&
		-{static} getModule(llvm::IRBuilder<> &, const char* func) : llvm::Module*
		+{static} createModelDataStructType(llvm::Module* module, llvm::ExecutionEngine* engine, LLVMModelDataSymbols const& symbols) : llvm::StructType*
		+{static} getCSRSparseStructType(llvm::Module* module, llvm::ExecutionEngine* engine) : llvm::StructType*
		+{static} getStructType(llvm::Module* module) : llvm::StructType*
		+createBoundSpeciesAmtGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createBoundSpeciesAmtLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createBoundSpeciesAmtStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createCompGEP(const std::string& id) : llvm::Value*
		+createCompLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createCompStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createFloatSpeciesAmtGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtRateGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtRateLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createFloatSpeciesAmtRateStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createFloatSpeciesAmtStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createGEP(ModelDataFields field, const llvm::Twine& name) : llvm::Value*
		+createGEP(ModelDataFields field, unsigned index, const llvm::Twine& name) : llvm::Value*
		+createGlobalParamGEP(const std::string& id) : llvm::Value*
		+createGlobalParamLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createGlobalParamStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createInitCompGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitCompLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitCompStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createInitFloatSpeciesAmtGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitFloatSpeciesAmtLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitFloatSpeciesAmtStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createInitGlobalParamGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitGlobalParamLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createInitGlobalParamStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createLoad(ModelDataFields field, unsigned index, const llvm::Twine& name) : llvm::Value*
		+createRandomLoad() : llvm::Value*
		+createRateRuleRateGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleRateLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleRateStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createRateRuleValueGEP(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleValueLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createRateRuleValueStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createReactionRateLoad(const std::string& id, const llvm::Twine& name) : llvm::Value*
		+createReactionRateStore(const std::string& id, llvm::Value* value) : llvm::Value*
		+createStoichiometryLoad(unsigned int row, unsigned int col, const llvm::Twine& name) : llvm::Value*
		+createStoichiometryStore(unsigned int row, unsigned int col, llvm::Value* value, const llvm::Twine& name) : llvm::Value*
		+createStore(ModelDataFields field, unsigned index, llvm::Value* value, const llvm::Twine& name) : llvm::Value*
		-modelData : llvm::Value*
		+{static} LLVMModelDataName : static const char*
		+{static} csr_matrixName : static const char*
		+{static} csr_matrix_get_nzName : static const char*
		+{static} csr_matrix_set_nzName : static const char*
		+{static} getModelDataSize(llvm::Module* module, llvm::ExecutionEngine* engine) : unsigned
		-validateStruct(llvm::Value* s, const char* funcName) : void
	}

	class ModelDataLoadSymbolResolver {
		+ModelDataLoadSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~ModelDataLoadSymbolResolver()
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
	}

	class ModelDataStoreSymbolResolver {
		+ModelDataStoreSymbolResolver(llvm::Value* modelData, const libsbml::Model* model, const LLVMModelSymbols& modelSymbols, const LLVMModelDataSymbols& modelDataSymbols, llvm::IRBuilder<>& builder, LoadSymbolResolver& resolver)
		+~ModelDataStoreSymbolResolver()
		-resolver : LoadSymbolResolver&
		-modelDataSymbols : const LLVMModelDataSymbols&
		-modelSymbols : const LLVMModelSymbols&
		-model : const libsbml::Model*
		-builder : llvm::IRBuilder<>&
		-modelData : llvm::Value*
		+storeSymbolValue(const std::string& symbol, llvm::Value* value) : llvm::Value*
	}

	class ModelGeneratorContext {
		+ModelGeneratorContext(std::string const& sbml, unsigned loadSBMLOptions)
		+ModelGeneratorContext(libsbml::SBMLDocument const* doc, unsigned loadSBMLOptions)
		+ModelGeneratorContext()
		+~ModelGeneratorContext()
		+getModelDataSymbols() : LLVMModelDataSymbols& {query}
		+getModelSymbols() : LLVMModelSymbols& {query}
		-modelSymbols : LLVMModelSymbols*
		+getRandom() : Random* {query}
		-random : Random*
		+getConservedMoietyAnalysis() : bool {query}
		+useSymbolCache() : bool {query}
		-symbols : const LLVMModelDataSymbols*
		-model : const libsbml::Model*
		-doc : const libsbml::SBMLDocument*
		+getModel() : libsbml::Model* {query}
		+getDocument() : libsbml::SBMLDocument* {query}
		-ownedDoc : libsbml::SBMLDocument*
		+getExecutionEngine() : llvm::ExecutionEngine& {query}
		-executionEngine : llvm::ExecutionEngine*
		+getBuilder() : llvm::IRBuilder<>& {query}
		-builder : llvm::IRBuilder<>*
		+getContext() : llvm::LLVMContext& {query}
		-context : llvm::LLVMContext*
		+getModule() : llvm::Module* {query}
		-module : llvm::Module*
		-functionPassManager : llvm::legacy::FunctionPassManager*
		+getFunctionPassManager() : llvm::legacy::FunctionPassManager* {query}
		-moietyConverter : rr::conservation::ConservedMoietyConverter*
		-errString : std::string*
		-module_owner : std::unique_ptr<llvm::Module>
		+getOptions() : unsigned {query}
		-options : unsigned
		-addGlobalMapping(const llvm::GlobalValue* gv, void* addr) : void
		-addGlobalMappings() : void
		-cleanup() : void
		-initFunctionPassManager() : void
		+transferObjectsToResources(std::shared_ptr<rrllvm::ModelResources> rc) : void
	}

	class ModelInitialValueStoreSymbolResolver {
		+ModelInitialValueStoreSymbolResolver(llvm::Value* modelData, const libsbml::Model* model, const LLVMModelSymbols& modelSymbols, const LLVMModelDataSymbols& modelDataSymbols, llvm::IRBuilder<>& builder, LoadSymbolResolver& resolver)
		+~ModelInitialValueStoreSymbolResolver()
		-resolver : LoadSymbolResolver&
		-modelDataSymbols : const LLVMModelDataSymbols&
		-modelSymbols : const LLVMModelSymbols&
		-model : const libsbml::Model*
		-builder : llvm::IRBuilder<>&
		-modelData : llvm::Value*
		+storeSymbolValue(const std::string& symbol, llvm::Value* value) : llvm::Value*
	}

	class ModelInitialValueSymbolResolver {
		+ModelInitialValueSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~ModelInitialValueSymbolResolver()
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
	}

	class ModelResources {
		+ModelResources()
		+~ModelResources()
		+evalConversionFactorPtr : EvalConversionFactorCodeGen::FunctionPtr
		+evalInitialConditionsPtr : EvalInitialConditionsCodeGen::FunctionPtr
		+evalRateRuleRatesPtr : EvalRateRuleRatesCodeGen::FunctionPtr
		+evalReactionRatesPtr : EvalReactionRatesCodeGen::FunctionPtr
		+evalVolatileStoichPtr : EvalVolatileStoichCodeGen::FunctionPtr
		+eventAssignPtr : EventAssignCodeGen::FunctionPtr
		+eventTriggerPtr : EventTriggerCodeGen::FunctionPtr
		+getBoundarySpeciesAmountPtr : GetBoundarySpeciesAmountCodeGen::FunctionPtr
		+getBoundarySpeciesConcentrationPtr : GetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		+getCompartmentInitVolumesPtr : GetCompartmentInitVolumeCodeGen::FunctionPtr
		+getCompartmentVolumePtr : GetCompartmentVolumeCodeGen::FunctionPtr
		+getEventDelayPtr : GetEventDelayCodeGen::FunctionPtr
		+getEventPriorityPtr : GetEventPriorityCodeGen::FunctionPtr
		+getEventTriggerPtr : GetEventTriggerCodeGen::FunctionPtr
		+getFloatingSpeciesAmountPtr : GetFloatingSpeciesAmountCodeGen::FunctionPtr
		+getFloatingSpeciesConcentrationPtr : GetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		+getFloatingSpeciesInitAmountsPtr : GetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		+getFloatingSpeciesInitConcentrationsPtr : GetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		+getGlobalParameterPtr : GetGlobalParameterCodeGen::FunctionPtr
		+getGlobalParameterInitValuePtr : GetGlobalParameterInitValueCodeGen::FunctionPtr
		+setBoundarySpeciesAmountPtr : SetBoundarySpeciesAmountCodeGen::FunctionPtr
		+setBoundarySpeciesConcentrationPtr : SetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		+setCompartmentInitVolumesPtr : SetCompartmentInitVolumeCodeGen::FunctionPtr
		+setCompartmentVolumePtr : SetCompartmentVolumeCodeGen::FunctionPtr
		+setFloatingSpeciesAmountPtr : SetFloatingSpeciesAmountCodeGen::FunctionPtr
		+setFloatingSpeciesConcentrationPtr : SetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		+setFloatingSpeciesInitAmountsPtr : SetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		+setFloatingSpeciesInitConcentrationsPtr : SetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		+setGlobalParameterPtr : SetGlobalParameterCodeGen::FunctionPtr
		+setGlobalParameterInitValuePtr : SetGlobalParameterInitValueCodeGen::FunctionPtr
		+symbols : const LLVMModelDataSymbols*
		+random : const class Random*
		+errStr : const std::string*
		+executionEngine : llvm::ExecutionEngine*
		-{static} createGlobalMappingFunction(const char* funcName, llvm::FunctionType* funcType, llvm::Module*) : llvm::Function*
		+context : llvm::LLVMContext*
		+module : llvm::Module*
		+moduleStr : std::string
		-addGlobalMapping(std::string name, void*) : void
		-addGlobalMappings() : void
		+loadState(std::istream& in, unsigned int loadOpt) : void
		+saveState(std::ostream& out) : void {query}
	}

	class RR_DECLSPECLLVMCompiler {
		+LLVMCompiler()
		+~LLVMCompiler()
		+setCompiler(const std::string& compiler) : bool
		+setCompilerLocation(const std::string& path) : bool
		+setSupportCodeFolder(const std::string& path) : bool
		+getCompiler() : std::string {query}
		+getCompilerLocation() : std::string {query}
		+getDefaultTargetTriple() : std::string
		+getHostCPUName() : std::string
		+getProcessTriple() : std::string
		+getSupportCodeFolder() : std::string {query}
		+getVersion() : std::string
	}

	class RR_DECLSPECLLVMExecutableModel {
		+LLVMExecutableModel()
		+LLVMExecutableModel(const std::shared_ptr<ModelResources>& resources, LLVMModelData* modelData)
		+LLVMExecutableModel(std::istream& in, unsigned int modelGeneratorOpt)
		+~LLVMExecutableModel()
		-evalConversionFactorPtr : EvalConversionFactorCodeGen::FunctionPtr
		-evalInitialConditionsPtr : EvalInitialConditionsCodeGen::FunctionPtr
		-evalRateRuleRatesPtr : EvalRateRuleRatesCodeGen::FunctionPtr
		-evalReactionRatesPtr : EvalReactionRatesCodeGen::FunctionPtr
		-evalVolatileStoichPtr : EvalVolatileStoichCodeGen::FunctionPtr
		-eventAssignPtr : EventAssignCodeGen::FunctionPtr
		-eventTriggerPtr : EventTriggerCodeGen::FunctionPtr
		-getBoundarySpeciesAmountPtr : GetBoundarySpeciesAmountCodeGen::FunctionPtr
		-getBoundarySpeciesConcentrationPtr : GetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		-getCompartmentInitVolumesPtr : GetCompartmentInitVolumeCodeGen::FunctionPtr
		-getCompartmentVolumePtr : GetCompartmentVolumeCodeGen::FunctionPtr
		-getEventDelayPtr : GetEventDelayCodeGen::FunctionPtr
		-getEventPriorityPtr : GetEventPriorityCodeGen::FunctionPtr
		-getEventTriggerPtr : GetEventTriggerCodeGen::FunctionPtr
		-getFloatingSpeciesAmountPtr : GetFloatingSpeciesAmountCodeGen::FunctionPtr
		-getFloatingSpeciesConcentrationPtr : GetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		-getFloatingSpeciesInitAmountsPtr : GetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		-getFloatingSpeciesInitConcentrationsPtr : GetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		-getGlobalParameterPtr : GetGlobalParameterCodeGen::FunctionPtr
		-getGlobalParameterInitValuePtr : GetGlobalParameterInitValueCodeGen::FunctionPtr
		-{static} dummy() : LLVMExecutableModel*
		-modelData : LLVMModelData*
		-selectionRecordCache : SelectionMap
		-setBoundarySpeciesAmountPtr : SetBoundarySpeciesAmountCodeGen::FunctionPtr
		-setBoundarySpeciesConcentrationPtr : SetBoundarySpeciesConcentrationCodeGen::FunctionPtr
		-setCompartmentInitVolumesPtr : SetCompartmentInitVolumeCodeGen::FunctionPtr
		-setCompartmentVolumePtr : SetCompartmentVolumeCodeGen::FunctionPtr
		-setFloatingSpeciesAmountPtr : SetFloatingSpeciesAmountCodeGen::FunctionPtr
		-setFloatingSpeciesConcentrationPtr : SetFloatingSpeciesConcentrationCodeGen::FunctionPtr
		-setFloatingSpeciesInitAmountsPtr : SetFloatingSpeciesInitAmountCodeGen::FunctionPtr
		-setFloatingSpeciesInitConcentrationsPtr : SetFloatingSpeciesInitConcentrationCodeGen::FunctionPtr
		-setGlobalParameterPtr : SetGlobalParameterCodeGen::FunctionPtr
		-setGlobalParameterInitValuePtr : SetGlobalParameterInitValueCodeGen::FunctionPtr
		-tieBreakMap : TieBreakMap
		-applyEvents(unsigned char* prevEventState, unsigned char* currEventState) : bool
		+getEventInitialValue(size_t event) : bool
		+getEventPersistent(size_t event) : bool
		+getEventTieBreak(size_t eventA, size_t eventB) : bool
		+getEventTrigger(size_t event) : bool
		+getEventUseValuesFromTriggerTime(size_t event) : bool
		-symbols : const LLVMModelDataSymbols*
		-resources : cxx11_ns::shared_ptr<ModelResources>
		-conversionFactor : double
		+getEventDelay(size_t event) : double
		+getEventPriority(size_t event) : double
		+getFloatingSpeciesAmountRate(size_t index, const double* reactionRates) : double
		+getNextPendingEventTime(bool pop) : double
		+getRandom() : double
		+getStoichiometry(int speciesIndex, int reactionIndex) : double
		+getTime() : double
		+getValue(const std::string& id) : double
		+applyEvents(double timeEnd, const unsigned char* previousEventState, const double* initialState, double* finalState) : int
		+getBoundarySpeciesAmounts(size_t len, int const* indx, double* values) : int
		+getBoundarySpeciesConcentrations(size_t len, int const* indx, double* values) : int
		+getBoundarySpeciesIndex(const std::string &) : int
		+getCompartmentIndex(const std::string &) : int
		+getCompartmentIndexForFloatingSpecies(size_t index) : int
		+getCompartmentInitVolumes(size_t len, const int* indx, double* values) : int
		+getCompartmentVolumes(size_t len, int const* indx, double* values) : int
		+getConservedMoietyIndex(const std::string& name) : int
		+getConservedMoietyValues(size_t len, int const* indx, double* values) : int
		+getEventIndex(const std::string& eid) : int
		+getEventTriggers(size_t len, const int* indx, unsigned char* eventState) : int
		+getFloatingSpeciesAmountRates(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesAmounts(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesConcentrationRates(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesConcentrations(size_t len, int const* indx, double* values) : int
		+getFloatingSpeciesIndex(const std::string &) : int
		+getFloatingSpeciesInitAmounts(size_t size_t, const int* indx, double* values) : int
		+getFloatingSpeciesInitConcentrations(size_t len, const int* indx, double* values) : int
		+getGlobalParameterIndex(const std::string &) : int
		+getGlobalParameterInitValues(size_t len, const int* indx, double* values) : int
		+getGlobalParameterValues(size_t len, int const* indx, double* values) : int
		+getNumBoundarySpecies() : int
		+getNumCompartments() : int
		+getNumConservedMoieties() : int
		+getNumDepFloatingSpecies() : int
		+getNumEvents() : int
		+getNumFloatingSpecies() : int
		+getNumGlobalParameters() : int
		+getNumIndFloatingSpecies() : int
		+getNumRateRules() : int
		+getNumReactions() : int
		+getPendingEventSize() : int
		+getRateRueRates(size_t len, int const* indx, double* values) : int
		+getReactionIndex(const std::string &) : int
		+getReactionRates(size_t len, int const* indx, double* values) : int
		+getStateVector(double* stateVector) : int
		+getStoichiometryMatrix(int* rows, int* cols, double** data) : int
		+getSupportedIdTypes() : int
		-getValues(double (* ) ( LLVMModelData*, size_t ) funcPtr, size_t len, const int* indx, double* values) : int
		+setBoundarySpeciesAmounts(size_t len, int const* indx, double const* values) : int
		+setBoundarySpeciesConcentrations(size_t len, int const* indx, double const* values) : int
		+setCompartmentInitVolumes(size_t len, const int* indx, double const* values) : int
		+setCompartmentVolumes(size_t len, int const* indx, const double* values) : int
		+setConservedMoietyValues(size_t len, int const* indx, const double* values) : int
		+setFloatingSpeciesAmounts(size_t len, int const* indx, const double* values) : int
		+setFloatingSpeciesConcentrations(size_t len, int const* indx, double const* values) : int
		+setFloatingSpeciesInitAmounts(size_t len, const int* indx, double const* values) : int
		+setFloatingSpeciesInitConcentrations(size_t len, const int* indx, double const* values) : int
		+setGlobalParameterInitValues(size_t len, const int* indx, double const* values) : int
		+setGlobalParameterValues(size_t len, int const* indx, const double* values) : int
		+setStateVector(const double* stateVector) : int
		-setValues(bool (* ) ( LLVMModelData*, int, double ) funcPtr, GetNameFuncPtr, size_t len, const int* indx, const double* values) : int
		+getRandomSeed() : int64_t
		+getEventListener(size_t index) : rr::EventListenerPtr
		-getSelection(const std::string& sel) : rr::SelectionRecord&
		-pendingEvents : rrllvm::EventQueue
		+getEventBufferSize(size_t event) : size_t
		+getBoundarySpeciesId(size_t index) : std::string
		+getCompartmentId(size_t) : std::string
		+getConservedMoietyId(size_t index) : std::string
		+getEventId(size_t index) : std::string
		+getExecutableModelDesc() : std::string {query}
		+getFloatingSpeciesId(size_t index) : std::string
		+getGlobalParameterId(size_t) : std::string
		+getInfo() : std::string
		+getModelName() : std::string
		+getReactionId(size_t) : std::string
		+getStateVectorId(size_t index) : std::string
		-eventAssignTimes : std::vector<double>
		-eventListeners : std::vector<rr::EventListenerPtr>
		+getRateRuleSymbols() : std::vector<std::string> {query}
		-dirty : uint32_t
		-flags : uint32_t
		+getFlags() : uint32_t {query}
		+assignEvent(size_t eventId, double* data) : void
		-copyCachedModel(a_type* src, b_type* dst) : void
		+evalInitialConditions(uint32_t flags) : void
		+getEventData(size_t eventId, double* data) : void
		+getEventIds(std::list<std::string>& out) : void
		+getEventRoots(double time, const double* y, double* gdot) : void
		+getIds(int types, std::list<std::string>& ids) : void
		+getRateRuleValues(double* rateRuleValues) : void
		+getStateVectorRate(double time, const double* y, double* dydt) : void
		+print(std::ostream& stream) : void
		+reset() : void
		+reset(int options) : void
		+resetEvents() : void
		+saveState(std::ostream& out) : void
		+setEventListener(size_t index, rr::EventListenerPtr eventHandler) : void
		+setFlags(uint32_t val) : void
		+setRandomSeed(int64_t) : void
		+setTime(double _time) : void
		+setValue(const std::string& id, double value) : void
		+testConstraints() : void
	}

	class RR_DECLSPECLLVMModelGenerator {
		+{static} createModel(const std::string& sbml, std::uint32_t options) : rr::ExecutableModel*
		+{static} regenerateModel(rr::ExecutableModel* oldModel, libsbml::SBMLDocument* doc, unsigned int options) : rr::ExecutableModel*
	}

	class Random {
		+Random(class ModelGeneratorContext& ctx)
		+Random(const Random& other)
		+Random()
		+~Random()
		+operator=(const Random& rhs) : Random&
		+{static} max() : constexpr unsigned long long
		+{static} min() : constexpr unsigned long long
		+engine : cxx11_ns::mt19937
		-normalized_uniform_dist : cxx11_ns::uniform_real<double>
		-normalized_uniform_dist : cxx11_ns::uniform_real_distribution<double>
		+max() : double
		+min() : double
		+operator()() : double
		+getMaxTries() : int {query}
		-mMaxTries : int
		+getRandomSeed() : int64_t
		-randomSeed : int64_t
		+setMaxTries(int maxTries) : void
		+setRandomSeed(int64_t) : void
	}

	class SBMLInitialValueSymbolResolver {
		+SBMLInitialValueSymbolResolver(llvm::Value* modelData, const ModelGeneratorContext& ctx)
		+~SBMLInitialValueSymbolResolver()
		+loadSymbolValue(const std::string& symbol, const llvm::ArrayRef<llvm::Value*>& args) : llvm::Value*
		-modelData : llvm::Value*
	}

	class SetBoundarySpeciesAmountCodeGen {
		+SetBoundarySpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~SetBoundarySpeciesAmountCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetBoundarySpeciesConcentrationCodeGen {
		+SetBoundarySpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~SetBoundarySpeciesConcentrationCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetCompartmentInitVolumeCodeGen {
		+SetCompartmentInitVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~SetCompartmentInitVolumeCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetCompartmentVolumeCodeGen {
		+SetCompartmentVolumeCodeGen(const ModelGeneratorContext& mgc)
		+~SetCompartmentVolumeCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesAmountCodeGen {
		+SetFloatingSpeciesAmountCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesAmountCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesConcentrationCodeGen {
		+SetFloatingSpeciesConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesConcentrationCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesInitAmountCodeGen {
		+SetFloatingSpeciesInitAmountCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesInitAmountCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetFloatingSpeciesInitConcentrationCodeGen {
		+SetFloatingSpeciesInitConcentrationCodeGen(const ModelGeneratorContext& mgc)
		+~SetFloatingSpeciesInitConcentrationCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetGlobalParameterCodeGen {
		+SetGlobalParameterCodeGen(const ModelGeneratorContext& mgc)
		+~SetGlobalParameterCodeGen()
		+getIds() : StringIntVector
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetGlobalParameterInitValueCodeGen {
		+SetGlobalParameterInitValueCodeGen(const ModelGeneratorContext& mgc)
		+~SetGlobalParameterInitValueCodeGen()
		+getIds() : StringIntVector
		+isInitialValue() : bool
		+{static} FunctionName : static const char*
		+{static} IndexArgName : static const char*
	}

	class SetInitialValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+SetInitialValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~SetInitialValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	class SetValueCodeGenBase <template<typename Derived, bool substanceUnits>> {
		+SetValueCodeGenBase(const ModelGeneratorContext& mgc)
		+~SetValueCodeGenBase()
		+codeGen() : llvm::Value*
	}

	abstract class StoreSymbolResolver {
		#~StoreSymbolResolver()
		+{abstract} storeSymbolValue(const std::string& symbol, llvm::Value* value) : llvm::Value*
	}

	class SymbolForest {
		-_end : ConstIterator
		+find(const std::map<std::string, const libsbml::ASTNode*>::key_type& x) : ConstIterator {query}
		+end() : ConstIterator& {query}
		+boundarySpecies : std::map<std::string, const libsbml::ASTNode*>
		+compartments : std::map<std::string, const libsbml::ASTNode*>
		+floatingSpecies : std::map<std::string, const libsbml::ASTNode*>
		+globalParameters : std::map<std::string, const libsbml::ASTNode*>
		+speciesReferences : std::map<std::string, const libsbml::ASTNode*>
	}

	class SymbolForest::ConstIterator {
		-ConstIterator(_const_iterator i)
		-ConstIterator()
		+ConstIterator(ConstIterator o)
		+operator=(ConstIterator o) : ConstIterator&
		+operator->() : ConstIterator* {query}
		-end : bool
		+operator!=(ConstIterator other) : bool {query}
		+second : const libsbml::ASTNode*
	}

	enum EventAtributes {
		EventInitialValue
		EventPersistent
		EventUseValuesFromTriggerTime
	}

	enum LLVMModelDataSymbols::SpeciesReferenceType {
		Modifier
		MultiReactantProduct
		Product
		Reactant
	}

	enum LLVMModelDataSymbols::SymbolIndexType {
		BOUNDARY_SPECIES
		COMPARTMENT
		EVENT
		FLOATING_SPECIES
		GLOBAL_PARAMETER
		INVALID_SYMBOL
		REACTION
	}

	enum LLVMModelSymbols::SpeciesReferenceType {
		Product
		Reactant
	}

	enum ModelDataFields {
		BoundarySpeciesAmounts
		BoundarySpeciesAmountsAlias
		CompartmentVolumes
		CompartmentVolumesAlias
		Flags
		FloatingSpeciesAmountRates
		FloatingSpeciesAmountsAlias
		GlobalParameters
		GlobalParametersAlias
		InitBoundarySpeciesAmounts
		InitBoundarySpeciesAmountsAlias
		InitCompartmentVolumes
		InitCompartmentVolumesAlias
		InitFloatingSpeciesAmounts
		InitFloatingSpeciesAmountsAlias
		InitGlobalParameters
		InitGlobalParametersAlias
		NotSafe_FloatingSpeciesAmounts
		NotSafe_RateRuleValues
		NumEvents
		NumIndBoundarySpecies
		NumIndCompartments
		NumIndFloatingSpecies
		NumIndGlobalParameters
		NumInitBoundarySpecies
		NumInitCompartments
		NumInitFloatingSpecies
		NumInitGlobalParameters
		NumRateRules
		NumReactions
		RandomPtr
		RateRuleRates
		RateRuleValuesAlias
		ReactionRates
		ReactionRatesAlias
		Size
		StateVector
		StateVectorRate
		StateVectorSize
		Stoichiometry
		Time
	}

	enum RR_DECLSPECLLVMExecutableModel::empty {
		DIRTY_CONSERVED_MOIETIES
		DIRTY_INIT_SPECIES
		DIRTY_REACTION_RATES
	}

	class LLVMModelData {
		+random : class Random*
		+data : double
		+time : double
		+boundarySpeciesAmountsAlias : double*
		+compartmentVolumesAlias : double*
		+floatingSpeciesAmountRates : double*
		+floatingSpeciesAmountsAlias : double*
		+globalParametersAlias : double*
		+initBoundarySpeciesAmountsAlias : double*
		+initCompartmentVolumesAlias : double*
		+initFloatingSpeciesAmountsAlias : double*
		+initGlobalParametersAlias : double*
		+rateRuleRates : double*
		+rateRuleValuesAlias : double*
		+reactionRatesAlias : double*
		+stateVector : double*
		+stateVectorRate : double*
		+stoichiometry : rr::csr_matrix*
		+flags : unsigned
		+numEvents : unsigned
		+numIndBoundarySpecies : unsigned
		+numIndCompartments : unsigned
		+numIndFloatingSpecies : unsigned
		+numIndGlobalParameters : unsigned
		+numInitBoundarySpecies : unsigned
		+numInitCompartments : unsigned
		+numInitFloatingSpecies : unsigned
		+numInitGlobalParameters : unsigned
		+numRateRules : unsigned
		+numReactions : unsigned
		+size : unsigned
		+stateVectorSize : unsigned
	}

	class LLVMModelDataSymbols::SpeciesReferenceInfo {
		+type : SpeciesReferenceType
		+id : std::string
		+column : unsigned int
		+row : unsigned int
	}

	class LLVMModelSymbols::ReactionSymbols {
		+products : IntASTNodeListMap
		+reactants : IntASTNodeListMap
	}
}






rrllvm.CodeGenBase <|- - rrllvm.EvalConversionFactorCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalInitialConditionsCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalRateRuleRatesCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalReactionRatesCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EvalVolatileStoichCodeGen


rrllvm.CodeGenBase <|- - rrllvm.EventCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.GetEventValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.GetInitialValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.GetValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.SetInitialValueCodeGenBase


rrllvm.CodeGenBase <|- - rrllvm.SetValueCodeGenBase


rrllvm.EventCodeGenBase <|- - rrllvm.EventAssignCodeGen


rrllvm.EventCodeGenBase <|- - rrllvm.EventTriggerCodeGen


rrllvm.GetEventValueCodeGenBase <|- - rrllvm.GetEventDelayCodeGen


rrllvm.GetEventValueCodeGenBase <|- - rrllvm.GetEventPriorityCodeGen


rrllvm.GetEventValueCodeGenBase <|- - rrllvm.GetEventTriggerCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetCompartmentInitVolumeCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesInitAmountCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesInitConcentrationCodeGen


rrllvm.GetInitialValueCodeGenBase <|- - rrllvm.GetGlobalParameterInitValueCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetBoundarySpeciesAmountCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetBoundarySpeciesConcentrationCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetCompartmentVolumeCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesAmountCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetFloatingSpeciesConcentrationCodeGen


rrllvm.GetValueCodeGenBase <|- - rrllvm.GetGlobalParameterCodeGen


rrllvm.LoadSymbolResolver <|- - rrllvm.FunctionResolver


rrllvm.LoadSymbolResolver <|- - rrllvm.KineticLawParameterResolver


rrllvm.LoadSymbolResolver <|- - rrllvm.LoadSymbolResolverBase


rrllvm.LoadSymbolResolverBase <|- - rrllvm.ModelDataLoadSymbolResolver


rrllvm.LoadSymbolResolverBase <|- - rrllvm.ModelInitialValueSymbolResolver


rrllvm.LoadSymbolResolverBase <|- - rrllvm.SBMLInitialValueSymbolResolver


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetCompartmentInitVolumeCodeGen


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesInitAmountCodeGen


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesInitConcentrationCodeGen


rrllvm.SetInitialValueCodeGenBase <|- - rrllvm.SetGlobalParameterInitValueCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetBoundarySpeciesAmountCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetBoundarySpeciesConcentrationCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetCompartmentVolumeCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesAmountCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetFloatingSpeciesConcentrationCodeGen


rrllvm.SetValueCodeGenBase <|- - rrllvm.SetGlobalParameterCodeGen


rrllvm.StoreSymbolResolver <|- - rrllvm.ModelDataStoreSymbolResolver


rrllvm.StoreSymbolResolver <|- - rrllvm.ModelInitialValueStoreSymbolResolver






rrllvm.ASTNodeCodeGen *- - rrllvm.LoadSymbolResolver


rrllvm.ASTNodeCodeGen *- - rrllvm.ModelGeneratorContext


rrllvm.ASTNodeCodeGenScalarTicket *- - rrllvm.ASTNodeCodeGen


rrllvm.AssignmentRuleEvaluator *- - rrllvm.SymbolForest


rrllvm.CodeGenBase *- - rrllvm.LLVMModelDataSymbols


rrllvm.CodeGenBase *- - rrllvm.LLVMModelSymbols


rrllvm.CodeGenBase *- - rrllvm.ModelGeneratorContext


rrllvm.FunctionResolver *- - rrllvm.LoadSymbolResolver


rrllvm.FunctionResolver *- - rrllvm.ModelGeneratorContext


rrllvm.KineticLawParameterResolver *- - rrllvm.LoadSymbolResolver


rrllvm.LLVMModelData o- - rrllvm.Random


rrllvm.LLVMModelDataIRBuilderTesting *- - rrllvm.LLVMModelDataSymbols


rrllvm.LLVMModelSymbols *- - rrllvm.ASTNodeFactory


rrllvm.LLVMModelSymbols *- - rrllvm.LLVMModelDataSymbols


rrllvm.LLVMModelSymbols "4" *- - rrllvm.SymbolForest


rrllvm.LoadSymbolResolverBase *- - rrllvm.LLVMModelDataSymbols


rrllvm.LoadSymbolResolverBase *- - rrllvm.LLVMModelSymbols


rrllvm.LoadSymbolResolverBase *- - rrllvm.ModelGeneratorContext


rrllvm.ModelDataIRBuilder *- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelDataStoreSymbolResolver *- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelDataStoreSymbolResolver *- - rrllvm.LLVMModelSymbols


rrllvm.ModelDataStoreSymbolResolver *- - rrllvm.LoadSymbolResolver


rrllvm.ModelGeneratorContext o- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelGeneratorContext o- - rrllvm.LLVMModelSymbols


rrllvm.ModelGeneratorContext o- - rrllvm.Random


rrllvm.ModelInitialValueStoreSymbolResolver *- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelInitialValueStoreSymbolResolver *- - rrllvm.LLVMModelSymbols


rrllvm.ModelInitialValueStoreSymbolResolver *- - rrllvm.LoadSymbolResolver


rrllvm.ModelResources *- - rrllvm.EvalConversionFactorCodeGen


rrllvm.ModelResources *- - rrllvm.EvalInitialConditionsCodeGen


rrllvm.ModelResources *- - rrllvm.EvalRateRuleRatesCodeGen


rrllvm.ModelResources *- - rrllvm.EvalReactionRatesCodeGen


rrllvm.ModelResources *- - rrllvm.EvalVolatileStoichCodeGen


rrllvm.ModelResources *- - rrllvm.EventAssignCodeGen


rrllvm.ModelResources *- - rrllvm.EventTriggerCodeGen


rrllvm.ModelResources *- - rrllvm.GetBoundarySpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.GetBoundarySpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.GetCompartmentInitVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.GetCompartmentVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.GetEventDelayCodeGen


rrllvm.ModelResources *- - rrllvm.GetEventPriorityCodeGen


rrllvm.ModelResources *- - rrllvm.GetEventTriggerCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesInitAmountCodeGen


rrllvm.ModelResources *- - rrllvm.GetFloatingSpeciesInitConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.GetGlobalParameterCodeGen


rrllvm.ModelResources *- - rrllvm.GetGlobalParameterInitValueCodeGen


rrllvm.ModelResources o- - rrllvm.LLVMModelDataSymbols


rrllvm.ModelResources o- - rrllvm.Random


rrllvm.ModelResources *- - rrllvm.SetBoundarySpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.SetBoundarySpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.SetCompartmentInitVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.SetCompartmentVolumeCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesAmountCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesInitAmountCodeGen


rrllvm.ModelResources *- - rrllvm.SetFloatingSpeciesInitConcentrationCodeGen


rrllvm.ModelResources *- - rrllvm.SetGlobalParameterCodeGen


rrllvm.ModelResources *- - rrllvm.SetGlobalParameterInitValueCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalConversionFactorCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalInitialConditionsCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalRateRuleRatesCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalReactionRatesCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EvalVolatileStoichCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EventAssignCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EventQueue


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.EventTriggerCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetBoundarySpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetBoundarySpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetCompartmentInitVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetCompartmentVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetEventDelayCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetEventPriorityCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetEventTriggerCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesInitAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetFloatingSpeciesInitConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetGlobalParameterCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.GetGlobalParameterInitValueCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel o- - rrllvm.LLVMModelData


rrllvm.RR_DECLSPECLLVMExecutableModel o- - rrllvm.LLVMModelDataSymbols


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.ModelResources


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetBoundarySpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetBoundarySpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetCompartmentInitVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetCompartmentVolumeCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesInitAmountCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetFloatingSpeciesInitConcentrationCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetGlobalParameterCodeGen


rrllvm.RR_DECLSPECLLVMExecutableModel *- - rrllvm.SetGlobalParameterInitValueCodeGen







rrllvm.LLVMModelDataSymbols +- - rrllvm.LLVMModelDataSymbols::SpeciesReferenceInfo


rrllvm.LLVMModelDataSymbols +- - rrllvm.LLVMModelDataSymbols::SpeciesReferenceType


rrllvm.LLVMModelDataSymbols +- - rrllvm.LLVMModelDataSymbols::SymbolIndexType


rrllvm.LLVMModelSymbols +- - rrllvm.LLVMModelSymbols::ReactionSymbols


rrllvm.LLVMModelSymbols +- - rrllvm.LLVMModelSymbols::SpeciesReferenceType


rrllvm.RR_DECLSPECLLVMExecutableModel +- - rrllvm.RR_DECLSPECLLVMExecutableModel::empty


rrllvm.SymbolForest +- - rrllvm.SymbolForest::ConstIterator




@enduml

PlantUML version 1.2021.7(Sun May 23 13:40:07 BST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: GB
--></g></svg>