<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classException" kind="class" language="C++" prot="public">
    <compoundname>Exception</compoundname>
    <basecompoundref prot="public" virt="non-virtual">exception</basecompoundref>
    <derivedcompoundref refid="classRedlandLibrdfException" prot="public" virt="non-virtual">RedlandLibrdfException</derivedcompoundref>
    <derivedcompoundref refid="classRedlandNullPointerException" prot="public" virt="non-virtual">RedlandNullPointerException</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classException_1a5d59cc46086c61391ed26773ce861780" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Exception::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/LibrdfException.h" line="46" column="1" bodyfile="src/redland/RedlandWrapper/src/LibrdfException.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classException_1ac541ead5c20548813d7dea73c28c7fab" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Exception::Exception</definition>
        <argsstring>(const char *message)</argsstring>
        <name>Exception</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor (C strings). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>C-style string error message. The string contents are copied upon construction. Hence, responsibility for deleting the char* lies with the caller. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/LibrdfException.h" line="19" column="1" bodyfile="src/redland/RedlandWrapper/src/LibrdfException.h" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classException_1a0b1693d4d5007815322070c907ee5cc2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Exception::Exception</definition>
        <argsstring>(std::string message)</argsstring>
        <name>Exception</name>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor (C++ STL strings). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The error message. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/LibrdfException.h" line="26" column="1" bodyfile="src/redland/RedlandWrapper/src/LibrdfException.h" bodystart="26" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classException_1ab834fdbc275748cf287b994503521ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Exception::~Exception</definition>
        <argsstring>() noexcept override=default</argsstring>
        <name>~Exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. Virtual to allow for subclassing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/LibrdfException.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classException_1ae7ba8334eb35e001b4b0c6df9339c0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Exception::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the (constant) error description. <simplesect kind="return"><para>A pointer to a const char*. The underlying memory is in posession of the <ref refid="classException" kindref="compound">Exception</ref> object. Callers must not attempt to free the memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/redland/RedlandWrapper/src/LibrdfException.h" line="39" column="1" bodyfile="src/redland/RedlandWrapper/src/LibrdfException.h" bodystart="39" bodyend="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="61">
        <label>RedlandNullPointerException</label>
        <link refid="classRedlandNullPointerException"/>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>RedlandLibrdfException</label>
        <link refid="classRedlandLibrdfException"/>
        <childnode refid="58" relation="public-inheritance">
        </childnode>
      </node>
      <node id="58">
        <label>Exception</label>
        <link refid="classException"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
      </node>
      <node id="59">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="62">
        <label>Exception</label>
        <link refid="classException"/>
        <childnode refid="63" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="src/redland/RedlandWrapper/src/LibrdfException.h" line="11" column="1" bodyfile="src/redland/RedlandWrapper/src/LibrdfException.h" bodystart="11" bodyend="47"/>
    <listofallmembers>
      <member refid="classException_1ac541ead5c20548813d7dea73c28c7fab" prot="public" virt="non-virtual"><scope>Exception</scope><name>Exception</name></member>
      <member refid="classException_1a0b1693d4d5007815322070c907ee5cc2" prot="public" virt="non-virtual"><scope>Exception</scope><name>Exception</name></member>
      <member refid="classException_1a5d59cc46086c61391ed26773ce861780" prot="protected" virt="non-virtual"><scope>Exception</scope><name>msg_</name></member>
      <member refid="classException_1ae7ba8334eb35e001b4b0c6df9339c0dc" prot="public" virt="non-virtual"><scope>Exception</scope><name>what</name></member>
      <member refid="classException_1ab834fdbc275748cf287b994503521ada" prot="public" virt="non-virtual"><scope>Exception</scope><name>~Exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
