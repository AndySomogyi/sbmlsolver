<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classomexmeta_1_1Triple" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Triple</compoundname>
    <basecompoundref refid="classredland_1_1LibrdfStatement" prot="public" virt="non-virtual">redland::LibrdfStatement</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Triple_1ac73ca3aad0e993e1ff26bea1b5f531a1" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::local_uri_</definition>
        <argsstring></argsstring>
        <name>local_uri_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="38" column="1" bodyfile="src/omexmeta/Triple.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1Triple_1af43736e46ee06c5236149c3cabe89dfe" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::model_uri_</definition>
        <argsstring></argsstring>
        <name>model_uri_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="39" column="1" bodyfile="src/omexmeta/Triple.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ae87525e0bb65c6ce86022b0786d3bd5c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(librdf_statement *statement)</argsstring>
        <name>Triple</name>
        <param>
          <type>librdf_statement *</type>
          <declname>statement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="37" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a07e967036bbc29feb13ef8a0ece2d8b8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>()=default</argsstring>
        <name>Triple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1aaed857f9356dc3a7414f06f393a75ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(const Subject &amp;subject, const PredicatePtr &amp;predicate_ptr, const Resource &amp;resource)</argsstring>
        <name>Triple</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Subject" kindref="compound">Subject</ref> &amp;</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const PredicatePtr &amp;</type>
          <declname>predicate_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="48" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="9" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1adc457c78ec059eb71602e7ea4f763582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(librdf_node *subject, librdf_node *predicate, librdf_node *resource)</argsstring>
        <name>Triple</name>
        <param>
          <type>librdf_node *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>librdf_node *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>librdf_node *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="50" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="15" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1cb45dd3a5778f0e0e92e4a185da9400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Triple::getLocalUri</definition>
        <argsstring>() const</argsstring>
        <name>getLocalUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="54" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a6694daa46597ea91dda045aa0d5e6cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::setLocalUri</definition>
        <argsstring>(std::string localUri)</argsstring>
        <name>setLocalUri</name>
        <param>
          <type>std::string</type>
          <declname>localUri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="59" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1afd918ecccfa23079d9cb70f2e1a3e9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::setModelUri</definition>
        <argsstring>(const std::string &amp;model_uri)</argsstring>
        <name>setModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="64" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1aabfef726172656b6c61c602b4d8d33e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::str</definition>
        <argsstring>(const std::string &amp;format=&quot;turtle&quot;, const std::string &amp;base=(std::filesystem::current_path()/=&quot;annotations.rdf&quot;).string(), std::string omex_name=&quot;NewOmex.omex/&quot;, std::string model_name=&quot;NewModel.xml#&quot;) const</argsstring>
        <name>str</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>base</declname>
          <defval>(std::filesystem::current_path()/=&quot;annotations.rdf&quot;).string()</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
          <defval>&quot;NewOmex.omex/&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_name</declname>
          <defval>&quot;NewModel.xml#&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="73" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="24" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a3f3868622349d3a3e14ed3e4b21d49a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::freeTriple</definition>
        <argsstring>()</argsstring>
        <name>freeTriple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="78" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a2b673a8166a19fb4feae0fc42d31c105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setAbout</definition>
        <argsstring>(std::string omex_name, const std::string &amp;model_name, std::string metaid)</argsstring>
        <name>setAbout</name>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="80" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="92" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a6329b09efb05005d248790e8a3d507f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setAbout</definition>
        <argsstring>(std::string metaid)</argsstring>
        <name>setAbout</name>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="82" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="115" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a69df88d19e2f9077fccfa9543dadd15f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::getAbout</definition>
        <argsstring>() const</argsstring>
        <name>getAbout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="84" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a886240fe50becaaa47ca171f2d454ba4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>librdf_statement *</type>
        <definition>librdf_statement * omexmeta::Triple::getStatement</definition>
        <argsstring>() const</argsstring>
        <name>getStatement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="86" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a57b4521321178af38415e76cd483207e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setPredicate</definition>
        <argsstring>(const std::string &amp;namespace_, const std::string &amp;term)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespace_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="88" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="142" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a7358812badc8d0d5589a0165af4ad375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceLiteral</definition>
        <argsstring>(const std::string &amp;literal)</argsstring>
        <name>setResourceLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="90" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="162" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ae6836c6e9d06a310a120345aa95a4daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceUri</definition>
        <argsstring>(const std::string &amp;identifiers_uri)</argsstring>
        <name>setResourceUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifiers_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="92" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="170" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a90ffe9b74d354cc3fe3132a07546f6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceBlank</definition>
        <argsstring>(const std::string &amp;blank_id)</argsstring>
        <name>setResourceBlank</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>blank_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="94" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="184" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a34832780748d58b0fddea6f6f079217a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Triple::isEmpty</definition>
        <argsstring>()</argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="96" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1a99a566a9d1883c6329a023f4dbc056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setPredicate</definition>
        <argsstring>(const std::string &amp;uri)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="98" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ab89993902b551b98d9e17e4fe5ebed6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::freeTripleAndUris</definition>
        <argsstring>()</argsstring>
        <name>freeTripleAndUris</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="100" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac379e5410a41c1946e91d581f023c7f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Triple::getModelUri</definition>
        <argsstring>() const</argsstring>
        <name>getModelUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="104" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a44d31389b0056ab4f1d8689521a25032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceWithModelUri</definition>
        <argsstring>(const std::string &amp;metaid)</argsstring>
        <name>setResourceWithModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="105" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="177" bodyend="182"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1af03c0ce3392c0ff30f13772209ac873c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref></type>
        <definition>Triple omexmeta::Triple::fromRawStatementPtr</definition>
        <argsstring>(librdf_statement *statement)</argsstring>
        <name>fromRawStatementPtr</name>
        <param>
          <type>librdf_statement *</type>
          <declname>statement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/Triple.h" line="52" column="1" bodyfile="src/omexmeta/Triple.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="229">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
      </node>
      <node id="228">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="231">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
      </node>
      <node id="230">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="231" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/Triple.h" line="35" column="1" bodyfile="src/omexmeta/Triple.h" bodystart="35" bodyend="106"/>
    <listofallmembers>
      <member refid="classredland_1_1LibrdfStatement_1a700219b2fed175a96fecfbd905d20ab1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>checkForNull</name></member>
      <member refid="classredland_1_1LibrdfStatement_1aa51bc647bc938a07bd6c16b4d6ce07b4" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a104a61ca5a7568728273c071269e1882" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeStatementAndUris</name></member>
      <member refid="classomexmeta_1_1Triple_1a3f3868622349d3a3e14ed3e4b21d49a9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeTriple</name></member>
      <member refid="classomexmeta_1_1Triple_1ab89993902b551b98d9e17e4fe5ebed6b" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeTripleAndUris</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4eceaebc10deea27f4c75f7c8b4cccaf" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>fromRawNodePtrs</name></member>
      <member refid="classomexmeta_1_1Triple_1af03c0ce3392c0ff30f13772209ac873c" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>fromRawStatementPtr</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a6b655a56f37dbe95fec840a0a1f0ed53" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>get</name></member>
      <member refid="classomexmeta_1_1Triple_1a69df88d19e2f9077fccfa9543dadd15f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1Triple_1a1cb45dd3a5778f0e0e92e4a185da9400" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1Triple_1ac379e5410a41c1946e91d581f023c7f5" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getModelUri</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a5aae51ac0994552a13f2c9b90bec63d0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a5dd0d6a2e9fe1bfcf5254aa7928cdfaf" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getPredicateStr</name></member>
      <member refid="classredland_1_1LibrdfStatement_1aa763688f20b712ddc655afe405d7691a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getResource</name></member>
      <member refid="classredland_1_1LibrdfStatement_1adc21321df7ccf186c262e83a4438e993" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getResourceStr</name></member>
      <member refid="classomexmeta_1_1Triple_1a886240fe50becaaa47ca171f2d454ba4" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1abcf022b8e24a74282e1d059fdf54d3fe" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getSubject</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a6feed51cdebe7c4f2430fcba0ae17f37" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getSubjectStr</name></member>
      <member refid="classredland_1_1LibrdfStatement_1af8417e75a1ddb953c64c36b6028d3448" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getUsages</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a84a6fae7f1879c2f033001a9927627b0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isComplete</name></member>
      <member refid="classomexmeta_1_1Triple_1a34832780748d58b0fddea6f6f079217a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isEmpty</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4cbbbf99d094cea4569324a8c67789fb" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ac1b38e67ff0b90ac54b27c4f5f5d9e12" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1afc571bdf0e13d00ff7aa684aecc2987a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ae7f7e27b7a502070195103268407243a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a344ec4a937a1d67589ebc7247b3f08c6" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1aea171565ffb3ecc8d9c1db5439314306" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classomexmeta_1_1Triple_1ac73ca3aad0e993e1ff26bea1b5f531a1" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>local_uri_</name></member>
      <member refid="classomexmeta_1_1Triple_1af43736e46ee06c5236149c3cabe89dfe" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>model_uri_</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ad3d6c126b90c0d93413a08353c496f8f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator!=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a7aeb5ac71f5583b5a56b4aad7d904381" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a6cebbcea1400ba2983b25096f3db3b3c" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ada81e9bfb312e25daf20d6dda10eeb2e" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator==</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a1881b122993ff4a24f560b7b31ea3176" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>printUsages</name></member>
      <member refid="classredland_1_1LibrdfStatement_1afd63d6425b2130dbe4e76fdee4d7218b" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>refreshStatement</name></member>
      <member refid="classomexmeta_1_1Triple_1a2b673a8166a19fb4feae0fc42d31c105" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setAbout</name></member>
      <member refid="classomexmeta_1_1Triple_1a6329b09efb05005d248790e8a3d507f3" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setAbout</name></member>
      <member refid="classomexmeta_1_1Triple_1a6694daa46597ea91dda045aa0d5e6cfc" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setLocalUri</name></member>
      <member refid="classomexmeta_1_1Triple_1afd918ecccfa23079d9cb70f2e1a3e9b0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setModelUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a57b4521321178af38415e76cd483207e" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classomexmeta_1_1Triple_1a1a99a566a9d1883c6329a023f4dbc056" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a3306876fb080f3d19fca806142f93f87" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a8b8fd2999e80bd2912af2430503a557a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResource</name></member>
      <member refid="classomexmeta_1_1Triple_1a90ffe9b74d354cc3fe3132a07546f6d1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceBlank</name></member>
      <member refid="classomexmeta_1_1Triple_1a7358812badc8d0d5589a0165af4ad375" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceLiteral</name></member>
      <member refid="classomexmeta_1_1Triple_1ae6836c6e9d06a310a120345aa95a4daa" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a44d31389b0056ab4f1d8689521a25032" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceWithModelUri</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a5fa27f77859a4673e991b9e86f84d889" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setSubject</name></member>
      <member refid="classredland_1_1LibrdfStatement_1acd1e53cd114c6744cf808174a9333ce5" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>statement_</name></member>
      <member refid="classomexmeta_1_1Triple_1aabfef726172656b6c61c602b4d8d33e5" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>str</name></member>
      <member refid="classomexmeta_1_1Triple_1ae87525e0bb65c6ce86022b0786d3bd5c" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a07e967036bbc29feb13ef8a0ece2d8b8" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1aaed857f9356dc3a7414f06f393a75ba0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1adc457c78ec059eb71602e7ea4f763582" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a6bf6a6b02efc9d7eef2ca368cf0a36b1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>~LibrdfStatement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
