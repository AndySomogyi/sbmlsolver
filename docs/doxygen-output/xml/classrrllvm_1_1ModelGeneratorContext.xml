<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrrllvm_1_1ModelGeneratorContext" kind="class" language="C++" prot="public">
    <compoundname>rrllvm::ModelGeneratorContext</compoundname>
    <includes refid="ModelGeneratorContext_8h" local="no">ModelGeneratorContext.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1ac4a67dfb625826b58fdc9c3d1cbea809" prot="private" static="no" mutable="no">
        <type>libsbml::SBMLDocument *</type>
        <definition>libsbml::SBMLDocument* rrllvm::ModelGeneratorContext::ownedDoc</definition>
        <argsstring></argsstring>
        <name>ownedDoc</name>
        <briefdescription>
<para>these point to the same location, ownedDoc is set if we create the doc, otherwise its nullptr, meaning we&apos;re borrowing the the doc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="180" column="31" bodyfile="llvm/ModelGeneratorContext.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1ab54772fc1ab69c585080acc8e1dd538a" prot="private" static="no" mutable="no">
        <type>const libsbml::SBMLDocument *</type>
        <definition>const libsbml::SBMLDocument* rrllvm::ModelGeneratorContext::doc</definition>
        <argsstring></argsstring>
        <name>doc</name>
        <briefdescription>
<para>always references the sbml doc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="185" column="37" bodyfile="llvm/ModelGeneratorContext.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1a677b151c591ed8d27ef0fcae894847d2" prot="private" static="no" mutable="no">
        <type>const <ref refid="classrrllvm_1_1LLVMModelDataSymbols" kindref="compound">LLVMModelDataSymbols</ref> *</type>
        <definition>const LLVMModelDataSymbols* rrllvm::ModelGeneratorContext::symbols</definition>
        <argsstring></argsstring>
        <name>symbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="187" column="36" bodyfile="llvm/ModelGeneratorContext.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1a02b5b609fb8acc5194eb7d522179636f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classrrllvm_1_1LLVMModelSymbols" kindref="compound">LLVMModelSymbols</ref> &gt;</type>
        <definition>std::unique_ptr&lt;LLVMModelSymbols&gt; rrllvm::ModelGeneratorContext::modelSymbols</definition>
        <argsstring></argsstring>
        <name>modelSymbols</name>
        <briefdescription>
<para>make sure this is listed AFTER the doc and model, so it get initialized after the previous two are initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="193" column="25" bodyfile="llvm/ModelGeneratorContext.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1a6cd9fd9c574296602629e33366cbfb21" prot="private" static="no" mutable="no">
        <type>const libsbml::Model *</type>
        <definition>const libsbml::Model* rrllvm::ModelGeneratorContext::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="195" column="30" bodyfile="llvm/ModelGeneratorContext.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1ac9a203e7e67c559b1bae24a7b2ba4665" prot="private" static="no" mutable="no">
        <type><ref refid="classrr_1_1Random" kindref="compound">Random</ref> *</type>
        <definition>Random* rrllvm::ModelGeneratorContext::random</definition>
        <argsstring></argsstring>
        <name>random</name>
        <briefdescription>
<para>As the model is being generated, various distributions may be created which are added to the random object. </para>
        </briefdescription>
        <detaileddescription>
<para>Ownership of the random object is then transfered to the ExecutableModel which owns up untill the ExecutableModel is destroyed.</para>
<para>The logic here is that many distributions used the normal_distribution object which maintains a state and has an expensive startup cost. So, the distributions are created whilst the model is being generated, and then the distribution calls just end up calling an existing distribution object inside this class.</para>
<para>A pointer to this object is stored in the ModelData struct, and when the generated sbml code calls a stochastic dist function, it passes in a pionter to this object so the func can look up the distribution.</para>
<para>The alternative to this approach would have been to simply have global distributions and a global RNG. This however would use more memory and would not be thread safe, and the RNG would have to be shared amoungst multiple models, and would not be be able to create a repeatable stream of random numbers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="220" column="16" bodyfile="llvm/ModelGeneratorContext.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1a9ab39a53632926c0e8aa2c920f36eec0" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned rrllvm::ModelGeneratorContext::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="222" column="18" bodyfile="llvm/ModelGeneratorContext.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1a683f8a153639b4d1366a4ef7bfb5d696" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Jit&gt; rrllvm::ModelGeneratorContext::jit</definition>
        <argsstring></argsstring>
        <name>jit</name>
        <briefdescription>
<para><ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> dependency injection to support multiple different compilation strategies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="227" column="25" bodyfile="llvm/ModelGeneratorContext.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1ModelGeneratorContext_1abb32621250c770f7a23d88926d67b8be" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; rr::conservation::ConservedMoietyConverter &gt;</type>
        <definition>std::unique_ptr&lt;rr::conservation::ConservedMoietyConverter&gt; rrllvm::ModelGeneratorContext::moietyConverter</definition>
        <argsstring></argsstring>
        <name>moietyConverter</name>
        <briefdescription>
<para>the moiety converter, for the time being owns the converted document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="233" column="25" bodyfile="llvm/ModelGeneratorContext.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1ac2301d4bd4fbecfd65912e4f90cb74df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::ModelGeneratorContext::ModelGeneratorContext</definition>
        <argsstring>(const libsbml::SBMLDocument *_doc, unsigned options, std::unique_ptr&lt; Jit &gt; jitEngine)</argsstring>
        <name>ModelGeneratorContext</name>
        <param>
          <type>const libsbml::SBMLDocument *</type>
          <declname>_doc</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> &gt;</type>
          <declname>jitEngine</declname>
        </param>
        <briefdescription>
<para>attach to an existing sbml document, we borrow a reference to this doc and DO NOT take ownership of it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="101" column="9" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="106" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1a619188b61652e3b93638b53fc5d015d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::ModelGeneratorContext::ModelGeneratorContext</definition>
        <argsstring>()</argsstring>
        <name>ModelGeneratorContext</name>
        <briefdescription>
<para>does not attach to any sbml doc, </para>
        </briefdescription>
        <detaileddescription>
<para>useful for testing out LLVM functionality. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="111" column="9" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="207" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1a7356327de6cf3c9dc3952e4c1f810bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::ModelGeneratorContext::~ModelGeneratorContext</definition>
        <argsstring>()</argsstring>
        <name>~ModelGeneratorContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="113" column="9" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1ade1c196f4f3eab85227a4d95f74cbd3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classrrllvm_1_1LLVMModelDataSymbols" kindref="compound">LLVMModelDataSymbols</ref> &amp;</type>
        <definition>const LLVMModelDataSymbols &amp; rrllvm::ModelGeneratorContext::getModelDataSymbols</definition>
        <argsstring>() const</argsstring>
        <name>getModelDataSymbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="115" column="36" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1a9b693f85b018fd86bc45e482357ad6ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classrrllvm_1_1LLVMModelSymbols" kindref="compound">LLVMModelSymbols</ref> &amp;</type>
        <definition>const LLVMModelSymbols &amp; rrllvm::ModelGeneratorContext::getModelSymbols</definition>
        <argsstring>() const</argsstring>
        <name>getModelSymbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="117" column="32" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1adf1aa9873d0ea45bcc1483269c304266" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const libsbml::SBMLDocument *</type>
        <definition>const libsbml::SBMLDocument * rrllvm::ModelGeneratorContext::getDocument</definition>
        <argsstring>() const</argsstring>
        <name>getDocument</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="119" column="37" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1a385227b7e5141abc5e3f4f37941f37df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const libsbml::Model *</type>
        <definition>const libsbml::Model * rrllvm::ModelGeneratorContext::getModel</definition>
        <argsstring>() const</argsstring>
        <name>getModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="121" column="30" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1ac6715881f01e813cb1346ca66dc55a51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> *</type>
        <definition>Jit * rrllvm::ModelGeneratorContext::getJitNonOwning</definition>
        <argsstring>() const</argsstring>
        <name>getJitNonOwning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="123" column="13" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1af63938c6a114a8c859110da2d3649189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::ModelGeneratorContext::transferObjectsToResources</definition>
        <argsstring>(std::shared_ptr&lt; rrllvm::ModelResources &gt; modelResources)</argsstring>
        <name>transferObjectsToResources</name>
        <param>
          <type>std::shared_ptr&lt; rrllvm::ModelResources &gt;</type>
          <declname>modelResources</declname>
        </param>
        <briefdescription>
<para>nearly all llvm functions expect a pointer to module, so we define this as a pointer type instead of reference, even though we gaurantee this to be non-null </para>
        </briefdescription>
        <detaileddescription>
<para>if optimization is enabled, this gets the function pass manager loaded with all the requested optimizers. NULL if no optimization is specified.</para>
<para><simplesect kind="return"><para>a borrowed reference that is owned by <ref refid="classrrllvm_1_1ModelGeneratorContext" kindref="compound">ModelGeneratorContext</ref> A lot can go wrong in the process of generating a model from an sbml doc. This class is intended to be stack allocated, so when any exception is thrown in the course of model generation, this class will clean up all the contexts and execution engines and so forth.</para>
</simplesect>
However, when a model is successfully generated, we need a way to give it the exec engine, and whatever other bits it requires.</para>
<para>So, this method exists so that the generated model can steal all the objects it needs from us, these object are transfered to the model, and our pointers to them are cleared. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="156" column="14" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="293" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1ab2e5c1ec8f1a4232f2f2858dcfa3f1d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rrllvm::ModelGeneratorContext::getConservedMoietyAnalysis</definition>
        <argsstring>() const</argsstring>
        <name>getConservedMoietyAnalysis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="158" column="14" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1a9384a0ecb86c66472154484f656629d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rrllvm::ModelGeneratorContext::useSymbolCache</definition>
        <argsstring>() const</argsstring>
        <name>useSymbolCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="160" column="14" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="320" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1a4bdacf7f4a2e177b6045f4105c315841" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned rrllvm::ModelGeneratorContext::getOptions</definition>
        <argsstring>() const</argsstring>
        <name>getOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="162" column="18" bodyfile="llvm/ModelGeneratorContext.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1aae03d74871964f0ee688a5531d713c1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Random" kindref="compound">Random</ref> *</type>
        <definition>Random * rrllvm::ModelGeneratorContext::getRandom</definition>
        <argsstring>() const</argsstring>
        <name>getRandom</name>
        <briefdescription>
<para>get a pointer to the random object. </para>
        </briefdescription>
        <detaileddescription>
<para>The random object exists if the document has the distrib package, is null otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="172" column="16" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="239" bodyend="241"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrrllvm_1_1ModelGeneratorContext_1ad47a63d8c765ee58914470cac11a4b86" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::ModelGeneratorContext::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <briefdescription>
<para>free any memory this class allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/ModelGeneratorContext.h" line="238" column="14" bodyfile="llvm/ModelGeneratorContext.cpp" bodystart="243" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>All LLVM code generating objects basically need at a minimum three things to operate: </para>
    </briefdescription>
    <detaileddescription>
<para>1: sbml Model - what to process 2: llvm Context - all llvm functions need this, manages llvm memory 3: llvm Module - where the generated code will go</para>
<para>Code generators also need to know the symbols that are in the sbml doc. These <emphasis>could</emphasis> be re-determined in each code gen, but wastefull. The symbols can be thought of as the first pass of the compiler, so all symbols are determined ahead of time before any code generation.</para>
<para>They also make use of an llvm IRBuilder, one of these <emphasis>could</emphasis> be allocated in each code gen object, but that would be wasteful, so we use a single one per sbml compilation, and each code gen just resets the builder insert point, that is what is was designed to do.</para>
<para>So, that leaves us with 5 object that are needed by code generators. Should all code gens have all 5 args passed to thier ctors? There is much talk about how context objects are evil, however this one is NOT inteneded to grow, only store the absolute minimun information that all code generators need.</para>
<para>This class basically functions as a set of ivars if all code generators were methods on a single code gen class.</para>
<para>TODO doc wise discuss the problems with context objects, and why this one address all the concerns.</para>
<para>TODO document memory managment, engine owns model, ... </para>
    </detaileddescription>
    <location file="llvm/ModelGeneratorContext.h" line="95" column="32" bodyfile="llvm/ModelGeneratorContext.h" bodystart="95" bodyend="239"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ad47a63d8c765ee58914470cac11a4b86" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>cleanup</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ab54772fc1ab69c585080acc8e1dd538a" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>doc</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ab2e5c1ec8f1a4232f2f2858dcfa3f1d9" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getConservedMoietyAnalysis</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1adf1aa9873d0ea45bcc1483269c304266" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getDocument</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ac6715881f01e813cb1346ca66dc55a51" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getJitNonOwning</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a385227b7e5141abc5e3f4f37941f37df" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getModel</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ade1c196f4f3eab85227a4d95f74cbd3e" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getModelDataSymbols</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a9b693f85b018fd86bc45e482357ad6ff" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getModelSymbols</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a4bdacf7f4a2e177b6045f4105c315841" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getOptions</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1aae03d74871964f0ee688a5531d713c1b" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>getRandom</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a683f8a153639b4d1366a4ef7bfb5d696" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>jit</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a6cd9fd9c574296602629e33366cbfb21" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>model</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ac2301d4bd4fbecfd65912e4f90cb74df" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>ModelGeneratorContext</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a619188b61652e3b93638b53fc5d015d7" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>ModelGeneratorContext</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a02b5b609fb8acc5194eb7d522179636f" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>modelSymbols</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1abb32621250c770f7a23d88926d67b8be" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>moietyConverter</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a9ab39a53632926c0e8aa2c920f36eec0" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>options</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ac4a67dfb625826b58fdc9c3d1cbea809" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>ownedDoc</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1ac9a203e7e67c559b1bae24a7b2ba4665" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>random</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a677b151c591ed8d27ef0fcae894847d2" prot="private" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>symbols</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1af63938c6a114a8c859110da2d3649189" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>transferObjectsToResources</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a9384a0ecb86c66472154484f656629d6" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>useSymbolCache</name></member>
      <member refid="classrrllvm_1_1ModelGeneratorContext_1a7356327de6cf3c9dc3952e4c1f810bea" prot="public" virt="non-virtual"><scope>rrllvm::ModelGeneratorContext</scope><name>~ModelGeneratorContext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
