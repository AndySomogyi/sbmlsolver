<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrr_1_1Matrix3D" kind="class" language="C++" prot="public">
    <compoundname>rr::Matrix3D</compoundname>
    <includes refid="Matrix3D_8h" local="no">Matrix3D.h</includes>
    <templateparamlist>
      <param>
        <type>typename IndexType</type>
      </param>
      <param>
        <type>typename DataType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classrr_1_1Matrix3D_1a10e9f9a773f4744b268844ee58da6bf5" prot="private" static="no">
        <type>std::initializer_list&lt; std::initializer_list&lt; std::initializer_list&lt; DataType &gt; &gt;&gt;</type>
        <definition>using rr::Matrix3D&lt; IndexType, DataType &gt;::Matrix3DInitializer =  std::initializer_list&lt;std::initializer_list&lt;std::initializer_list&lt;DataType&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>Matrix3DInitializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="18" column="9" bodyfile="Matrix3D.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrr_1_1Matrix3D_1ae451ae4b426815e455538247fb06f19b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; IndexType &gt;</type>
        <definition>std::vector&lt;IndexType&gt; rr::Matrix3D&lt; IndexType, DataType &gt;::index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="389" column="21" bodyfile="Matrix3D.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1Matrix3D_1a26db981b1f5f13aa35a8e3c605067b9b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; DataType &gt; &gt;</type>
        <definition>std::vector&lt;Matrix &lt; DataType&gt; &gt; rr::Matrix3D&lt; IndexType, DataType &gt;::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="390" column="21" bodyfile="Matrix3D.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1Matrix3D_1ad86d016dc68ed798ec13ed75b920c797" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; rr::Matrix3D&lt; IndexType, DataType &gt;::rowNames_</definition>
        <argsstring></argsstring>
        <name>rowNames_</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="391" column="21" bodyfile="Matrix3D.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1Matrix3D_1aafc6249a38be368693fb2e2ab0f2aee8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; rr::Matrix3D&lt; IndexType, DataType &gt;::colNames_</definition>
        <argsstring></argsstring>
        <name>colNames_</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="392" column="21" bodyfile="Matrix3D.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a8336951dc875f560c5841f5c70fe36a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::Matrix3D&lt; IndexType, DataType &gt;::Matrix3D</definition>
        <argsstring>()=default</argsstring>
        <name>Matrix3D</name>
        <briefdescription>
<para>default construct a 3D matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="24" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ac8734a9a680930e98361be461808ddde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rr::Matrix3D&lt; IndexType, DataType &gt;::Matrix3D</definition>
        <argsstring>(int numRows, int numCols, int numZ)</argsstring>
        <name>Matrix3D</name>
        <param>
          <type>int</type>
          <declname>numRows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numCols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numZ</declname>
        </param>
        <briefdescription>
<para>construct an empty 3D matrix with numRows x numCols x numZ dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="29" column="9" bodyfile="Matrix3D.h" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ae6f876b4499e0f9f964e75f1a8a575c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rr::Matrix3D&lt; IndexType, DataType &gt;::Matrix3D</definition>
        <argsstring>(std::initializer_list&lt; IndexType &gt; idx, Matrix3DInitializer data)</argsstring>
        <name>Matrix3D</name>
        <param>
          <type>std::initializer_list&lt; IndexType &gt;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>Matrix3DInitializer</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="37" column="9" bodyfile="Matrix3D.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ae1ca2ca9e845c7de358cef2db83b8b91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::insert</definition>
        <argsstring>(IndexType idx, Matrix&lt; DataType &gt; mat)</argsstring>
        <name>insert</name>
        <param>
          <type>IndexType</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; DataType &gt;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="44" column="14" bodyfile="Matrix3D.h" bodystart="44" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1af348e449bfba28a9c62799bdb268cda0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::pushBack</definition>
        <argsstring>(IndexType idx, Matrix&lt; DataType &gt; mat)</argsstring>
        <name>pushBack</name>
        <param>
          <type>IndexType</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; DataType &gt;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="73" column="14" bodyfile="Matrix3D.h" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1adf344bfa17d5a94157c9944bfabce492" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; DataType &gt; &amp;</type>
        <definition>Matrix&lt;DataType&gt;&amp; rr::Matrix3D&lt; IndexType, DataType &gt;::operator[]</definition>
        <argsstring>(int idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Indexer to slice a <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref> and index value and data at idx. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the k&apos;th 2D matrix, indexed by Z dimension </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="88" column="17" bodyfile="Matrix3D.h" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a0e6ccf3c0c6a740ca12af375fca03a99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrr_1_1Matrix" kindref="compound">rr::Matrix</ref>&lt; DataType &gt; &amp;</type>
        <definition>rr::Matrix&lt;DataType&gt;&amp; rr::Matrix3D&lt; IndexType, DataType &gt;::slice</definition>
        <argsstring>(int k)</argsstring>
        <name>slice</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>1D <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref> slicer. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert a 3D matrix to a 2D rr::Matrix&lt;DataType&gt; by slicing the Z direction using numerical indices. Equivalent to <ref refid="classrr_1_1Matrix3D_1adf344bfa17d5a94157c9944bfabce492" kindref="member">Matrix3D&lt;DataType&gt;::operator[]</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>corresponds to the number of sub matrices, indexed by k in the set 0, 1, ..., zMax. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A single 2D rr::Matrix&lt;DataType&gt; object at index k of this Matrix3D&lt;DataType&gt; with dimensions (xMax, yMax) (width by height) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="105" column="20" bodyfile="Matrix3D.h" bodystart="105" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a170fe788694b075b5509915831750bf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrr_1_1Matrix3D" kindref="compound">rr::Matrix3D</ref>&lt; DataType, IndexType &gt; &amp;</type>
        <definition>rr::Matrix3D&lt;DataType, IndexType&gt;&amp; rr::Matrix3D&lt; IndexType, DataType &gt;::colSliceByName</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;rowNames)</argsstring>
        <name>colSliceByName</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>rowNames</declname>
        </param>
        <briefdescription>
<para>slice a <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref> by colnames. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowNames</parametername>
</parameternamelist>
<parameterdescription>
<para>the names of the columns to keep, the remaining rows are removed in the returned <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="120" column="22" bodyfile="Matrix3D.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a3d3e20638dd709df478c6dab345585a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; DataType &gt;</type>
        <definition>std::vector&lt;DataType&gt; rr::Matrix3D&lt; IndexType, DataType &gt;::slice</definition>
        <argsstring>(int k, int j)</argsstring>
        <name>slice</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>2D <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref> slicer. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert a 3D matrix to a 1D std::vector&lt;DataType&gt; by slicing the Z (depth) and then the y (height) direction using numerical indices. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes the number of sub matrices, k in 0, 1, ..., zMax. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes the number of row vectors in submatrix k for j in 0, 1, ..., yMax </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A single 1D std::vector&lt;DataType&gt; object at index k, j of this Matrix3D&lt;DataType&gt; with dimensions (xMax) (width). This is a row vector at submatrix k, row j of this rr::Matrix3D&lt;DataType&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="133" column="21" bodyfile="Matrix3D.h" bodystart="133" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a210b05755e38bd590c84cae997afba59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType rr::Matrix3D&lt; IndexType, DataType &gt;::slice</definition>
        <argsstring>(int k, int j, int i)</argsstring>
        <name>slice</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>3D <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref> slicer. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert a 3D matrix to a scalar DataType by slicing the (k, j, i) (depth, height, width) direction using numerical indices. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>corresponds to the number of sub matrices, indexed by k in the set 0, 1, ..., zMax. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes the number of row vectors in submatrix k for j in 0, 1, ..., yMax </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes the number of elements in each row vector j; i in 0, 1, ..., xMax </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A scalar DataType object at index k, j, i of this Matrix3D&lt;DataType&gt;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="159" column="18" bodyfile="Matrix3D.h" bodystart="159" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ae8a33b146d067035a4fc45a791d6680a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; DataType &gt; &amp;</type>
        <definition>Matrix&lt;DataType&gt;&amp; rr::Matrix3D&lt; IndexType, DataType &gt;::getItem</definition>
        <argsstring>(IndexType idx)</argsstring>
        <name>getItem</name>
        <param>
          <type>IndexType</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>slicing operator that uses the user provided index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the element in this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref> that has the unique index idx. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Matrix&lt;DataType&gt; indexed by the IndexType idx. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="188" column="17" bodyfile="Matrix3D.h" bodystart="188" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a4a9b332443cffbf149576fe023175b65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; IndexType &gt; &amp;</type>
        <definition>const std::vector&lt;IndexType&gt;&amp; rr::Matrix3D&lt; IndexType, DataType &gt;::getIndex</definition>
        <argsstring>() const</argsstring>
        <name>getIndex</name>
        <briefdescription>
<para>getter for the index data field of the <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a std::vector&lt;IndexType&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="204" column="27" bodyfile="Matrix3D.h" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a3e804631687f3f5ae9d0109e1819b596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::setKthMatrix</definition>
        <argsstring>(int k, IndexType idx, Matrix&lt; DataType &gt; data)</argsstring>
        <name>setKthMatrix</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; DataType &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="208" column="14" bodyfile="Matrix3D.h" bodystart="208" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a7d78cb9ba8631d469ffc27c4f69b4627" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int rr::Matrix3D&lt; IndexType, DataType &gt;::numRows</definition>
        <argsstring>()</argsstring>
        <name>numRows</name>
        <briefdescription>
<para>get number of rows in this 3D matrix </para>
        </briefdescription>
        <detaileddescription>
<para>x is rows, y is columns, z is depth. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="224" column="13" bodyfile="Matrix3D.h" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a0bbc297939977e79bf29699cc91db35b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int rr::Matrix3D&lt; IndexType, DataType &gt;::numCols</definition>
        <argsstring>()</argsstring>
        <name>numCols</name>
        <briefdescription>
<para>get number of columns in this 3D matrix </para>
        </briefdescription>
        <detaileddescription>
<para>if x is rows, y is columns, z is depth. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="234" column="13" bodyfile="Matrix3D.h" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a97e450bd370dc45a47b1aeafeed562ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int rr::Matrix3D&lt; IndexType, DataType &gt;::numZ</definition>
        <argsstring>()</argsstring>
        <name>numZ</name>
        <briefdescription>
<para>get number of matrices in this 3D matrix </para>
        </briefdescription>
        <detaileddescription>
<para>if x is rows, y is columns, z is depth. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="244" column="13" bodyfile="Matrix3D.h" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1accfa6abdaeb734ceaad06098cca8a6df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::setRowNames</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;rowNames)</argsstring>
        <name>setRowNames</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>rowNames</declname>
        </param>
        <briefdescription>
<para>set row names for each of the z matrices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="253" column="14" bodyfile="Matrix3D.h" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a75c92af16993dba38c3a2b15d0c65b84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::setColNames</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;colNames)</argsstring>
        <name>setColNames</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>colNames</declname>
        </param>
        <briefdescription>
<para>set col names for each of the z matrices </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="263" column="14" bodyfile="Matrix3D.h" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a87927a275352b6925024580ffa7870b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; rr::Matrix3D&lt; IndexType, DataType &gt;::getRowNames</definition>
        <argsstring>()</argsstring>
        <name>getRowNames</name>
        <briefdescription>
<para>return the row names for this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="273" column="21" bodyfile="Matrix3D.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a5bc22ee391622eb7a1d0f1aad991a38a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; rr::Matrix3D&lt; IndexType, DataType &gt;::getColNames</definition>
        <argsstring>()</argsstring>
        <name>getColNames</name>
        <briefdescription>
<para>return the column names for this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="280" column="21" bodyfile="Matrix3D.h" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ac6964e5fab09e336189a817c8480307e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix3D&lt; IndexType, DataType &gt;::operator==</definition>
        <argsstring>(Matrix3D&lt; IndexType, DataType &gt; &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>&lt; IndexType, DataType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>equality operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="287" column="14" bodyfile="Matrix3D.h" bodystart="287" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a8438b3dd5262ce21e26a3e6c2e21d9e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix3D&lt; IndexType, DataType &gt;::operator!=</definition>
        <argsstring>(Matrix3D&lt; IndexType, DataType &gt; &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>&lt; IndexType, DataType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>inequality operator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="308" column="14" bodyfile="Matrix3D.h" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ac3204e01ccc855bab8f8959da10d63d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix3D&lt; IndexType, DataType &gt;::almostEquals</definition>
        <argsstring>(Matrix3D&lt; double, double &gt; &amp;other, double tol)</argsstring>
        <name>almostEquals</name>
        <param>
          <type><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>&lt; double, double &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
<para>equality operator for double IndexType and DataType types only </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="315" column="14" bodyfile="Matrix3D.h" bodystart="315" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1aff7a78da2a0c7854bf269d0b24ef7bbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::deleteRow</definition>
        <argsstring>(const int &amp;which)</argsstring>
        <name>deleteRow</name>
        <param>
          <type>const int &amp;</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>delete the row indexed by </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>in each of the k submatrices in this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrr_1_1Matrix_1ad75ae4a4b1772808706dece01a3f241d" kindref="member">rr::Matrix::deleteRow</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="341" column="14" bodyfile="Matrix3D.h" bodystart="341" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ae2421bdde10d8ae3cc10b7705320b890" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::deleteRow</definition>
        <argsstring>(const std::string &amp;which)</argsstring>
        <name>deleteRow</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>delete the row indexed by </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>in each of the k submatrices in this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrr_1_1Matrix_1ad75ae4a4b1772808706dece01a3f241d" kindref="member">rr::Matrix::deleteRow</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="354" column="14" bodyfile="Matrix3D.h" bodystart="354" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1ae6ae35f37769d51b3c5c3900e5724a2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::deleteCol</definition>
        <argsstring>(const int &amp;which)</argsstring>
        <name>deleteCol</name>
        <param>
          <type>const int &amp;</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>delete the col indexed by </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>in each of the k submatrices in this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrr_1_1Matrix_1a0d367c7df1fa56958b30182c5e2cd352" kindref="member">rr::Matrix::deleteCol</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="367" column="14" bodyfile="Matrix3D.h" bodystart="367" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix3D_1a50b7689814b9c3d99fceaa3e7111aa4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix3D&lt; IndexType, DataType &gt;::deleteCol</definition>
        <argsstring>(const std::string &amp;which)</argsstring>
        <name>deleteCol</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>delete the col indexed by </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>in each of the k submatrices in this <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrr_1_1Matrix_1a0d367c7df1fa56958b30182c5e2cd352" kindref="member">rr::Matrix::deleteCol</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="380" column="14" bodyfile="Matrix3D.h" bodystart="380" bodyend="386"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrr_1_1Matrix3D_1a02a8abe7d89e94fa4523faa7ecf7bafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType_</type>
          </param>
          <param>
            <type>typename DataType_</type>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Matrix3D&lt; IndexType_, DataType_ &gt; &amp;matrix3D)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>&lt; IndexType_, DataType_ &gt; &amp;</type>
          <declname>matrix3D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="334" column="16" bodyfile="Matrix3D.h" bodystart="396" bodyend="402"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A basic local 3D version of the <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref> class, based on initializer_list. </para>
    </detaileddescription>
    <location file="Matrix3D.h" line="17" column="19" bodyfile="Matrix3D.h" bodystart="17" bodyend="393"/>
    <listofallmembers>
      <member refid="classrr_1_1Matrix3D_1ac3204e01ccc855bab8f8959da10d63d5" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>almostEquals</name></member>
      <member refid="classrr_1_1Matrix3D_1aafc6249a38be368693fb2e2ab0f2aee8" prot="private" virt="non-virtual"><scope>rr::Matrix3D</scope><name>colNames_</name></member>
      <member refid="classrr_1_1Matrix3D_1a170fe788694b075b5509915831750bf9" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>colSliceByName</name></member>
      <member refid="classrr_1_1Matrix3D_1a26db981b1f5f13aa35a8e3c605067b9b" prot="private" virt="non-virtual"><scope>rr::Matrix3D</scope><name>data_</name></member>
      <member refid="classrr_1_1Matrix3D_1ae6ae35f37769d51b3c5c3900e5724a2e" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>deleteCol</name></member>
      <member refid="classrr_1_1Matrix3D_1a50b7689814b9c3d99fceaa3e7111aa4b" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>deleteCol</name></member>
      <member refid="classrr_1_1Matrix3D_1aff7a78da2a0c7854bf269d0b24ef7bbd" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>deleteRow</name></member>
      <member refid="classrr_1_1Matrix3D_1ae2421bdde10d8ae3cc10b7705320b890" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>deleteRow</name></member>
      <member refid="classrr_1_1Matrix3D_1a5bc22ee391622eb7a1d0f1aad991a38a" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>getColNames</name></member>
      <member refid="classrr_1_1Matrix3D_1a4a9b332443cffbf149576fe023175b65" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>getIndex</name></member>
      <member refid="classrr_1_1Matrix3D_1ae8a33b146d067035a4fc45a791d6680a" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>getItem</name></member>
      <member refid="classrr_1_1Matrix3D_1a87927a275352b6925024580ffa7870b0" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>getRowNames</name></member>
      <member refid="classrr_1_1Matrix3D_1ae451ae4b426815e455538247fb06f19b" prot="private" virt="non-virtual"><scope>rr::Matrix3D</scope><name>index_</name></member>
      <member refid="classrr_1_1Matrix3D_1ae1ca2ca9e845c7de358cef2db83b8b91" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>insert</name></member>
      <member refid="classrr_1_1Matrix3D_1a8336951dc875f560c5841f5c70fe36a1" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>Matrix3D</name></member>
      <member refid="classrr_1_1Matrix3D_1ac8734a9a680930e98361be461808ddde" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>Matrix3D</name></member>
      <member refid="classrr_1_1Matrix3D_1ae6f876b4499e0f9f964e75f1a8a575c6" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>Matrix3D</name></member>
      <member refid="classrr_1_1Matrix3D_1a10e9f9a773f4744b268844ee58da6bf5" prot="private" virt="non-virtual"><scope>rr::Matrix3D</scope><name>Matrix3DInitializer</name></member>
      <member refid="classrr_1_1Matrix3D_1a0bbc297939977e79bf29699cc91db35b" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>numCols</name></member>
      <member refid="classrr_1_1Matrix3D_1a7d78cb9ba8631d469ffc27c4f69b4627" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>numRows</name></member>
      <member refid="classrr_1_1Matrix3D_1a97e450bd370dc45a47b1aeafeed562ba" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>numZ</name></member>
      <member refid="classrr_1_1Matrix3D_1a8438b3dd5262ce21e26a3e6c2e21d9e5" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>operator!=</name></member>
      <member refid="classrr_1_1Matrix3D_1a02a8abe7d89e94fa4523faa7ecf7bafc" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>operator&lt;&lt;</name></member>
      <member refid="classrr_1_1Matrix3D_1ac6964e5fab09e336189a817c8480307e" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>operator==</name></member>
      <member refid="classrr_1_1Matrix3D_1adf344bfa17d5a94157c9944bfabce492" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>operator[]</name></member>
      <member refid="classrr_1_1Matrix3D_1af348e449bfba28a9c62799bdb268cda0" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>pushBack</name></member>
      <member refid="classrr_1_1Matrix3D_1ad86d016dc68ed798ec13ed75b920c797" prot="private" virt="non-virtual"><scope>rr::Matrix3D</scope><name>rowNames_</name></member>
      <member refid="classrr_1_1Matrix3D_1a75c92af16993dba38c3a2b15d0c65b84" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>setColNames</name></member>
      <member refid="classrr_1_1Matrix3D_1a3e804631687f3f5ae9d0109e1819b596" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>setKthMatrix</name></member>
      <member refid="classrr_1_1Matrix3D_1accfa6abdaeb734ceaad06098cca8a6df" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>setRowNames</name></member>
      <member refid="classrr_1_1Matrix3D_1a0e6ccf3c0c6a740ca12af375fca03a99" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>slice</name></member>
      <member refid="classrr_1_1Matrix3D_1a3d3e20638dd709df478c6dab345585a3" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>slice</name></member>
      <member refid="classrr_1_1Matrix3D_1a210b05755e38bd590c84cae997afba59" prot="public" virt="non-virtual"><scope>rr::Matrix3D</scope><name>slice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
