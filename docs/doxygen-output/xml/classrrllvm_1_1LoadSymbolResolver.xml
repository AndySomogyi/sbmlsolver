<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrrllvm_1_1LoadSymbolResolver" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>rrllvm::LoadSymbolResolver</compoundname>
    <derivedcompoundref refid="classrrllvm_1_1FunctionResolver" prot="public" virt="non-virtual">rrllvm::FunctionResolver</derivedcompoundref>
    <derivedcompoundref refid="classrrllvm_1_1KineticLawParameterResolver" prot="public" virt="non-virtual">rrllvm::KineticLawParameterResolver</derivedcompoundref>
    <derivedcompoundref refid="classrrllvm_1_1LoadSymbolResolverBase" prot="public" virt="non-virtual">rrllvm::LoadSymbolResolverBase</derivedcompoundref>
    <includes refid="CodeGen_8h" local="no">CodeGen.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1LoadSymbolResolver_1af0c62fdd0c913e2410596d3f785f21db" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>llvm::Value *</type>
        <definition>virtual llvm::Value* rrllvm::LoadSymbolResolver::loadSymbolValue</definition>
        <argsstring>(const std::string &amp;symbol, const llvm::ArrayRef&lt; llvm::Value * &gt; &amp;args=llvm::ArrayRef&lt; llvm::Value * &gt;())=0</argsstring>
        <name>loadSymbolValue</name>
        <reimplementedby refid="classrrllvm_1_1KineticLawParameterResolver_1ac04cd2cdb1aebcbb28dc7c59325d604d">loadSymbolValue</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1FunctionResolver_1a3cb392b698b4a6bcfca2bb56312d3809">loadSymbolValue</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1SBMLInitialValueSymbolResolver_1ab7c1e8fae4c828db8ddf0147d2c105b4">loadSymbolValue</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>const llvm::ArrayRef&lt; llvm::Value * &gt; &amp;</type>
          <declname>args</declname>
          <defval>llvm::ArrayRef&lt; llvm::Value * &gt;()</defval>
        </param>
        <briefdescription>
<para>generate an LLVM load instruction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol name to resolve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>function argument list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGen.h" line="45" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LoadSymbolResolver_1ae76af01bea67ddc67ca14112ef117867" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::LoadSymbolResolver::recursiveSymbolPush</definition>
        <argsstring>(const std::string &amp;symbol)=0</argsstring>
        <name>recursiveSymbolPush</name>
        <reimplementedby refid="classrrllvm_1_1KineticLawParameterResolver_1aea67c8b5d643ae2fc1fd29ccbad2c0cd">recursiveSymbolPush</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1FunctionResolver_1aac4263c431a3bd9df828802906896833">recursiveSymbolPush</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1LoadSymbolResolverBase_1ac57b0b51ada7500192177fe56f783c66">recursiveSymbolPush</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGen.h" line="49" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LoadSymbolResolver_1a0c192e55ced93b4f06d5cf9bc2579d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::LoadSymbolResolver::recursiveSymbolPop</definition>
        <argsstring>()=0</argsstring>
        <name>recursiveSymbolPop</name>
        <reimplementedby refid="classrrllvm_1_1KineticLawParameterResolver_1a1083e93635d2154a8a50a0d0064ba98b">recursiveSymbolPop</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1FunctionResolver_1a6503ab9a9628fb08b38ac6b1401c17bd">recursiveSymbolPop</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1LoadSymbolResolverBase_1aa0fc1373dd80036307a6da734c44639a">recursiveSymbolPop</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGen.h" line="51" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LoadSymbolResolver_1ab388d2fa6565e68437798bc1d566b29b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t rrllvm::LoadSymbolResolver::pushCacheBlock</definition>
        <argsstring>()</argsstring>
        <name>pushCacheBlock</name>
        <reimplementedby refid="classrrllvm_1_1LoadSymbolResolverBase_1a7e60c19319e7c69ce40893709590c5b6">pushCacheBlock</reimplementedby>
        <briefdescription>
<para>nested conditionals (or functions?) can push a local cache block, where symbols would be chached. </para>
        </briefdescription>
        <detaileddescription>
<para>These need to be popped as these symbols are not valid outside of the local conditional or scope block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGen.h" line="58" column="24" bodyfile="llvm/CodeGen.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LoadSymbolResolver_1a64c0e7ee5311a610d252dc603e20a94f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t rrllvm::LoadSymbolResolver::popCacheBlock</definition>
        <argsstring>()</argsstring>
        <name>popCacheBlock</name>
        <reimplementedby refid="classrrllvm_1_1LoadSymbolResolverBase_1af789e2e8265aa79b6452f521df9f234e">popCacheBlock</reimplementedby>
        <briefdescription>
<para>Pop a scoped cache block, this clears these values, and any subsequent reads re-evaluate the requested symbol. </para>
        </briefdescription>
        <detaileddescription>
<para>Will throw an exception if an empty stack pop is attempted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGen.h" line="66" column="24" bodyfile="llvm/CodeGen.h" bodystart="66" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classrrllvm_1_1LoadSymbolResolver_1a7bbd958412d6caf1da624de9e382dc07" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual rrllvm::LoadSymbolResolver::~LoadSymbolResolver</definition>
        <argsstring>()</argsstring>
        <name>~LoadSymbolResolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGen.h" line="70" column="17" bodyfile="llvm/CodeGen.h" bodystart="70" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>LLVM load instruction class </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>rrllvm::FunctionResolver</label>
        <link refid="classrrllvm_1_1FunctionResolver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>rrllvm::SBMLInitialValueSymbolResolver</label>
        <link refid="classrrllvm_1_1SBMLInitialValueSymbolResolver"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>rrllvm::KineticLawParameterResolver</label>
        <link refid="classrrllvm_1_1KineticLawParameterResolver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>rrllvm::LoadSymbolResolver</label>
        <link refid="classrrllvm_1_1LoadSymbolResolver"/>
      </node>
      <node id="4">
        <label>rrllvm::LoadSymbolResolverBase</label>
        <link refid="classrrllvm_1_1LoadSymbolResolverBase"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="llvm/CodeGen.h" line="37" column="1" bodyfile="llvm/CodeGen.h" bodystart="36" bodyend="71"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1LoadSymbolResolver_1af0c62fdd0c913e2410596d3f785f21db" prot="public" virt="pure-virtual"><scope>rrllvm::LoadSymbolResolver</scope><name>loadSymbolValue</name></member>
      <member refid="classrrllvm_1_1LoadSymbolResolver_1a64c0e7ee5311a610d252dc603e20a94f" prot="public" virt="virtual"><scope>rrllvm::LoadSymbolResolver</scope><name>popCacheBlock</name></member>
      <member refid="classrrllvm_1_1LoadSymbolResolver_1ab388d2fa6565e68437798bc1d566b29b" prot="public" virt="virtual"><scope>rrllvm::LoadSymbolResolver</scope><name>pushCacheBlock</name></member>
      <member refid="classrrllvm_1_1LoadSymbolResolver_1a0c192e55ced93b4f06d5cf9bc2579d4d" prot="public" virt="pure-virtual"><scope>rrllvm::LoadSymbolResolver</scope><name>recursiveSymbolPop</name></member>
      <member refid="classrrllvm_1_1LoadSymbolResolver_1ae76af01bea67ddc67ca14112ef117867" prot="public" virt="pure-virtual"><scope>rrllvm::LoadSymbolResolver</scope><name>recursiveSymbolPush</name></member>
      <member refid="classrrllvm_1_1LoadSymbolResolver_1a7bbd958412d6caf1da624de9e382dc07" prot="protected" virt="virtual"><scope>rrllvm::LoadSymbolResolver</scope><name>~LoadSymbolResolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
