<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>The LibRoadRunner C++ Library</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Andy Somogyi (<ulink url="mailto:andy.somogyi@gmail.com">andy.somogyi@gmail.com</ulink>, <ulink url="mailto:somogyie@indiana.edu">somogyie@indiana.edu</ulink>) </para>
</simplesect>
<simplesect kind="author"><para>Totte Karlsson (<ulink url="mailto:totte@dunescientific.com">totte@dunescientific.com</ulink>) </para>
</simplesect>
<simplesect kind="author"><para>Herbert M. Sauro (<ulink url="mailto:hsauro@u.washington.edu">hsauro@u.washington.edu</ulink>)</para>
</simplesect>
</para>
<sect1 id="index_1sec_intro">
<title>Introduction</title>
<para>This document describes the application programming interface (wrappers) of <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref>, an open source (BSD) library for computing structural characteristics of cellular networks.</para>
</sect1>
<sect1 id="index_1sec_install">
<title>Instalation</title>
<para><simplesect kind="par"><title></title><para></para>
</simplesect>
<simplesect kind="par"><title></title><para></para>
</simplesect>
<simplesect kind="par"><title>Dependencies</title><para>The <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> library depend on several third-party libraries, CLapack, libSBML (libxml2), Sundials, NLEQ, and Poco. These are provided with the binary installation where necessary. </para>
</simplesect>
<simplesect kind="par"><title></title><para></para>
</simplesect>
<simplesect kind="par"><title></title><para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
</simplesect>
<itemizedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Neither the name of University of Washington nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
</listitem>
</itemizedlist>
<simplesect kind="par"><title></title><para></para>
</simplesect>
</para>
</sect1>
<sect1 id="index_1sec_new_integrator">
<title>Creating a new Integrator</title>
<para>One of the key design goals of the LibRoadRunner library is extensibility. This means that the library is designed with the idea that most internal components are loosely coupled and that it is simple to add new solvers such as new steady state solvers or integrators. This section will give a tutorial on creating a new integrator using the <ref refid="classrr_1_1EulerIntegrator" kindref="compound">EulerIntegrator</ref> as an example.</para>
<para>At its simplest, an <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> is a class which implements the <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> interface and is responsible for advanding a model (an object which implements the <ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> interface) forward in time.</para>
<para>All Integrators are created by the <ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref> class, this is the only class that knows about the existence of any <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> objects. All integrators that the <ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref> knows about are automatically available to any code (including any Python code) that needs to create one. Each time the <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner::simulate</ref> method is called, a different integrator may be specified. In Python, this is done with the <computeroutput>integrator</computeroutput> keyword, i.e.</para>
<para><programlisting><codeline><highlight class="normal">r.simulate(0,<sp/>10,<sp/>100,<sp/>integrator=&quot;MyIntegratorName&quot;)</highlight></codeline>
</programlisting></para>
<para>Or, in C++:</para>
<para><programlisting><codeline><highlight class="normal">BasicDictionary<sp/>d;</highlight></codeline>
<codeline><highlight class="normal">d.setItem(&quot;integrator&quot;,<sp/>&quot;MyIntegratorName&quot;)</highlight></codeline>
<codeline><highlight class="normal">r.simulate(&amp;d);</highlight></codeline>
</programlisting></para>
<para>To create a new integrator, one first needs to create an object that implments the <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> interface, tell <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> about it.</para>
<sect2 id="index_1sec_int_impl">
<title>Implementing the Integrator interface</title>
<para>The <ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref> is the ONLY object that creates integrators.</para>
<para>Integrators are created when the <ref refid="classrr_1_1IntegratorFactory_1ab7298b70afb06e1200181cf3981f739c" kindref="member">IntegratorFactory::New</ref> method is called, typically by the top level <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object. New Integrators are given a pointer to an existing <ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> object which the <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> is responsible for advancing forward in time, and pointer to a <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> object which contains the initial set of parameters that the <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> may configure itself with.</para>
<para>The integrator will hold onto the <ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> pointer, m, and when the Integrator::integrate method is called, will advance the model object forward in time.</para>
<para>There are three key members of the <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> interface that an integrator needs be implement:</para>
<para><itemizedlist>
<listitem><para>Integrator::setSimulateOptions This method is called whenever the simulation parameters are changed via calls to the <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner::simulate</ref> method, the setSimulateOptions method is called by <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object to inform the <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> of any new parameter changes. This method should be used to read any updated tuning parameters.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Integrator::integrate This is the actual method that should perform the time integration.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>Integrator::restart This method is called whenever the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object is re-started. This gives the integrator an option to reload any internal solvers. Simple integrators like the <ref refid="classrr_1_1EulerIntegrator" kindref="compound">EulerIntegrator</ref> does not really do anything in the <ref refid="classrr_1_1EulerIntegrator_1a08903e998cf527552442f8fa930772c8" kindref="member">EulerIntegrator::restart</ref> method, but more sophisticated ones like the CVODE integrator perform a number of tasks such as re-calclating the tollerances and so forth.</para>
</listitem>
</itemizedlist>
The other key thing that an <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> needs to do is provide a <programlisting><codeline><highlight class="normal">static<sp/>const<sp/>Dictionary*<sp/>getIntegratorOptions();</highlight></codeline>
</programlisting> method, as in the EulerIntegrator::getIntegratorOptions. This method is used by the <ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref> to build a list of all the available tuning parameters that any integrator supports. The returned <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> pointer should be statically created inside the implemtation file, and should contain the following keys / values</para>
<para><table rows="4" cols="2"><row>
<entry thead="no"><para>Key </para>
</entry><entry thead="no"><para>Value </para>
</entry></row>
<row>
<entry thead="no"><para>integrator </para>
</entry><entry thead="no"><para>The name of your new integrator  </para>
</entry></row>
<row>
<entry thead="no"><para>integrator.description </para>
</entry><entry thead="no"><para>A description of your new integrator  </para>
</entry></row>
<row>
<entry thead="no"><para>integrator.hint </para>
</entry><entry thead="no"><para>A short hint for your new integrator  </para>
</entry></row>
</table>
</para>
<para>Any additional tuning parameters should be listed in this dictionary, where each tuning parameter should have three key/value pairs.</para>
<para><table rows="4" cols="2"><row>
<entry thead="no"><para>Key </para>
</entry><entry thead="no"><para>Value </para>
</entry></row>
<row>
<entry thead="no"><para>parameterName </para>
</entry><entry thead="no"><para>The default value of this tuning parmeter  </para>
</entry></row>
<row>
<entry thead="no"><para>parameterName.description </para>
</entry><entry thead="no"><para>A description of this tuning parameter  </para>
</entry></row>
<row>
<entry thead="no"><para>integrator.hint </para>
</entry><entry thead="no"><para>A short hint for this tuning parameter  </para>
</entry></row>
</table>
</para>
<para>When the Integrator::setSimulateOptions method is called, the integrator should read any parameters it expects out of the given dictionary.</para>
</sect2>
<sect2 id="index_1sec_tellrr">
<title>Telling RoadRunner about the new Integrator</title>
<para>In order for the <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner::simulate</ref> method use the new integrator, it needs to know about it. The <ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref> is the only object that knows about all the integrators, and a few lines of code need to be added in the implementation of this object so that it can construct one.</para>
<para>First, a new enum value needs to be added to the Integrator::IntegratorId enum. This is numeric index of the integrator. Then the textual name of the integrator needs to be added to the <computeroutput>integratorNames</computeroutput> static array in the <ref refid="Integrator_8cpp" kindref="compound">Integrator.cpp</ref> file. Then a line needs to be added inside the <ref refid="classrr_1_1IntegratorFactory_1ab7298b70afb06e1200181cf3981f739c" kindref="member">IntegratorFactory::New</ref> method which will create the new integrator, e.g. this is a series of <computeroutput>if</computeroutput> statements, and a new statment needs to be created which creates an instance of the new kind of integrator:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(opt-&gt;integrator<sp/>==<sp/>Integrator::GILLESPIE)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>new<sp/>GillespieIntegrator(m,<sp/>opt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else<sp/>if(opt-&gt;integrator<sp/>==<sp/>Integrator::RK4)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>new<sp/>RK4Integrator(m,<sp/>opt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else<sp/>if(opt-&gt;integrator<sp/>==<sp/>Integrator::EULER)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>new<sp/>EulerIntegrator(m,<sp/>opt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>new<sp/>CVODEIntegrator(m,<sp/>opt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Finally, the IntegratorFactory::getIntegratorOptions() method needs to be updated to also return the dictionary that was created in the getIntegratorOptions method, e.g.</para>
<para><programlisting><codeline><highlight class="normal">const<sp/>Dictionary*<sp/>options[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CVODEIntegrator::getIntegratorOptions(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GillespieIntegrator::getIntegratorOptions(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RK4Integrator::getIntegratorOptions(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EulerIntegrator::getIntegratorOptions()</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Once the <ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref> is made aware of your new integrator, it is available for full introspection and can be used by just adding the <computeroutput>integrator=&quot;myNewIntegrator&quot;</computeroutput> argument whenever the <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner.simulate</ref> method is called. The <ref refid="classrr_1_1EulerIntegrator" kindref="compound">EulerIntegrator</ref> was created as an example of how to create and add a new integrator, have a look at it.</para>
</sect2>
<sect2 id="index_1sec_euler">
<title>A complete example of creating an integrator.</title>
<para>This section includes the complete Euler integrator implemented in <ref refid="EulerIntegrator_8h_source" kindref="compound">EulerIntegrator.h</ref> as an example of creating a new integrator. This class has two demo paramters which may be set via the keyword arguments to <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner.simulate</ref> in Python, or set via the <ref refid="classrr_1_1Dictionary_1a4708fee12ec4cd5e879df9bf5570c02a" kindref="member">Dictionary::setItem</ref> method on the dictionary that is given to the <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner::simulate</ref> method in C++. In Python, this would be:</para>
<para><programlisting><codeline><highlight class="normal">r.simulate(integrator=&apos;euler&apos;,<sp/>exampleParameter1=123456,<sp/>exampleParameter2=&apos;some<sp/>value&apos;);</highlight></codeline>
<codeline><highlight class="normal">print(r.integrator)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;<sp/>roadrunner.EulerIntegrator()<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;this&apos;<sp/>:<sp/>0x101f28350</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;exampleParameter1&apos;<sp/>:<sp/>123456</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&apos;exampleParameter2&apos;<sp/>:<sp/>some<sp/>value</highlight></codeline>
<codeline><highlight class="normal">}&gt;</highlight></codeline>
</programlisting></para>
<para>In Python, all the keyword arguments to the simulate method are packaged up and added to the dictionary which is passed into the <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">RoadRunner::simulate</ref> method. In C++, the equivalent code would be: <programlisting><codeline><highlight class="normal">SimulateOptions&amp;<sp/>opt<sp/>=<sp/>r.getSimulateOptions();</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;integrator&quot;,<sp/>&quot;euler&quot;)</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;exampleParameter1&quot;,<sp/>123456);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;exampleParameter2&quot;,<sp/>&quot;some<sp/>value&quot;);</highlight></codeline>
<codeline><highlight class="normal">r.simulate();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>r.getIntegrator()-&gt;toString()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting></para>
<para>The <ref refid="EulerIntegrator_8h_source" kindref="compound">EulerIntegrator.h</ref> file serves as a complete example of creating an new integrator. This example was written entierly in the header file for clarity, but a real integrator should separate the code and header files. </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
