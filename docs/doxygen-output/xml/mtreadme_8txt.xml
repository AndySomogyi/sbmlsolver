<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="mtreadme_8txt" kind="file" language="C++">
    <compoundname>mtreadme.txt</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mtreadme_8txt_1a9741fd93b2e67aa6fccda84bf683f3f8" prot="public" static="no" mutable="no">
        <type>This is a Mersenne Twister pseudo random number generator with period with improved initialization</type>
        <definition>This is a Mersenne Twister pseudo random number generator with period with improved initialization scheme</definition>
        <argsstring></argsstring>
        <name>scheme</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="2" column="45" bodyfile="c/mtreadme.txt" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1a5f38a948a7b88f9a1fb6b21689c98703" prot="public" static="no" mutable="no">
        <type>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution <ref refid="classMTRand__closed" kindref="compound">MTRand_closed</ref> generates uniform double precision floating point numbers in the closed bit resolution Usage Use mtrand</type>
        <definition>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution MTRand_closed generates uniform double precision floating point numbers in the closed bit resolution Usage Use mtrand cpp</definition>
        <argsstring></argsstring>
        <name>cpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="57" column="7" bodyfile="c/mtreadme.txt" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1a8c6446766faf6a2ed8dd693ebc0f2e55" prot="public" static="no" mutable="no">
        <type>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution <ref refid="classMTRand__closed" kindref="compound">MTRand_closed</ref> generates uniform double precision floating point numbers in the closed bit resolution Usage Use mtrand e g g yourprogram cpp mtrand cpp As an</type>
        <definition>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution MTRand_closed generates uniform double precision floating point numbers in the closed bit resolution Usage Use mtrand e g g yourprogram cpp mtrand cpp As an example</definition>
        <argsstring></argsstring>
        <name>example</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="59" column="7" bodyfile="c/mtreadme.txt" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1acc5b1521e2bc1130791838d97866fac6" prot="public" static="no" mutable="no">
        <type>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution <ref refid="classMTRand__closed" kindref="compound">MTRand_closed</ref> generates uniform double precision floating point numbers in the closed bit resolution Usage Use mtrand e g g yourprogram cpp mtrand cpp As an the usage of an <ref refid="classMTRand" kindref="compound">MTRand</ref> object is given The other classes can be used in the same way unsigned long</type>
        <definition>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution MTRand_closed generates uniform double precision floating point numbers in the closed bit resolution Usage Use mtrand e g g yourprogram cpp mtrand cpp As an the usage of an MTRand object is given The other classes can be used in the same way unsigned long s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <initializer>= 89UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="62" column="15" bodyfile="c/mtreadme.txt" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1a7c0566e2365001baedabcdd82ca782e5" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long array[]</definition>
        <argsstring>[]</argsstring>
        <name>array</name>
        <initializer>= {0x123, 0x234, 0x345, 0x456}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="63" column="15" bodyfile="c/mtreadme.txt" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1ab3ade9acd6fa96048f404fb8bf612e3f" prot="public" static="no" mutable="no">
        <type><ref refid="classMTRand" kindref="compound">MTRand</ref></type>
        <definition>MTRand mt(array, 4)</definition>
        <argsstring></argsstring>
        <name>mt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="65" column="8" bodyfile="c/mtreadme.txt" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1a6924dfd796e189bb89a08f6880fd1b5d" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>random_number</definition>
        <argsstring></argsstring>
        <name>random_number</name>
        <initializer>= mt()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="86" column="15" bodyfile="c/mtreadme.txt" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1aa71d0f358f3b1bc34fb1c34c1cdc3b8a" prot="public" static="no" mutable="no">
        <type>Test program A small program to test the random number generators is included as mttest cpp It is an example to initialize with an array of</type>
        <definition>Test program A small program to test the random number generators is included as mttest cpp It is an example to initialize with an array of length</definition>
        <argsstring></argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="91" column="59" bodyfile="c/mtreadme.txt" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mtreadme_8txt_1a0c473e0b316709ded8bfc29d6d5a5859" prot="public" static="no" mutable="no">
        <type>Test program A small program to test the random number generators is included as mttest cpp It is an example to initialize with an array of then output unsigned bit</type>
        <definition>Test program A small program to test the random number generators is included as mttest cpp It is an example to initialize with an array of then output unsigned bit integers</definition>
        <argsstring></argsstring>
        <name>integers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="92" column="27" bodyfile="c/mtreadme.txt" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mtreadme_8txt_1a340696d2beaf1a4d01eb56e3e27057e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper</type>
        <definition>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper Bedaux</definition>
        <argsstring>(http:Contents of this tar ball:mtreadme.txt this file mtrand.h the include file containing class declarations mtrand.cpp the library file containing non-inline members mttest.cpp small program to test the random number generators mttest.out output of the test program to compare to if modified 1. Initialization The initialization scheme for the previous versions of MT(e.g. 1999/10/28 version or earlier) has a tiny problem, that the most significant bits of the seed is not well reflected to the state std::vector of MT. This version(2002/1/26) has two initialization schemes:seed(s) and seed(array, length). seed(s) initializes the state std::vector by using one unsigned 32-bit integer &apos;s&apos;, which may be zero. seed(array, length) initializes the state std::vector by using an array &apos;array&apos; of unsigned 32-bit integers of length &apos;length&apos;. If &apos;length&apos; is smaller than 624, then each array of 32-bit integers gives a distinct initial state std::vector. This is useful if you want a larger seed space than a 32-bit word. 2. Generators Below is an overview of the generators(functor classes) available. The last four are derived from the first one and all instances of every generator use the same static state std::vector in computer memory, so initialization must only be done once, when the first generator instance is created. MTRand_int32 generates unsigned 32-bit integers. MTRand generates uniform double precision floating point numbers in the halfopen interval[0, 1)(32-bit resolution). MTRand_open generates uniform double precision floating point numbers in the open interval(0</argsstring>
        <name>Bedaux</name>
        <param>
          <type>http:Contents of this tar ball:mtreadme.txt this file mtrand.h the include file containing class declarations mtrand.cpp the library file containing non-inline members mttest.cpp small program to test the random number generators mttest.out output of the test program to compare to if modified 1. Initialization The initialization scheme for the previous versions of MT(e.g. 1999/10/28 version or earlier) has a tiny</type>
          <declname>problem</declname>
        </param>
        <param>
          <type>that the most significant bits of the seed is not well reflected to the state std::vector of MT. This version(2002/1/26) has two initialization schemes:seed(s) and seed(array, length). seed(s) initializes the state std::vector by using one unsigned 32-bit integer &apos;s&apos;</type>
        </param>
        <param>
          <type>which may be zero. seed(array, length) initializes the state std::vector by using an array &apos;array&apos; of unsigned 32-bit integers of length &apos;length&apos;. If &apos;length&apos; is smaller than</type>
          <declname>624</declname>
        </param>
        <param>
          <type>then each array of 32-bit integers gives a distinct initial state std::vector. This is useful if you want a larger seed space than a 32-bit word. 2. Generators Below is an overview of the generators(functor classes) available. The last four are derived from the first one and all instances of every generator use the same static state std::vector in computer</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>so initialization must only be done</type>
          <declname>once</declname>
        </param>
        <param>
          <type>when the first generator instance is created. <ref refid="classMTRand__int32" kindref="compound">MTRand_int32</ref> generates unsigned 32-bit integers. <ref refid="classMTRand" kindref="compound">MTRand</ref> generates uniform double precision floating point numbers in the halfopen interval[</type>
          <declname>0</declname>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="6" column="8"/>
      </memberdef>
      <memberdef kind="function" id="mtreadme_8txt_1a39bf498612b7f2467520358ca7540040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution <ref refid="classMTRand__closed" kindref="compound">MTRand_closed</ref> generates uniform double precision floating point numbers in the closed</type>
        <definition>This is a Mersenne Twister pseudo random number generator with period with improved initialization modified on by Takuji Nishimura and Makoto Matsumoto This version is a port from the original C code to C by Jasper bit resolution MTRand_closed generates uniform double precision floating point numbers in the closed interval</definition>
        <argsstring>(32-bit resolution). MTRand53 generates uniform double precision floating point numbers in the half-open interval[0</argsstring>
        <name>interval</name>
        <param>
          <type>32-bit</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="50" column="17"/>
      </memberdef>
      <memberdef kind="function" id="mtreadme_8txt_1aa938ac95c5b85ead143a14291652acd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMTRand" kindref="compound">MTRand</ref></type>
        <definition>MTRand mt</definition>
        <argsstring>(s)</argsstring>
        <name>mt</name>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="71" column="8" declfile="c/mtreadme.txt" declline="71" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mtreadme_8txt_1adbb84e3eab5e35a72bf1c7f3d223b002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMTRand" kindref="compound">MTRand</ref></type>
        <definition>MTRand mt</definition>
        <argsstring>(array, 4)</argsstring>
        <name>mt</name>
        <param>
          <type>array</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="75" column="8" declfile="c/mtreadme.txt" declline="75" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mtreadme_8txt_1acbe9205220c104f690d579ffd5034b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mt</type>
        <definition>mt seed</definition>
        <argsstring>(s)</argsstring>
        <name>seed</name>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="79" column="3" declfile="c/mtreadme.txt" declline="79" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="mtreadme_8txt_1a5671ee376a9974adb37c0a2a4add355f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mt</type>
        <definition>mt seed</definition>
        <argsstring>(array, 4)</argsstring>
        <name>seed</name>
        <param>
          <type>array</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/mtreadme.txt" line="81" column="3" declfile="c/mtreadme.txt" declline="81" declcolumn="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">This<sp/>is<sp/>a<sp/>Mersenne<sp/>Twister<sp/>pseudo-random<sp/>number<sp/>generator</highlight></codeline>
<codeline lineno="2"><highlight class="normal">with<sp/>period<sp/>2^19937<sp/>-<sp/>1<sp/>with<sp/>improved<sp/>initialization<sp/>scheme,</highlight></codeline>
<codeline lineno="3"><highlight class="normal">modified<sp/>on<sp/>2002/1/26<sp/>by<sp/>Takuji<sp/>Nishimura<sp/>and<sp/>Makoto<sp/>Matsumoto.</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">This<sp/>version<sp/>is<sp/>a<sp/>port<sp/>from<sp/>the<sp/>original<sp/>C-code<sp/>to<sp/>C++<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="normal">Jasper<sp/>Bedaux<sp/>(http:</highlight><highlight class="comment">//www.bedaux.net/mtrand/).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">Contents<sp/>of<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>tar<sp/>ball:</highlight></codeline>
<codeline lineno="9"><highlight class="normal">mtreadme.txt<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>file</highlight></codeline>
<codeline lineno="10"><highlight class="normal">mtrand.h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>include<sp/>file<sp/>containing<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>declarations</highlight></codeline>
<codeline lineno="11"><highlight class="normal">mtrand.cpp<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>library<sp/>file<sp/>containing<sp/>non-</highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>members</highlight></codeline>
<codeline lineno="12"><highlight class="normal">mttest.cpp<sp/><sp/><sp/><sp/><sp/><sp/>small<sp/>program<sp/>to<sp/>test<sp/>the<sp/>random<sp/>number<sp/>generators</highlight></codeline>
<codeline lineno="13"><highlight class="normal">mttest.out<sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>of<sp/>the<sp/>test<sp/>program<sp/>to<sp/>compare<sp/>to<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>modified</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">1.<sp/>Initialization</highlight></codeline>
<codeline lineno="16"><highlight class="normal">The<sp/>initialization<sp/>scheme<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>previous<sp/>versions<sp/>of<sp/>MT</highlight></codeline>
<codeline lineno="17"><highlight class="normal">(e.g.<sp/>1999/10/28<sp/>version<sp/>or<sp/>earlier)<sp/>has<sp/>a<sp/>tiny<sp/>problem,<sp/>that</highlight></codeline>
<codeline lineno="18"><highlight class="normal">the<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>the<sp/>seed<sp/>is<sp/>not<sp/>well<sp/>reflected</highlight></codeline>
<codeline lineno="19"><highlight class="normal">to<sp/>the<sp/>state<sp/>std::vector<sp/>of<sp/>MT.</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">This<sp/>version<sp/>(2002/1/26)<sp/>has<sp/>two<sp/>initialization<sp/>schemes:</highlight></codeline>
<codeline lineno="22"><highlight class="normal">seed(s)<sp/>and<sp/>seed(array,<sp/>length).</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">seed(s)<sp/>initializes<sp/>the<sp/>state<sp/>std::vector<sp/>by<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">one<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>32-bit<sp/>integer<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/>which<sp/>may<sp/>be<sp/>zero.</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">seed(array,<sp/>length)<sp/>initializes<sp/>the<sp/>state<sp/>std::vector</highlight></codeline>
<codeline lineno="28"><highlight class="normal">by<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>an<sp/>array<sp/></highlight><highlight class="stringliteral">&apos;array&apos;</highlight><highlight class="normal"><sp/>of<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>32-bit<sp/>integers</highlight></codeline>
<codeline lineno="29"><highlight class="normal">of<sp/>length<sp/></highlight><highlight class="stringliteral">&apos;length&apos;</highlight><highlight class="normal">.<sp/>If<sp/></highlight><highlight class="stringliteral">&apos;length&apos;</highlight><highlight class="normal"><sp/>is<sp/>smaller<sp/>than<sp/>624,</highlight></codeline>
<codeline lineno="30"><highlight class="normal">then<sp/>each<sp/>array<sp/>of<sp/>32-bit<sp/>integers<sp/>gives<sp/>a<sp/>distinct<sp/>initial</highlight></codeline>
<codeline lineno="31"><highlight class="normal">state<sp/>std::vector.<sp/>This<sp/>is<sp/>useful<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>you<sp/>want<sp/>a<sp/>larger<sp/>seed<sp/>space</highlight></codeline>
<codeline lineno="32"><highlight class="normal">than<sp/>a<sp/>32-bit<sp/>word.</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">2.<sp/>Generators</highlight></codeline>
<codeline lineno="35"><highlight class="normal">Below<sp/>is<sp/>an<sp/>overview<sp/>of<sp/>the<sp/>generators<sp/>(functor<sp/>classes)<sp/>available.</highlight></codeline>
<codeline lineno="36"><highlight class="normal">The<sp/>last<sp/>four<sp/>are<sp/>derived<sp/>from<sp/>the<sp/>first<sp/>one<sp/>and<sp/>all<sp/>instances<sp/>of<sp/>every</highlight></codeline>
<codeline lineno="37"><highlight class="normal">generator<sp/>use<sp/>the<sp/>same<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>state<sp/>std::vector<sp/>in<sp/>computer<sp/>memory,<sp/>so</highlight></codeline>
<codeline lineno="38"><highlight class="normal">initialization<sp/>must<sp/>only<sp/>be<sp/>done<sp/>once,<sp/>when<sp/>the<sp/>first<sp/>generator<sp/>instance</highlight></codeline>
<codeline lineno="39"><highlight class="normal">is<sp/>created.</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">MTRand_int32<sp/><sp/>generates<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>32-bit<sp/>integers.</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">MTRand<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generates<sp/>uniform<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision<sp/>floating<sp/>point<sp/>numbers</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>halfopen<sp/>interval<sp/>[0,<sp/>1)<sp/>(32-bit<sp/>resolution).</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classMTRand__open" kindref="compound">MTRand_open</ref><sp/><sp/><sp/>generates<sp/>uniform<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision<sp/>floating<sp/>point<sp/>numbers</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>open<sp/>interval<sp/>(0,<sp/>1)<sp/>(32-bit<sp/>resolution).</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classMTRand__closed" kindref="compound">MTRand_closed</ref><sp/>generates<sp/>uniform<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision<sp/>floating<sp/>point<sp/>numbers</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>closed<sp/>interval<sp/>[0,<sp/>1]<sp/>(32-bit<sp/>resolution).</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">MTRand53<sp/><sp/><sp/><sp/><sp/><sp/>generates<sp/>uniform<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision<sp/>floating<sp/>point<sp/>numbers</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>in<sp/>the<sp/>half-open<sp/>interval<sp/>[0,<sp/>1)<sp/>(53-bit<sp/>resolution).</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">3.<sp/>Usage</highlight></codeline>
<codeline lineno="56"><highlight class="normal">Use<sp/>#include<sp/></highlight><highlight class="stringliteral">&quot;mtrand.h&quot;</highlight><highlight class="normal"><sp/>in<sp/>your<sp/>C++<sp/>file<sp/>and<sp/>compile<sp/>together<sp/>with</highlight></codeline>
<codeline lineno="57"><highlight class="normal">mtrand.cpp,<sp/>e.g.<sp/>g++<sp/>yourprogram.cpp<sp/>mtrand.cpp.</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">As<sp/>an<sp/>example,<sp/>the<sp/>usage<sp/>of<sp/>an<sp/><ref refid="classMTRand" kindref="compound">MTRand</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>is<sp/>given.<sp/>The<sp/>other<sp/>classes</highlight></codeline>
<codeline lineno="60"><highlight class="normal">can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>same<sp/>way.</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">unsigned<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>89UL;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{0x123,<sp/>0x234,<sp/>0x345,<sp/>0x456};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="classMTRand" kindref="compound">MTRand</ref><sp/>mt;<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>construct<sp/>random<sp/>number<sp/>generator,<sp/>no<sp/>initialization<sp/>is<sp/>done<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>other<sp/>instance<sp/>already<sp/>performed<sp/>an<sp/>initialization,<sp/>else,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>seed<sp/>number<sp/>is<sp/>used<sp/>(not<sp/>recommended)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternative:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="classMTRand" kindref="compound">MTRand</ref><sp/>mt(s);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>generator<sp/>is<sp/>initialized<sp/>with<sp/>the<sp/>number<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alternative:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="classMTRand" kindref="compound">MTRand</ref><sp/>mt(array,<sp/>4);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>generator<sp/>is<sp/>initialized<sp/>with<sp/>&apos;array&apos;<sp/>of<sp/>length<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>initializations<sp/>can<sp/>also<sp/>be<sp/>done<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">mt.seed(s);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">mt.seed(array,<sp/>4);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>MTRand<sp/>object<sp/>behaves<sp/>like<sp/>a<sp/>generator,<sp/>i.e.,<sp/>like<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>accepts<sp/>no<sp/>arguments<sp/>and<sp/>returns<sp/>a<sp/>pseudo<sp/>random<sp/>number,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>to<sp/>generate<sp/>a<sp/>random<sp/>number<sp/>use<sp/>for<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>random_number;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">random_number<sp/>=<sp/>mt();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">4.<sp/>Test<sp/>program</highlight></codeline>
<codeline lineno="90"><highlight class="normal">A<sp/>small<sp/>program<sp/>to<sp/>test<sp/>the<sp/>random<sp/>number<sp/>generators<sp/>is<sp/>included<sp/>as<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal">mttest.cpp.<sp/>It<sp/>is<sp/>an<sp/>example<sp/>to<sp/>initialize<sp/>with<sp/>an<sp/>array<sp/>of<sp/>length<sp/>4,</highlight></codeline>
<codeline lineno="92"><highlight class="normal">then<sp/>output<sp/>1000<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>32-bit<sp/>integers,<sp/>then<sp/>1000<sp/>real<sp/>[0,1)<sp/>numbers.</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">5.<sp/>The<sp/>output</highlight></codeline>
<codeline lineno="95"><highlight class="normal">The<sp/>output<sp/>of<sp/>mttest.cpp<sp/>is<sp/>in<sp/>the<sp/>file<sp/>mttest.out.</highlight></codeline>
<codeline lineno="96"><highlight class="normal">If<sp/>you<sp/>revise<sp/>or<sp/>translate<sp/>the<sp/>code,<sp/>check<sp/>the<sp/>output<sp/>by<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>file.<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">6.<sp/>Cryptography</highlight></codeline>
<codeline lineno="99"><highlight class="normal">This<sp/>generator<sp/>is<sp/>not<sp/>cryptographically<sp/>secure.<sp/>You<sp/>need<sp/>to<sp/>use<sp/>a<sp/>one-way</highlight></codeline>
<codeline lineno="100"><highlight class="normal">(or<sp/>hash)<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>to<sp/>obtain<sp/>a<sp/>secure<sp/>random<sp/>sequence.</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">7.<sp/>Correspondence</highlight></codeline>
<codeline lineno="103"><highlight class="normal">See<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal">URL:<sp/>http:</highlight><highlight class="comment">//www.math.keio.ac.jp/matumoto/emt.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">email:<sp/>matumoto@math.keio.ac.jp,<sp/>nisimura@sci.kj.yamagata-u.ac.jp</highlight></codeline>
<codeline lineno="106"><highlight class="normal">For<sp/>correspondence<sp/>about<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>C++<sp/>port<sp/>see</highlight></codeline>
<codeline lineno="107"><highlight class="normal">http:</highlight><highlight class="comment">//www.bedaux.net/mtrand/<sp/>for<sp/>contact<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">8.<sp/>Reference</highlight></codeline>
<codeline lineno="110"><highlight class="normal">M.<sp/>Matsumoto<sp/>and<sp/>T.<sp/>Nishimura,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;Mersenne<sp/>Twister:<sp/>A<sp/>623-Dimensionally<sp/>Equidistributed<sp/>Uniform<sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral">Pseudo-Random<sp/>Number<sp/>Generator&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="113"><highlight class="normal">ACM<sp/>Transactions<sp/>on<sp/>Modeling<sp/>and<sp/>Computer<sp/>Simulation,</highlight></codeline>
<codeline lineno="114"><highlight class="normal">Vol.<sp/>8,<sp/>No.<sp/>1,<sp/>January<sp/>1998,<sp/>pp<sp/>3-30.</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">-------</highlight></codeline>
<codeline lineno="117"><highlight class="normal">Copyright<sp/>(C)<sp/>1997<sp/>-<sp/>2002,<sp/>Makoto<sp/>Matsumoto<sp/>and<sp/>Takuji<sp/>Nishimura,</highlight></codeline>
<codeline lineno="118"><highlight class="normal">All<sp/>rights<sp/>reserved.</highlight></codeline>
    </programlisting>
    <location file="c/mtreadme.txt"/>
  </compounddef>
</doxygen>
