<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacerr" kind="namespace" language="C++">
    <compoundname>rr</compoundname>
    <innerclass refid="classrr_1_1ApproxSteadyStateDecorator" prot="public">rr::ApproxSteadyStateDecorator</innerclass>
    <innerclass refid="classrr_1_1BasicDictionary" prot="public">rr::BasicDictionary</innerclass>
    <innerclass refid="classrr_1_1BasicNewtonIteration" prot="public">rr::BasicNewtonIteration</innerclass>
    <innerclass refid="classrr_1_1CCompiler" prot="public">rr::CCompiler</innerclass>
    <innerclass refid="classrr_1_1CModelGenerator" prot="public">rr::CModelGenerator</innerclass>
    <innerclass refid="classrr_1_1CodeBuilder" prot="public">rr::CodeBuilder</innerclass>
    <innerclass refid="classrr_1_1CompiledExecutableModel" prot="public">rr::CompiledExecutableModel</innerclass>
    <innerclass refid="classrr_1_1CompiledModelGenerator" prot="public">rr::CompiledModelGenerator</innerclass>
    <innerclass refid="classrr_1_1CompiledModelState" prot="public">rr::CompiledModelState</innerclass>
    <innerclass refid="classrr_1_1Compiler" prot="public">rr::Compiler</innerclass>
    <innerclass refid="classrr_1_1Config" prot="public">rr::Config</innerclass>
    <innerclass refid="classrr_1_1CoreException" prot="public">rr::CoreException</innerclass>
    <innerclass refid="structrr_1_1csr__matrix__t" prot="public">rr::csr_matrix_t</innerclass>
    <innerclass refid="classrr_1_1CVODEException" prot="public">rr::CVODEException</innerclass>
    <innerclass refid="classrr_1_1CVODEIntegrator" prot="public">rr::CVODEIntegrator</innerclass>
    <innerclass refid="classrr_1_1Dictionary" prot="public">rr::Dictionary</innerclass>
    <innerclass refid="classrr_1_1DidNotConvergeException" prot="public">rr::DidNotConvergeException</innerclass>
    <innerclass refid="classrr_1_1EulerIntegrator" prot="public">rr::EulerIntegrator</innerclass>
    <innerclass refid="classrr_1_1Event" prot="public">rr::Event</innerclass>
    <innerclass refid="classrr_1_1EventListener" prot="public">rr::EventListener</innerclass>
    <innerclass refid="classrr_1_1EventListenerException" prot="public">rr::EventListenerException</innerclass>
    <innerclass refid="classrr_1_1Exception" prot="public">rr::Exception</innerclass>
    <innerclass refid="classrr_1_1ExecutableModel" prot="public">rr::ExecutableModel</innerclass>
    <innerclass refid="classrr_1_1ExecutableModelFactory" prot="public">rr::ExecutableModelFactory</innerclass>
    <innerclass refid="classrr_1_1FileName" prot="public">rr::FileName</innerclass>
    <innerclass refid="classrr_1_1FixedPointIteration" prot="public">rr::FixedPointIteration</innerclass>
    <innerclass refid="classrr_1_1ForwardSensitivitySolver" prot="public">rr::ForwardSensitivitySolver</innerclass>
    <innerclass refid="classrr_1_1GillespieIntegrator" prot="public">rr::GillespieIntegrator</innerclass>
    <innerclass refid="classrr_1_1IniFile" prot="public">rr::IniFile</innerclass>
    <innerclass refid="classrr_1_1IniKey" prot="public">rr::IniKey</innerclass>
    <innerclass refid="classrr_1_1IniSection" prot="public">rr::IniSection</innerclass>
    <innerclass refid="classrr_1_1Integrator" prot="public">rr::Integrator</innerclass>
    <innerclass refid="classrr_1_1IntegratorException" prot="public">rr::IntegratorException</innerclass>
    <innerclass refid="classrr_1_1IntegratorFactory" prot="public">rr::IntegratorFactory</innerclass>
    <innerclass refid="classrr_1_1IntegratorListener" prot="public">rr::IntegratorListener</innerclass>
    <innerclass refid="classrr_1_1IntStringHashTable" prot="public">rr::IntStringHashTable</innerclass>
    <innerclass refid="classrr_1_1InvalidKeyException" prot="public">rr::InvalidKeyException</innerclass>
    <innerclass refid="structrr_1_1isValidVariantType" prot="public">rr::isValidVariantType</innerclass>
    <innerclass refid="structrr_1_1isValidVariantType_3_01T_00_01std_1_1variant_3_01ALL__T_8_8_8_01_4_01_4" prot="public">rr::isValidVariantType&lt; T, std::variant&lt; ALL_T... &gt; &gt;</innerclass>
    <innerclass refid="classrr_1_1KinsolException" prot="public">rr::KinsolException</innerclass>
    <innerclass refid="classrr_1_1KinsolSteadyStateSolver" prot="public">rr::KinsolSteadyStateSolver</innerclass>
    <innerclass refid="classrr_1_1LinesearchNewtonIteration" prot="public">rr::LinesearchNewtonIteration</innerclass>
    <innerclass refid="classrr_1_1LoadSBMLOptions" prot="public">rr::LoadSBMLOptions</innerclass>
    <innerclass refid="classrr_1_1Logger" prot="public">rr::Logger</innerclass>
    <innerclass refid="classrr_1_1LoggingBuffer" prot="public">rr::LoggingBuffer</innerclass>
    <innerclass refid="classrr_1_1Matrix" prot="public">rr::Matrix</innerclass>
    <innerclass refid="classrr_1_1Matrix3D" prot="public">rr::Matrix3D</innerclass>
    <innerclass refid="classrr_1_1ModelSharedLibrary" prot="public">rr::ModelSharedLibrary</innerclass>
    <innerclass refid="classrr_1_1ModelSymbols" prot="public">rr::ModelSymbols</innerclass>
    <innerclass refid="classrr_1_1NewtonIteration" prot="public">rr::NewtonIteration</innerclass>
    <innerclass refid="classrr_1_1NLEQ1Interface" prot="public">rr::NLEQ1Interface</innerclass>
    <innerclass refid="classrr_1_1NLEQ1Solver" prot="public">rr::NLEQ1Solver</innerclass>
    <innerclass refid="classrr_1_1NLEQ2Interface" prot="public">rr::NLEQ2Interface</innerclass>
    <innerclass refid="classrr_1_1NLEQ2Solver" prot="public">rr::NLEQ2Solver</innerclass>
    <innerclass refid="classrr_1_1NLEQException" prot="public">rr::NLEQException</innerclass>
    <innerclass refid="classrr_1_1NLEQSolver" prot="public">rr::NLEQSolver</innerclass>
    <innerclass refid="classrr_1_1NOMException" prot="public">rr::NOMException</innerclass>
    <innerclass refid="classrr_1_1NOMSupport" prot="public">rr::NOMSupport</innerclass>
    <innerclass refid="classrr_1_1NotImplementedException" prot="public">rr::NotImplementedException</innerclass>
    <innerclass refid="classrr_1_1NullPointerException" prot="public">rr::NullPointerException</innerclass>
    <innerclass refid="classrr_1_1PendingAssignment" prot="public">rr::PendingAssignment</innerclass>
    <innerclass refid="classrr_1_1PresimulationDecorator" prot="public">rr::PresimulationDecorator</innerclass>
    <innerclass refid="classrr_1_1PresimulationProgramDecorator" prot="public">rr::PresimulationProgramDecorator</innerclass>
    <innerclass refid="classrr_1_1Random" prot="public">rr::Random</innerclass>
    <innerclass refid="classrr_1_1Registrable" prot="public">rr::Registrable</innerclass>
    <innerclass refid="classrr_1_1RegistrationFactory" prot="public">rr::RegistrationFactory</innerclass>
    <innerclass refid="classrr_1_1RK45Integrator" prot="public">rr::RK45Integrator</innerclass>
    <innerclass refid="classrr_1_1RK4Integrator" prot="public">rr::RK4Integrator</innerclass>
    <innerclass refid="classrr_1_1RoadRunner" prot="public">rr::RoadRunner</innerclass>
    <innerclass refid="classrr_1_1RoadRunnerData" prot="public">rr::RoadRunnerData</innerclass>
    <innerclass refid="classrr_1_1RoadRunnerImpl" prot="public">rr::RoadRunnerImpl</innerclass>
    <innerclass refid="classrr_1_1RoadRunnerMap" prot="public">rr::RoadRunnerMap</innerclass>
    <innerclass refid="structrr_1_1RoadRunnerOptions" prot="public">rr::RoadRunnerOptions</innerclass>
    <innerclass refid="classrr_1_1RRRule" prot="public">rr::RRRule</innerclass>
    <innerclass refid="classrr_1_1SBMLModelSimulation" prot="public">rr::SBMLModelSimulation</innerclass>
    <innerclass refid="classrr_1_1SBMLReader" prot="public">rr::SBMLReader</innerclass>
    <innerclass refid="classrr_1_1SBMLSymbol" prot="public">rr::SBMLSymbol</innerclass>
    <innerclass refid="classrr_1_1SBMLSymbolDependencies" prot="public">rr::SBMLSymbolDependencies</innerclass>
    <innerclass refid="classrr_1_1Scanner" prot="public">rr::Scanner</innerclass>
    <innerclass refid="classrr_1_1ScannerException" prot="public">rr::ScannerException</innerclass>
    <innerclass refid="classrr_1_1SelectionRecord" prot="public">rr::SelectionRecord</innerclass>
    <innerclass refid="classrr_1_1SensitivitySolver" prot="public">rr::SensitivitySolver</innerclass>
    <innerclass refid="classrr_1_1SensitivitySolverFactory" prot="public">rr::SensitivitySolverFactory</innerclass>
    <innerclass refid="classrr_1_1Setting" prot="public">rr::Setting</innerclass>
    <innerclass refid="classrr_1_1SimulateOptions" prot="public">rr::SimulateOptions</innerclass>
    <innerclass refid="classrr_1_1Solver" prot="public">rr::Solver</innerclass>
    <innerclass refid="structrr_1_1sort__pred" prot="public">rr::sort_pred</innerclass>
    <innerclass refid="structrr_1_1SortByPriority" prot="public">rr::SortByPriority</innerclass>
    <innerclass refid="classrr_1_1SteadyStateSensitivitySolver" prot="public">rr::SteadyStateSensitivitySolver</innerclass>
    <innerclass refid="classrr_1_1SteadyStateSolver" prot="public">rr::SteadyStateSolver</innerclass>
    <innerclass refid="classrr_1_1SteadyStateSolverDecorator" prot="public">rr::SteadyStateSolverDecorator</innerclass>
    <innerclass refid="classrr_1_1SteadyStateSolverFactory" prot="public">rr::SteadyStateSolverFactory</innerclass>
    <innerclass refid="classrr_1_1StringBuilder" prot="public">rr::StringBuilder</innerclass>
    <innerclass refid="classrr_1_1StringList" prot="public">rr::StringList</innerclass>
    <innerclass refid="classrr_1_1StringListContainer" prot="public">rr::StringListContainer</innerclass>
    <innerclass refid="classrr_1_1StringSymbolHashTable" prot="public">rr::StringSymbolHashTable</innerclass>
    <innerclass refid="classrr_1_1SVD" prot="public">rr::SVD</innerclass>
    <innerclass refid="classrr_1_1Symbol" prot="public">rr::Symbol</innerclass>
    <innerclass refid="classrr_1_1SymbolList" prot="public">rr::SymbolList</innerclass>
    <innerclass refid="classrr_1_1TestSuiteModelSimulation" prot="public">rr::TestSuiteModelSimulation</innerclass>
    <innerclass refid="classrr_1_1TimeSeriesSensitivitySolver" prot="public">rr::TimeSeriesSensitivitySolver</innerclass>
    <innerclass refid="classrr_1_1Token" prot="public">rr::Token</innerclass>
    <innerclass refid="classrr_1_1UninitializedValueException" prot="public">rr::UninitializedValueException</innerclass>
    <innerclass refid="classrr_1_1Variant" prot="public">rr::Variant</innerclass>
    <innerclass refid="structrr_1_1VariantImpl" prot="public">rr::VariantImpl</innerclass>
    <innernamespace refid="namespacerr_1_1CodeTypes">rr::CodeTypes</innernamespace>
    <innernamespace refid="namespacerr_1_1conservation">rr::conservation</innernamespace>
    <innernamespace refid="namespacerr_1_1TCharCode">rr::TCharCode</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="rrConstants_8h_1a2f22df52beab4b09418ce2a7966f5838" prot="public" static="no" strong="no">
        <type></type>
        <name>SBMLType</name>
        <qualifiedname>rr::SBMLType</qualifiedname>
        <enumvalue id="rrConstants_8h_1a2f22df52beab4b09418ce2a7966f5838ab6b42795286e312b309617aab1edf045" prot="public">
          <name>stCompartment</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrConstants_8h_1a2f22df52beab4b09418ce2a7966f5838a786262f2c9a0943562a639053a786afb" prot="public">
          <name>stSpecies</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrConstants_8h_1a2f22df52beab4b09418ce2a7966f5838a9bf69ba641af67fd22d8a4d811278aa9" prot="public">
          <name>stParameter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.h" line="35" column="1" bodyfile="rrConstants.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005" prot="public" static="no" strong="no">
        <type></type>
        <name>LogLevel</name>
        <qualifiedname>rr::LogLevel</qualifiedname>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a57ea5f7b58b033bb996dff4fc61111c2" prot="public">
          <name>lAny</name>
          <initializer>= Logger::LOG_ERROR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a583ad5f4b72b03317171c6f551c8fe5f" prot="public">
          <name>lError</name>
          <initializer>= Logger::LOG_ERROR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a00aa81761706ab49daf71fa6e5f551a8" prot="public">
          <name>lWarning</name>
          <initializer>= Logger::LOG_WARNING</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a2f42fa8f4f5a1517178f590d89926b25" prot="public">
          <name>lInfo</name>
          <initializer>= Logger::LOG_INFORMATION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a084507cdaef3a71aa5fac1bd2ba49cf6" prot="public">
          <name>lDebug</name>
          <initializer>= Logger::LOG_DEBUG</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005aef41bfdd00db7a5493b994ad38b29df6" prot="public">
          <name>lDebug1</name>
          <initializer>= Logger::LOG_TRACE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a5861aa71de669526e837b8333143b4a5" prot="public">
          <name>lDebug2</name>
          <initializer>= Logger::LOG_TRACE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a3358096093513cf8f0634aee17280385" prot="public">
          <name>lDebug3</name>
          <initializer>= Logger::LOG_TRACE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005ac3a4c65456d59ce5ec9727134784da62" prot="public">
          <name>lDebug4</name>
          <initializer>= Logger::LOG_TRACE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005a6a3f5f1f3357952ab0e565ff7477e224" prot="public">
          <name>lDebug5</name>
          <initializer>= Logger::LOG_TRACE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrLogger_8h_1a83364c91d5282fcf907b0fcf14af9005afc1ec5e492e1e63ca85d42b0a686b5e8" prot="public">
          <name>lUser</name>
          <initializer>= Logger::LOG_TRACE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>old logging levels, here for compatibility </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.h" line="305" column="1" bodyfile="rrLogger.h" bodystart="306" bodyend="318"/>
      </memberdef>
      <memberdef kind="enum" id="rrRoadRunner_8cpp_1a61c49222ad5319277c02823eaa961f56" prot="public" static="no" strong="no">
        <type></type>
        <name>ParameterType</name>
        <qualifiedname>rr::ParameterType</qualifiedname>
        <enumvalue id="rrRoadRunner_8cpp_1a61c49222ad5319277c02823eaa961f56a3dba6d50202df38b2f98df112f02e042" prot="public">
          <name>ptGlobalParameter</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRoadRunner_8cpp_1a61c49222ad5319277c02823eaa961f56a336c860c1f4d6fc972a711095c0018fe" prot="public">
          <name>ptLocalParameter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRoadRunner_8cpp_1a61c49222ad5319277c02823eaa961f56a8888f4e11cd052e0584d154b93086118" prot="public">
          <name>ptBoundaryParameter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRoadRunner_8cpp_1a61c49222ad5319277c02823eaa961f56a9ece480b3e8b36b5c9cfb34d051811b4" prot="public">
          <name>ptConservationParameter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRoadRunner_8cpp_1a61c49222ad5319277c02823eaa961f56a1235718ad15aaac0d900ef332c146ecf" prot="public">
          <name>ptFloatingSpecies</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The type of sbml element that the RoadRunner::setParameterValue and RoadRunner::getParameterValue method operate on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="167" column="5" bodyfile="rrRoadRunner.cpp" bodystart="167" bodyend="173"/>
      </memberdef>
      <memberdef kind="enum" id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409" prot="public" static="no" strong="no">
        <type></type>
        <name>ValidateSBML</name>
        <qualifiedname>rr::ValidateSBML</qualifiedname>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409a91e73467ba3dbd6a274dab8e7fac52c9" prot="public">
          <name>VALIDATE_UNITS</name>
          <initializer>= (0x1 &lt;&lt; 0)</initializer>
          <briefdescription>
<para>Check consistency of measurement units associated with quantities (SBML L2V4 rules 105nn) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409a7f2f9396276f61dfd45f1f142724e219" prot="public">
          <name>VALIDATE_IDENTIFIER</name>
          <initializer>= (0x1 &lt;&lt; 1)</initializer>
          <briefdescription>
<para>Check correctness and consistency of identifiers used for model entities (SBML L2V4 rules 103nn) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409a6cc0cf10536bed22698c42fd731774a6" prot="public">
          <name>VALIDATE_MATHML</name>
          <initializer>= (0x1 &lt;&lt; 2)</initializer>
          <briefdescription>
<para>Check syntax of MathML mathematical expressions (SBML L2V4 rules 102nn) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409a093b0b6c543098c99ad94fcd33ff4057" prot="public">
          <name>VALIDATE_SBO</name>
          <initializer>= (0x1 &lt;&lt; 3)</initializer>
          <briefdescription>
<para>Check validity of SBO identifiers (if any) used in the model (SBML L2V4 rules 107nn) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409ae6252f4c7f8ed6da606a0a9d18bd5d32" prot="public">
          <name>VALIDATE_OVERDETERMINED</name>
          <initializer>= (0x1 &lt;&lt; 4)</initializer>
          <briefdescription>
<para>Perform static analysis of whether the model is overdetermined. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409acb352e2696534ae296172f6bc0a28a7b" prot="public">
          <name>VALIDATE_MODELING_PRACTICE</name>
          <initializer>= (0x1 &lt;&lt; 5)</initializer>
          <briefdescription>
<para>Perform additional checks for recommended good modeling practices. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="SBMLValidator_8h_1ae9b68e1552acb4d494177d09c229a409aab5e037fc089b392bd806c27b1499268" prot="public">
          <name>VALIDATE_GENERAL</name>
          <initializer>= (0x1 &lt;&lt; 6)</initializer>
          <briefdescription>
<para>Perform all other general SBML consistency checks (SBML L2V4 rules 2nnnn; highly recommended) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.h" line="17" column="5" bodyfile="SBMLValidator.h" bodystart="18" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="rrRule_8h_1a9bbb2a987a64c4d215fbc4c44d30d3e8" prot="public" static="no" strong="no">
        <type></type>
        <name>RuleType</name>
        <qualifiedname>rr::RuleType</qualifiedname>
        <enumvalue id="rrRule_8h_1a9bbb2a987a64c4d215fbc4c44d30d3e8a1566bfe16090d5b3189a3f5e28ef3588" prot="public">
          <name>rtAlgebraic</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRule_8h_1a9bbb2a987a64c4d215fbc4c44d30d3e8a39a03f55e676c6ab847c4dac31280cd5" prot="public">
          <name>rtAssignment</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRule_8h_1a9bbb2a987a64c4d215fbc4c44d30d3e8a46e91e4c6302952dc3d4bde624f42ea3" prot="public">
          <name>rtRate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rrRule_8h_1a9bbb2a987a64c4d215fbc4c44d30d3e8a7aa96bf9d4067897e3823acaeed63886" prot="public">
          <name>rtUnknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrRule.h" line="10" column="1" bodyfile="c/rrRule.h" bodystart="10" bodyend="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ForwardSensitivitySolver_8h_1aeb71153b7694712e658ad13af14b14bc" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, double &gt;</type>
        <definition>using rr::ParameterMap = typedef std::unordered_map&lt;std::string, double&gt;</definition>
        <argsstring></argsstring>
        <name>ParameterMap</name>
        <qualifiedname>rr::ParameterMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ForwardSensitivitySolver.h" line="20" column="5" bodyfile="ForwardSensitivitySolver.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Integrator_8h_1af88f77fb0c8c61ee1848be4c0894ac02" prot="public" static="no">
        <type>cxx11_ns::shared_ptr&lt; <ref refid="classrr_1_1IntegratorListener" kindref="compound">IntegratorListener</ref> &gt;</type>
        <definition>typedef cxx11_ns::shared_ptr&lt;IntegratorListener&gt; rr::IntegratorListenerPtr</definition>
        <argsstring></argsstring>
        <name>IntegratorListenerPtr</name>
        <qualifiedname>rr::IntegratorListenerPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Integrator.h" line="54" column="34" bodyfile="Integrator.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Registrable_8h_1a0a3eb10d1afd8b8dde7fea595681b099" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classrr_1_1Registrable" kindref="compound">Registrable</ref> * &gt;</type>
        <definition>typedef std::vector&lt; Registrable * &gt; rr::RegistrableVector</definition>
        <argsstring></argsstring>
        <name>RegistrableVector</name>
        <qualifiedname>rr::RegistrableVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Registrable.h" line="55" column="25" bodyfile="Registrable.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrConfig_8cpp_1a721f3bd2aae5c004a00fbd333dc0b1d6" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, int &gt;</type>
        <definition>typedef std::unordered_map&lt;std::string, int&gt; rr::StringIntMap</definition>
        <argsstring></argsstring>
        <name>StringIntMap</name>
        <qualifiedname>rr::StringIntMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="44" column="32" bodyfile="rrConfig.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrExecutableModel_8h_1af42654ad469e89c71909fbbff90b3c07" prot="public" static="no">
        <type>cxx11_ns::shared_ptr&lt; <ref refid="classrr_1_1EventListener" kindref="compound">EventListener</ref> &gt;</type>
        <definition>typedef cxx11_ns::shared_ptr&lt;EventListener&gt; rr::EventListenerPtr</definition>
        <argsstring></argsstring>
        <name>EventListenerPtr</name>
        <qualifiedname>rr::EventListenerPtr</qualifiedname>
        <briefdescription>
<para>listeners are shared objects, so use std smart pointers to manage them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrExecutableModel.h" line="71" column="34" bodyfile="rrExecutableModel.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrIniFile_8h_1ab9ebf92da929093088c06d28fedd9d45" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classrr_1_1IniKey" kindref="compound">IniKey</ref> * &gt;</type>
        <definition>typedef std::vector&lt; IniKey * &gt; rr::KeyList</definition>
        <argsstring></argsstring>
        <name>KeyList</name>
        <qualifiedname>rr::KeyList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniFile.h" line="25" column="33" bodyfile="rrIniFile.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrIniFile_8h_1aa0a3d918229a869cbbc3110cec85c73b" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>typedef std::vector&lt; std::string &gt; rr::NonKeyList</definition>
        <argsstring></argsstring>
        <name>NonKeyList</name>
        <qualifiedname>rr::NonKeyList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniFile.h" line="26" column="33" bodyfile="rrIniFile.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrIniFile_8h_1ae09add45e217ceb31e3073c599c25541" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classrr_1_1IniSection" kindref="compound">IniSection</ref> * &gt;</type>
        <definition>typedef std::vector&lt;IniSection*&gt; rr::SectionList</definition>
        <argsstring></argsstring>
        <name>SectionList</name>
        <qualifiedname>rr::SectionList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniFile.h" line="27" column="30" bodyfile="rrIniFile.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrIniFile_8h_1a14b8a5d8560799b00bda3bd98084a2f7" prot="public" static="no">
        <type>SectionList::iterator</type>
        <definition>typedef SectionList::iterator rr::SectionItor</definition>
        <argsstring></argsstring>
        <name>SectionItor</name>
        <qualifiedname>rr::SectionItor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniFile.h" line="28" column="41" bodyfile="rrIniFile.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrIniSection_8h_1a38624057ef979173229c5fd7824e6445" prot="public" static="no">
        <type>KeyList::iterator</type>
        <definition>typedef KeyList::iterator rr::KeyItor</definition>
        <argsstring></argsstring>
        <name>KeyItor</name>
        <qualifiedname>rr::KeyItor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniSection.h" line="13" column="43" bodyfile="rrIniSection.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrIniSection_8h_1a00c945f321f9d4d99587fdaaa14847df" prot="public" static="no">
        <type>NonKeyList::iterator</type>
        <definition>typedef NonKeyList::iterator rr::NonKeyItor</definition>
        <argsstring></argsstring>
        <name>NonKeyItor</name>
        <qualifiedname>rr::NonKeyItor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniSection.h" line="15" column="42" bodyfile="rrIniSection.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrRoadRunner_8cpp_1af7a42b4803d5da5784e2ff9cb6d440a8" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>typedef std::vector&lt;std::string&gt; rr::string_vector</definition>
        <argsstring></argsstring>
        <name>string_vector</name>
        <qualifiedname>rr::string_vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="87" column="25" bodyfile="rrRoadRunner.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrRoadRunner_8cpp_1aa19d858a33d0a65ddd6461024968ce4d" prot="public" static="no">
        <type>std::string(ExecutableModel::*</type>
        <definition>typedef std::string(ExecutableModel::* rr::GetNameFuncPtr) (size_t)</definition>
        <argsstring>)(size_t)</argsstring>
        <name>GetNameFuncPtr</name>
        <qualifiedname>rr::GetNameFuncPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="93" column="13" bodyfile="rrRoadRunner.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrRoadRunner_8cpp_1af48f09ff45a9173cae0c3617ac84ea11" prot="public" static="no">
        <type>int(ExecutableModel::*</type>
        <definition>typedef int(ExecutableModel::* rr::GetNumFuncPtr) ()</definition>
        <argsstring>)()</argsstring>
        <name>GetNumFuncPtr</name>
        <qualifiedname>rr::GetNumFuncPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="95" column="13" bodyfile="rrRoadRunner.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrRoadRunner_8cpp_1a67c05b3923fa2ea722f9eb140e00957b" prot="public" static="no">
        <type>std::list&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>typedef std::list&lt;std::vector&lt;double&gt; &gt; rr::DoubleVectorList</definition>
        <argsstring></argsstring>
        <name>DoubleVectorList</name>
        <qualifiedname>rr::DoubleVectorList</qualifiedname>
        <briefdescription>
<para>variable time step integration data struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="139" column="23" bodyfile="rrRoadRunner.cpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrRoadRunnerMap_8h_1aaa0f5a63c8bce3dab0d46b8c7751e673" prot="public" static="no">
        <type>phmap::parallel_node_hash_map&lt; std::string, std::unique_ptr&lt; <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> &gt; &gt;</type>
        <definition>using rr::ThreadSafeUnorderedMap = typedef phmap::parallel_node_hash_map&lt;std::string, std::unique_ptr&lt;RoadRunner&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ThreadSafeUnorderedMap</name>
        <qualifiedname>rr::ThreadSafeUnorderedMap</qualifiedname>
        <briefdescription>
<para>Unordered map for use with <ref refid="classrr_1_1RoadRunnerMap" kindref="compound">RoadRunnerMap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This type will do the heavy lifting. Pointers to roadrunner models are stack allocated. If this is insufficient, then we&apos;ll convert this to unique_ptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunnerMap.h" line="30" column="5" bodyfile="rrRoadRunnerMap.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrSparse_8h_1aa8a36b3ce021dddb42f59ad71b3346d8" prot="public" static="no">
        <type>struct <ref refid="structrr_1_1csr__matrix__t" kindref="compound">rr::csr_matrix_t</ref></type>
        <definition>typedef struct rr::csr_matrix_t rr::csr_matrix</definition>
        <argsstring></argsstring>
        <name>csr_matrix</name>
        <qualifiedname>rr::csr_matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.h" line="68" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="setting__t_8h_1a413100cd30a534edb1cb140c0dea6ae3" prot="public" static="no">
        <type>std::variant&lt; std::monostate, std::string, bool, std::int32_t, std::uint32_t, std::int64_t, std::uint64_t, float, double, char, unsigned char, std::vector&lt; double &gt;, std::vector&lt; std::string &gt; &gt;</type>
        <definition>using rr::setting_t = typedef std::variant&lt; std::monostate, std::string, bool, std::int32_t, std::uint32_t, std::int64_t, std::uint64_t, float, double, char, unsigned char, std::vector&lt;double&gt;, std::vector&lt;std::string&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>setting_t</name>
        <qualifiedname>rr::setting_t</qualifiedname>
        <briefdescription>
<para>Note: This code was isolated form the <ref refid="Setting_8h_source" kindref="compound">Setting.h</ref> because swig had difficulty reading the isValidVariant template. </para>
        </briefdescription>
        <detaileddescription>
<para>A setting type, used in the <ref refid="classrr_1_1Setting" kindref="compound">Setting</ref> class to store multiple types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="setting_t.h" line="18" column="5" bodyfile="setting_t.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1aa5df535cc25cd452b0f5448498644ea5" prot="public" static="no">
        <type>int(RR_CDECL *</type>
        <definition>typedef int(RR_CDECL * rr::c_int_MDS) (ModelData *)</definition>
        <argsstring>)(ModelData *)</argsstring>
        <name>c_int_MDS</name>
        <qualifiedname>rr::c_int_MDS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="24" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1a9fdfc422f7f96caa4561118193bd665b" prot="public" static="no">
        <type>int(RR_CDECL *</type>
        <definition>typedef int(RR_CDECL * rr::c_int_MDS_int) (ModelData *, int)</definition>
        <argsstring>)(ModelData *, int)</argsstring>
        <name>c_int_MDS_int</name>
        <qualifiedname>rr::c_int_MDS_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="25" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1ac16b388b272dddbb2dfedcb9240b2219" prot="public" static="no">
        <type>char *(RR_CDECL *</type>
        <definition>typedef char *(RR_CDECL * rr::c_charStar_MDS) (ModelData *)</definition>
        <argsstring>)(ModelData *)</argsstring>
        <name>c_charStar_MDS</name>
        <qualifiedname>rr::c_charStar_MDS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="26" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1af41f5bd12df5c2538c31b43c95a83c2a" prot="public" static="no">
        <type>void(RR_CDECL *</type>
        <definition>typedef void(RR_CDECL * rr::c_void_MDS_doubleStar) (ModelData *, const double *)</definition>
        <argsstring>)(ModelData *, const double *)</argsstring>
        <name>c_void_MDS_doubleStar</name>
        <qualifiedname>rr::c_void_MDS_doubleStar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="27" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1acfb274e82c0dc63dcd7cb6b397400882" prot="public" static="no">
        <type>double(RR_CDECL *</type>
        <definition>typedef double(RR_CDECL * rr::c_double_MDS_int) (ModelData *, int)</definition>
        <argsstring>)(ModelData *, int)</argsstring>
        <name>c_double_MDS_int</name>
        <qualifiedname>rr::c_double_MDS_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="28" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1a7dabd02f1f0bb5840367f63bc07069f5" prot="public" static="no">
        <type>double *(RR_CDECL *</type>
        <definition>typedef double *(RR_CDECL * rr::c_doubleStar_MDS) (ModelData *)</definition>
        <argsstring>)(ModelData *)</argsstring>
        <name>c_doubleStar_MDS</name>
        <qualifiedname>rr::c_doubleStar_MDS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="29" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1af4cab55bec030a8a082302f5ab37de7c" prot="public" static="no">
        <type>void(RR_CDECL *</type>
        <definition>typedef void(RR_CDECL * rr::c_void_MDS_double_doubleStar) (ModelData *, double, const double *)</definition>
        <argsstring>)(ModelData *, double, const double *)</argsstring>
        <name>c_void_MDS_double_doubleStar</name>
        <qualifiedname>rr::c_void_MDS_double_doubleStar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="30" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1ad143bce0f6f2dc8f27cd26bddf3981c9" prot="public" static="no">
        <type>void(RR_CDECL *</type>
        <definition>typedef void(RR_CDECL * rr::c_void_MDS_int_double) (ModelData *, int, double)</definition>
        <argsstring>)(ModelData *, int, double)</argsstring>
        <name>c_void_MDS_int_double</name>
        <qualifiedname>rr::c_void_MDS_int_double</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="31" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1a1e5cf739201b44176a1cb34483bba8c5" prot="public" static="no">
        <type>ComputeEventAssignmentHandler *(RR_CDECL *</type>
        <definition>typedef ComputeEventAssignmentHandler *(RR_CDECL * rr::c_ComputeEventAssignmentHandlerStar) ()</definition>
        <argsstring>)()</argsstring>
        <name>c_ComputeEventAssignmentHandlerStar</name>
        <qualifiedname>rr::c_ComputeEventAssignmentHandlerStar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="33" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rrCompiledExecutableModel_8h_1adcdf2de82781c82c451d80ed3c0b620e" prot="public" static="no">
        <type>EventDelayHandler *(RR_CDECL *</type>
        <definition>typedef EventDelayHandler *(RR_CDECL * rr::c_GetEventDelayHandlerStar) ()</definition>
        <argsstring>)()</argsstring>
        <name>c_GetEventDelayHandlerStar</name>
        <qualifiedname>rr::c_GetEventDelayHandlerStar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="34" column="9" bodyfile="c/rrCompiledExecutableModel.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="IntegratorFactory_8cpp_1a17f62e52a958b2ad9bc87a8539527b91" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::integratorFactoryMutex</definition>
        <argsstring></argsstring>
        <name>integratorFactoryMutex</name>
        <qualifiedname>rr::integratorFactoryMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="IntegratorFactory.cpp" line="14" column="23" bodyfile="IntegratorFactory.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="IntegratorFactory_8cpp_1a6184ebc67b454066cfca2a965b4e3267" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::integratorRegistrationMutex</definition>
        <argsstring></argsstring>
        <name>integratorRegistrationMutex</name>
        <qualifiedname>rr::integratorRegistrationMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="IntegratorFactory.cpp" line="15" column="23" bodyfile="IntegratorFactory.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="RegistrationFactory_8cpp_1a0260af15b7185cbcbdf500e18fc965a2" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <qualifiedname>rr::mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="RegistrationFactory.cpp" line="12" column="23" bodyfile="RegistrationFactory.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrConfig_8cpp_1a5e5c48d45041f33642d6ce2082cb6a1b" prot="public" static="yes" mutable="no">
        <type><ref refid="classrr_1_1Setting" kindref="compound">Setting</ref></type>
        <definition>Setting rr::values[]</definition>
        <argsstring>[]</argsstring>
        <name>values</name>
        <qualifiedname>rr::values</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="87" column="20" bodyfile="rrConfig.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrConfig_8cpp_1a37fae06d4bceadff561d9643590b2b76" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool rr::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <qualifiedname>rr::initialized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="150" column="17" bodyfile="rrConfig.cpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrConfig_8cpp_1a7ece3d64d3d019d12d1a7280efa48050" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::configMutex</definition>
        <argsstring></argsstring>
        <name>configMutex</name>
        <qualifiedname>rr::configMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="151" column="23" bodyfile="rrConfig.cpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1aee1cd78af699ae9b98cd6256c37551d6" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>RR_DECLSPEC const char * rr::gComma</definition>
        <argsstring></argsstring>
        <name>gComma</name>
        <qualifiedname>rr::gComma</qualifiedname>
        <initializer>= &quot;,&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="10" column="20" bodyfile="rrConstants.cpp" bodystart="10" bodyend="-1" declfile="rrConstants.h" declline="19" declcolumn="43"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1abbf9710691cf35d54f524cd42f247925" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>RR_DECLSPEC const char rr::gTab</definition>
        <argsstring></argsstring>
        <name>gTab</name>
        <qualifiedname>rr::gTab</qualifiedname>
        <initializer>= &apos;\t&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="11" column="25" bodyfile="rrConstants.cpp" bodystart="11" bodyend="-1" declfile="rrConstants.h" declline="28" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a8629f47cf7f9d8f1638b751643169f19" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>RR_DECLSPEC const char rr::gNL</definition>
        <argsstring></argsstring>
        <name>gNL</name>
        <qualifiedname>rr::gNL</qualifiedname>
        <initializer>= &apos;\n&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="12" column="25" bodyfile="rrConstants.cpp" bodystart="12" bodyend="-1" declfile="rrConstants.h" declline="29" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a535a4b5063a220e6c28c851646f4e885" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>RR_DECLSPEC const char * rr::gDoubleFormat</definition>
        <argsstring></argsstring>
        <name>gDoubleFormat</name>
        <qualifiedname>rr::gDoubleFormat</qualifiedname>
        <initializer>= &quot;%f&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="13" column="20" bodyfile="rrConstants.cpp" bodystart="13" bodyend="-1" declfile="rrConstants.h" declline="17" declcolumn="43"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a29fa8290d6819b9562e0233715d4e749" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>RR_DECLSPEC const char * rr::gIntFormat</definition>
        <argsstring></argsstring>
        <name>gIntFormat</name>
        <qualifiedname>rr::gIntFormat</qualifiedname>
        <initializer>= &quot;%d&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="14" column="20" bodyfile="rrConstants.cpp" bodystart="14" bodyend="-1" declfile="rrConstants.h" declline="18" declcolumn="43"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a8071263fe2845cd4c8afee4d4d604afd" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>RR_DECLSPEC const std::string rr::gNoneString</definition>
        <argsstring></argsstring>
        <name>gNoneString</name>
        <qualifiedname>rr::gNoneString</qualifiedname>
        <initializer>= &quot;&lt;none&gt;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="16" column="26" bodyfile="rrConstants.cpp" bodystart="16" bodyend="-1" declfile="rrConstants.h" declline="20" declcolumn="42"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a8d8950ee49418b0c213e229d2745ec46" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>RR_DECLSPEC const std::string rr::gEmptyString</definition>
        <argsstring></argsstring>
        <name>gEmptyString</name>
        <qualifiedname>rr::gEmptyString</qualifiedname>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="17" column="26" bodyfile="rrConstants.cpp" bodystart="17" bodyend="-1" declfile="rrConstants.h" declline="21" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a957f80bb529634175e903dbd849c5c50" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>RR_DECLSPEC const int rr::gMaxPath</definition>
        <argsstring></argsstring>
        <name>gMaxPath</name>
        <qualifiedname>rr::gMaxPath</qualifiedname>
        <initializer>= 512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="19" column="23" bodyfile="rrConstants.cpp" bodystart="19" bodyend="-1" declfile="rrConstants.h" declline="32" declcolumn="33"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1ab6ea18418aa3901dddb76ed60d8140ee" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>RR_DECLSPEC const double rr::gDoubleNaN</definition>
        <argsstring></argsstring>
        <name>gDoubleNaN</name>
        <qualifiedname>rr::gDoubleNaN</qualifiedname>
        <initializer>= std::numeric_limits&lt;double&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="20" column="21" bodyfile="rrConstants.cpp" bodystart="20" bodyend="-1" declfile="rrConstants.h" declline="30" declcolumn="36"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a5ae8e5d14528a26f124acf9ea034aaa6" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>RR_DECLSPEC const float rr::gFloatNaN</definition>
        <argsstring></argsstring>
        <name>gFloatNaN</name>
        <qualifiedname>rr::gFloatNaN</qualifiedname>
        <initializer>= std::numeric_limits&lt;float&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="21" column="21" bodyfile="rrConstants.cpp" bodystart="21" bodyend="-1" declfile="rrConstants.h" declline="31" declcolumn="33"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a2fb6a7e406a8d7288ea0a154216b4669" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>RR_DECLSPEC const std::string rr::gEmptyModelMessage</definition>
        <argsstring></argsstring>
        <name>gEmptyModelMessage</name>
        <qualifiedname>rr::gEmptyModelMessage</qualifiedname>
        <initializer>= &quot;A model needs to be loaded before one can use this method&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="24" column="26" bodyfile="rrConstants.cpp" bodystart="24" bodyend="-1" declfile="rrConstants.h" declline="24" declcolumn="38"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a4bffcbd28e00eaaedc42f024296d59a2" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>RR_DECLSPEC const char rr::gPathSeparator</definition>
        <argsstring></argsstring>
        <name>gPathSeparator</name>
        <qualifiedname>rr::gPathSeparator</qualifiedname>
        <initializer>= &apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="34" column="26" bodyfile="rrConstants.cpp" bodystart="34" bodyend="-1" declfile="rrConstants.h" declline="14" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="rrConstants_8cpp_1a169d237b44f38c64cbf486483b200179" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>RR_DECLSPEC const std::string rr::gExeSuffix</definition>
        <argsstring></argsstring>
        <name>gExeSuffix</name>
        <qualifiedname>rr::gExeSuffix</qualifiedname>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConstants.cpp" line="35" column="30" bodyfile="rrConstants.cpp" bodystart="35" bodyend="-1" declfile="rrConstants.h" declline="15" declcolumn="38"/>
      </memberdef>
      <memberdef kind="variable" id="rrGetOptions_8cpp_1afa8818ae36ea0b8620e75b7de306f4e5" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>RR_DECLSPEC char * rr::rrOptArg</definition>
        <argsstring></argsstring>
        <name>rrOptArg</name>
        <qualifiedname>rr::rrOptArg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrGetOptions.cpp" line="10" column="9" bodyfile="rrGetOptions.cpp" bodystart="10" bodyend="-1" declfile="rrGetOptions.h" declline="9" declcolumn="52"/>
      </memberdef>
      <memberdef kind="variable" id="rrGetOptions_8cpp_1a1ce2b91fef36eae1dbc88f279a91c36b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>RR_DECLSPEC int rr::rrOptInd</definition>
        <argsstring></argsstring>
        <name>rrOptInd</name>
        <qualifiedname>rr::rrOptInd</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrGetOptions.cpp" line="11" column="10" bodyfile="rrGetOptions.cpp" bodystart="11" bodyend="-1" declfile="rrGetOptions.h" declline="7" declcolumn="53"/>
      </memberdef>
      <memberdef kind="variable" id="rrIniFile_8h_1ab689ee74563d33406879b36327717d96" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rr::MAX_LINE_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>MAX_LINE_BUFFER_SIZE</name>
        <qualifiedname>rr::MAX_LINE_BUFFER_SIZE</qualifiedname>
        <initializer>= 2048</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniFile.h" line="20" column="11" bodyfile="rrIniFile.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1a240c8553279bcdb6e0690f8c8345d012" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool rr::coloredOutput</definition>
        <argsstring></argsstring>
        <name>coloredOutput</name>
        <qualifiedname>rr::coloredOutput</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="53" column="13" bodyfile="rrLogger.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1a3e0d42a5e9e1df5ab86801b641595730" prot="public" static="yes" mutable="no">
        <type>Poco::Logger *</type>
        <definition>Poco::Logger* rr::pocoLogger</definition>
        <argsstring></argsstring>
        <name>pocoLogger</name>
        <qualifiedname>rr::pocoLogger</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="57" column="21" bodyfile="rrLogger.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1a853449b5fbfed9a59c7be2463dbe4916" prot="public" static="no" mutable="no">
        <type>volatile int</type>
        <definition>volatile int rr::logLevel</definition>
        <argsstring></argsstring>
        <name>logLevel</name>
        <qualifiedname>rr::logLevel</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="58" column="14" bodyfile="rrLogger.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1a4597728a843e6f12b85c8c1ec7095a67" prot="public" static="no" mutable="no">
        <type>const <ref refid="classrr_1_1Logger_1a72a52e7fe7be48e2ecad639c641ee8aa" kindref="member">Logger::Level</ref></type>
        <definition>const Logger::Level rr::defaultLogLevel</definition>
        <argsstring></argsstring>
        <name>defaultLogLevel</name>
        <qualifiedname>rr::defaultLogLevel</qualifiedname>
        <initializer>= Logger::LOG_ERROR</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="59" column="21" bodyfile="rrLogger.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1abc6a4e4600b7770a09f338bf5e4a790c" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string rr::logFileName</definition>
        <argsstring></argsstring>
        <name>logFileName</name>
        <qualifiedname>rr::logFileName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="60" column="20" bodyfile="rrLogger.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1aab874471cff9c53f86e87ec167c465ec" prot="public" static="yes" mutable="no">
        <type>std::ostream *</type>
        <definition>std::ostream* rr::consoleStream</definition>
        <argsstring></argsstring>
        <name>consoleStream</name>
        <qualifiedname>rr::consoleStream</qualifiedname>
        <initializer>= &amp;std::clog</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="63" column="21" bodyfile="rrLogger.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1aa0bcd7ebe9ffa376ec5e8631a2dbd144" prot="public" static="yes" mutable="no">
        <type>AutoPtr&lt; SimpleFileChannel &gt;</type>
        <definition>AutoPtr&lt;SimpleFileChannel&gt; rr::simpleFileChannel</definition>
        <argsstring></argsstring>
        <name>simpleFileChannel</name>
        <qualifiedname>rr::simpleFileChannel</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="76" column="16" bodyfile="rrLogger.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1ab8d788009105f6952ff7cf9374883d02" prot="public" static="yes" mutable="no">
        <type>AutoPtr&lt; Channel &gt;</type>
        <definition>AutoPtr&lt;Channel&gt; rr::consoleChannel</definition>
        <argsstring></argsstring>
        <name>consoleChannel</name>
        <qualifiedname>rr::consoleChannel</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="77" column="16" bodyfile="rrLogger.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrLogger_8cpp_1ae2ad90f0b136d21a7478e5a6f7d8cc47" prot="public" static="yes" mutable="no">
        <type>Mutex</type>
        <definition>Mutex rr::loggerMutex</definition>
        <argsstring></argsstring>
        <name>loggerMutex</name>
        <qualifiedname>rr::loggerMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="79" column="14" bodyfile="rrLogger.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrNLEQ1Interface_8cpp_1aaa27339705c816f7d0ba3f12f5c6e7e2" prot="public" static="yes" mutable="no">
        <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
        <definition>ExecutableModel* rr::callbackModel</definition>
        <argsstring></argsstring>
        <name>callbackModel</name>
        <qualifiedname>rr::callbackModel</qualifiedname>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="24" column="24" bodyfile="rrNLEQ1Interface.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrNLEQ1Interface_8cpp_1a1058e9d9f0742e30a8b0ebd2934e032f" prot="public" static="yes" mutable="no">
        <type>Mutex</type>
        <definition>Mutex rr::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <qualifiedname>rr::mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="28" column="14" bodyfile="rrNLEQ1Interface.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrNLEQ1Interface_8cpp_1a81d2604128bda074724901d654267de4" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* rr::keys[]</definition>
        <argsstring>[]</argsstring>
        <name>keys</name>
        <qualifiedname>rr::keys</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="382" column="19" bodyfile="rrNLEQ1Interface.cpp" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrNLEQ2Interface_8cpp_1aaa27339705c816f7d0ba3f12f5c6e7e2" prot="public" static="yes" mutable="no">
        <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
        <definition>ExecutableModel* rr::callbackModel</definition>
        <argsstring></argsstring>
        <name>callbackModel</name>
        <qualifiedname>rr::callbackModel</qualifiedname>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="24" column="24" bodyfile="rrNLEQ2Interface.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrNLEQ2Interface_8cpp_1a1058e9d9f0742e30a8b0ebd2934e032f" prot="public" static="yes" mutable="no">
        <type>Mutex</type>
        <definition>Mutex rr::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <qualifiedname>rr::mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="28" column="14" bodyfile="rrNLEQ2Interface.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrNLEQ2Interface_8cpp_1a81d2604128bda074724901d654267de4" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* rr::keys[]</definition>
        <argsstring>[]</argsstring>
        <name>keys</name>
        <qualifiedname>rr::keys</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="389" column="19" bodyfile="rrNLEQ2Interface.cpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrRoadRunner_8cpp_1a7c3eab0b2c50956fefffc2708511c999" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int rr::mInstanceCount</definition>
        <argsstring></argsstring>
        <name>mInstanceCount</name>
        <qualifiedname>rr::mInstanceCount</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="161" column="16" bodyfile="rrRoadRunner.cpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrRoadRunner_8h_1aeca847ce404e427b4373d195f63a0c40" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::rrMtx</definition>
        <argsstring></argsstring>
        <name>rrMtx</name>
        <qualifiedname>rr::rrMtx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="49" column="23" bodyfile="rrRoadRunner.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrRoadRunnerMap_8h_1a4d602125c6ce0a97866e083720f661e1" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::rrMapMtx</definition>
        <argsstring></argsstring>
        <name>rrMapMtx</name>
        <qualifiedname>rr::rrMapMtx</qualifiedname>
        <briefdescription>
<para>Mutex for use in <ref refid="classrr_1_1RoadRunnerMap" kindref="compound">RoadRunnerMap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>We need to be careful that we don&apos;t cause a deadlock by interaction with rrMtx, which is exclusively for use at the individual <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> level. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunnerMap.h" line="22" column="23" bodyfile="rrRoadRunnerMap.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrSBMLReader_8cpp_1a888d8a9ffcc502f666e2216b17ae8c66" prot="public" static="yes" mutable="no">
        <type>Mutex</type>
        <definition>Mutex rr::httpFactoryMutex</definition>
        <argsstring></argsstring>
        <name>httpFactoryMutex</name>
        <qualifiedname>rr::httpFactoryMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSBMLReader.cpp" line="41" column="14" bodyfile="rrSBMLReader.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="rrSBMLReader_8cpp_1a74dd21e65caa1b0d9ba4af117babb453" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool rr::httpFactoryRegistered</definition>
        <argsstring></argsstring>
        <name>httpFactoryRegistered</name>
        <qualifiedname>rr::httpFactoryRegistered</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSBMLReader.cpp" line="42" column="13" bodyfile="rrSBMLReader.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="SensitivitySolverFactory_8cpp_1ae5016f1fa53783058115819b732b47d9" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::sensitivitySolverMutex</definition>
        <argsstring></argsstring>
        <name>sensitivitySolverMutex</name>
        <qualifiedname>rr::sensitivitySolverMutex</qualifiedname>
        <briefdescription>
<para>To make the singleton <ref refid="classrr_1_1SensitivitySolverFactory" kindref="compound">SensitivitySolverFactory</ref> thread safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SensitivitySolverFactory.cpp" line="9" column="23" bodyfile="SensitivitySolverFactory.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="SensitivitySolverFactory_8cpp_1a872010849b59b8c5115b908051087e44" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::sensitivityRegistrationMutex</definition>
        <argsstring></argsstring>
        <name>sensitivityRegistrationMutex</name>
        <qualifiedname>rr::sensitivityRegistrationMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SensitivitySolverFactory.cpp" line="10" column="23" bodyfile="SensitivitySolverFactory.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="SteadyStateSolverFactory_8cpp_1af4a2729de8279b4c5154155687b15fef" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::steadyStateSolverFactoryMutex</definition>
        <argsstring></argsstring>
        <name>steadyStateSolverFactoryMutex</name>
        <qualifiedname>rr::steadyStateSolverFactoryMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SteadyStateSolverFactory.cpp" line="14" column="23" bodyfile="SteadyStateSolverFactory.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="SteadyStateSolverFactory_8cpp_1aba1d75c35f63b69d42077f878c268c98" prot="public" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rr::steadyStateSolverRegistrationMutex</definition>
        <argsstring></argsstring>
        <name>steadyStateSolverRegistrationMutex</name>
        <qualifiedname>rr::steadyStateSolverRegistrationMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SteadyStateSolverFactory.cpp" line="15" column="23" bodyfile="SteadyStateSolverFactory.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="__Variant_8cpp_1adff16f2d5a5cafae53d69fcb162bfa54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::strip</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>strip</name>
        <qualifiedname>rr::strip</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>strip any leading or trailing whitespace </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_Variant.cpp" line="118" column="20" bodyfile="_Variant.cpp" bodystart="118" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="CVODEIntegrator_8cpp_1a0e0b5b6cba398b7913a35234893ba975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::cvodeDyDtFcn</definition>
        <argsstring>(realtype t, N_Vector cv_y, N_Vector cv_ydot, void *userData)</argsstring>
        <name>cvodeDyDtFcn</name>
        <qualifiedname>rr::cvodeDyDtFcn</qualifiedname>
        <param>
          <type>realtype</type>
          <declname>t</declname>
        </param>
        <param>
          <type>N_Vector</type>
          <declname>cv_y</declname>
        </param>
        <param>
          <type>N_Vector</type>
          <declname>cv_ydot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CVODEIntegrator.cpp" line="1188" column="9" bodyfile="CVODEIntegrator.cpp" bodystart="1188" bodyend="1207" declfile="CVODEIntegrator.cpp" declline="38" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="CVODEIntegrator_8cpp_1ad01271862994ece03d70c65edb3bb5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::cvodeRootFcn</definition>
        <argsstring>(realtype t, N_Vector y, realtype *gout, void *userData)</argsstring>
        <name>cvodeRootFcn</name>
        <qualifiedname>rr::cvodeRootFcn</qualifiedname>
        <param>
          <type>realtype</type>
          <declname>t</declname>
        </param>
        <param>
          <type>N_Vector</type>
          <declname>y</declname>
        </param>
        <param>
          <type>realtype *</type>
          <declname>gout</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CVODEIntegrator.cpp" line="1264" column="9" bodyfile="CVODEIntegrator.cpp" bodystart="1264" bodyend="1276" declfile="CVODEIntegrator.cpp" declline="40" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="CVODEIntegrator_8cpp_1a5c0899abfe5f1d2057c866d8c77875b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::SetVector</definition>
        <argsstring>(N_Vector v, int Index, double Value)</argsstring>
        <name>SetVector</name>
        <qualifiedname>rr::SetVector</qualifiedname>
        <param>
          <type>N_Vector</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CVODEIntegrator.cpp" line="44" column="17" bodyfile="CVODEIntegrator.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="CVODEIntegrator_8cpp_1acd04783ab41493d69ac81ff5a7ec5e8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rr::GetVector</definition>
        <argsstring>(N_Vector v, int Index)</argsstring>
        <name>GetVector</name>
        <qualifiedname>rr::GetVector</qualifiedname>
        <param>
          <type>N_Vector</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CVODEIntegrator.cpp" line="49" column="19" bodyfile="CVODEIntegrator.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="CVODEIntegrator_8cpp_1a0af301973877a5f64b57749998b369bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::cvodeErrHandler</definition>
        <argsstring>(int error_code, const char *module, const char *function, char *msg, void *eh_data)</argsstring>
        <name>cvodeErrHandler</name>
        <qualifiedname>rr::cvodeErrHandler</qualifiedname>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>eh_data</declname>
        </param>
        <briefdescription>
<para>Purpose This function processes error and warning messages from CVODE and its sub-modules. </para>
        </briefdescription>
        <detaileddescription>
<para>Arguments: error_code: is the error code. module: is the name of the CVODE module reporting the error. function: is the name of the function in which the error occurred. msg: is the error message. eh_data: is a pointer to user data, the same as the eh_data parameter passed to CVodeSetErrHandlerFn. Return value: A CVErrHandlerFn function has no return value.</para>
<para>Notes: error_code is negative for errors and positive (CV_WARNING) for warnings. If a function that returns a pointer to memory encounters an error, it sets error_code to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CVODEIntegrator.cpp" line="1298" column="10" bodyfile="CVODEIntegrator.cpp" bodystart="1298" bodyend="1313" declfile="CVODEIntegrator.cpp" declline="73" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="CVODEIntegrator_8h_1ab548fd7f7fca7e5c037680f49a491aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SundialsType</type>
            <defval>CVODEIntegrator</defval>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string rr::decodeSundialsError</definition>
        <argsstring>(SundialsType *solver, int cvodeError, bool exInfo)</argsstring>
        <name>decodeSundialsError</name>
        <qualifiedname>rr::decodeSundialsError</qualifiedname>
        <param>
          <type>SundialsType *</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cvodeError</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CVODEIntegrator.h" line="327" column="17" bodyfile="CVODEIntegrator.h" bodystart="327" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="ForwardSensitivitySolver_8cpp_1a35b4d839d14a13c8c80a64e5d39ef63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::FFSDyDtFcn</definition>
        <argsstring>(realtype time, N_Vector cv_y, N_Vector cv_ydot, void *userData)</argsstring>
        <name>FFSDyDtFcn</name>
        <qualifiedname>rr::FFSDyDtFcn</qualifiedname>
        <param>
          <type>realtype</type>
          <declname>time</declname>
        </param>
        <param>
          <type>N_Vector</type>
          <declname>cv_y</declname>
        </param>
        <param>
          <type>N_Vector</type>
          <declname>cv_ydot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ForwardSensitivitySolver.cpp" line="33" column="9" bodyfile="ForwardSensitivitySolver.cpp" bodystart="33" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="ForwardSensitivitySolver_8cpp_1addeb8868d5d483de9b60da7433e2a25d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::FFSRootFcn</definition>
        <argsstring>(realtype time, N_Vector y_vector, realtype *gout, void *user_data)</argsstring>
        <name>FFSRootFcn</name>
        <qualifiedname>rr::FFSRootFcn</qualifiedname>
        <param>
          <type>realtype</type>
          <declname>time</declname>
        </param>
        <param>
          <type>N_Vector</type>
          <declname>y_vector</declname>
        </param>
        <param>
          <type>realtype *</type>
          <declname>gout</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ForwardSensitivitySolver.cpp" line="60" column="9" bodyfile="ForwardSensitivitySolver.cpp" bodystart="60" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="ForwardSensitivitySolver_8cpp_1abc6f8778e1c7b33a306356da68541f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::ffsErrHandler</definition>
        <argsstring>(int error_code, const char *module, const char *function, char *msg, void *eh_data)</argsstring>
        <name>ffsErrHandler</name>
        <qualifiedname>rr::ffsErrHandler</qualifiedname>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>eh_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ForwardSensitivitySolver.cpp" line="74" column="10" bodyfile="ForwardSensitivitySolver.cpp" bodystart="74" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="GillespieIntegrator_8cpp_1a898d350949b70bd178bd0c4d110ba979" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>static std::uint64_t rr::defaultSeed</definition>
        <argsstring>()</argsstring>
        <name>defaultSeed</name>
        <qualifiedname>rr::defaultSeed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="GillespieIntegrator.cpp" line="27" column="22" bodyfile="GillespieIntegrator.cpp" bodystart="27" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="KinsolErrHandler_8cpp_1a7ddc4e462da3660fa842166d6e976cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::decodeKinsolError</definition>
        <argsstring>(int errCode)</argsstring>
        <name>decodeKinsolError</name>
        <qualifiedname>rr::decodeKinsolError</qualifiedname>
        <param>
          <type>int</type>
          <declname>errCode</declname>
          <defname>cvodeError</defname>
        </param>
        <briefdescription>
<para>Convert kinsol error codes into text. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinsolError</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
These error messages are taken directly from the kinsol documentation. More information can be found in 9.1.5.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinsolError</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>CW</para>
</simplesect>
These error messages are taken directly from the kinsol documentation. More information can be found in 9.1.5 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="KinsolErrHandler.cpp" line="21" column="17" bodyfile="KinsolErrHandler.cpp" bodystart="21" bodyend="117" declfile="KinsolErrHandler.h" declline="22" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="KinsolErrHandler_8cpp_1a67f1f8fb95271033ded1b4538f5da5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::kinsolErrHandler</definition>
        <argsstring>(int error_code, const char *module, const char *function, char *msg)</argsstring>
        <name>kinsolErrHandler</name>
        <qualifiedname>rr::kinsolErrHandler</qualifiedname>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Processes error and warning messages from Kinsol. </para>
        </briefdescription>
        <detaileddescription>
<para>Conforms to the function pointer &quot;KINErrHandlerFn&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the kinsol module reporting the error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the function in which the error occurred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the error message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eh_data</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to user data, the same as the eh_data parameter passed to CVodeSetErrHandlerFn.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Notes: error_code is negative for errors and positive (KIN_WARNING) for warnings. If a function that returns a pointer to memory encounters an error, it sets error_code to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="KinsolErrHandler.cpp" line="137" column="10" bodyfile="KinsolErrHandler.cpp" bodystart="137" bodyend="150" declfile="KinsolErrHandler.h" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Matrix3D_8h_1a501feddd3ad75c6579bb867f6036bd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexType_</type>
          </param>
          <param>
            <type>typename DataType_</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Matrix3D&lt; IndexType_, DataType_ &gt; &amp;matrix3D)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>&lt; IndexType_, DataType_ &gt; &amp;</type>
          <declname>matrix3D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix3D.h" line="392" column="5" bodyfile="Matrix3D.h" bodystart="392" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="rrConfig_8cpp_1a5d1ee648433bed40eef0cd02750f16e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::getDefaultNumThreads</definition>
        <argsstring>()</argsstring>
        <name>getDefaultNumThreads</name>
        <qualifiedname>rr::getDefaultNumThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="46" column="9" bodyfile="rrConfig.cpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="rrConfig_8cpp_1adff16f2d5a5cafae53d69fcb162bfa54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::strip</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>strip</name>
        <qualifiedname>rr::strip</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>strip any leading or trailing whitespace </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="66" column="24" bodyfile="rrConfig.cpp" bodystart="66" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="rrConfig_8cpp_1a37aaf7ea8b652992fa398f33d577cfa2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rr::readDefaultConfig</definition>
        <argsstring>()</argsstring>
        <name>readDefaultConfig</name>
        <qualifiedname>rr::readDefaultConfig</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="153" column="17" bodyfile="rrConfig.cpp" bodystart="153" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="rrConfig_8cpp_1af90b1aaf7a3d78680de15fb095efc62f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rr::getKeyNames</definition>
        <argsstring>(StringIntMap &amp;keys)</argsstring>
        <name>getKeyNames</name>
        <qualifiedname>rr::getKeyNames</qualifiedname>
        <param>
          <type>StringIntMap &amp;</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
<para>load the names of the keys and values into a std::map </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="179" column="17" bodyfile="rrConfig.cpp" bodystart="179" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="rrConfig_8cpp_1a74a039720b7fd872ae85fa0ede7de20c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::reverseLookup</definition>
        <argsstring>(StringIntMap &amp;keys, Config::Keys k)</argsstring>
        <name>reverseLookup</name>
        <qualifiedname>rr::reverseLookup</qualifiedname>
        <param>
          <type>StringIntMap &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Config::Keys</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.cpp" line="273" column="24" bodyfile="rrConfig.cpp" bodystart="273" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="rrException_8cpp_1a18effd4326f7c10ed158a0b47c06188b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::UninitializedValue</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>UninitializedValue</name>
        <qualifiedname>rr::UninitializedValue</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Called whenever an uninitialized value is encountered, throws <ref refid="classrr_1_1UninitializedValueException" kindref="compound">UninitializedValueException</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrException.cpp" line="49" column="10" bodyfile="rrException.cpp" bodystart="49" bodyend="51" declfile="rrException.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rrExecutableModel_8cpp_1a73a38b8990efe427c7b88405375bf256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>RR_DECLSPEC std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, ExecutableModel *model)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>dump the model to a stream convenience func </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrExecutableModel.cpp" line="42" column="5" bodyfile="rrExecutableModel.cpp" bodystart="42" bodyend="130" declfile="rrExecutableModel.h" declline="857" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rrFileName_8cpp_1a643064bcda1ab0485dd3a39accecb990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>RR_DECLSPEC std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, FileName &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1FileName" kindref="compound">FileName</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrFileName.cpp" line="131" column="1" bodyfile="rrFileName.cpp" bodystart="131" bodyend="135" declfile="rrFileName.h" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrGetOptions_8cpp_1a9ce9c5b80d0240ff326be185790e047d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>RR_DECLSPEC int rr::GetOptions</definition>
        <argsstring>(int argc, char *argv[], const char *optstring)</argsstring>
        <name>GetOptions</name>
        <qualifiedname>rr::GetOptions</qualifiedname>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *</type>
          <declname>optstring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrGetOptions.cpp" line="13" column="5" bodyfile="rrGetOptions.cpp" bodystart="13" bodyend="74" declfile="rrGetOptions.h" declline="10" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="rrIniKey_8cpp_1a7b7715382729beb61545e2222232a554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const IniKey &amp;aKey)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1IniKey" kindref="compound">IniKey</ref> &amp;</type>
          <declname>aKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrIniKey.cpp" line="17" column="1" bodyfile="rrIniKey.cpp" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="rrLogger_8cpp_1ac8e9589ad50199c7f695ac3a13e589b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SplitterChannel *</type>
        <definition>static SplitterChannel * rr::getSplitterChannel</definition>
        <argsstring>()</argsstring>
        <name>getSplitterChannel</name>
        <qualifiedname>rr::getSplitterChannel</qualifiedname>
        <briefdescription>
<para>get the splitter channel that is in our logging chain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="361" column="24" bodyfile="rrLogger.cpp" bodystart="361" bodyend="369" declfile="rrLogger.cpp" declline="84" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="rrLogger_8cpp_1abe3093e711e62b578c02180e04ceb980" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PatternFormatter *</type>
        <definition>static PatternFormatter * rr::getPatternFormatter</definition>
        <argsstring>()</argsstring>
        <name>getPatternFormatter</name>
        <qualifiedname>rr::getPatternFormatter</qualifiedname>
        <briefdescription>
<para>get the pattern formatter that is in our logging chain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="371" column="25" bodyfile="rrLogger.cpp" bodystart="371" bodyend="379" declfile="rrLogger.cpp" declline="89" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="rrLogger_8cpp_1a95b1e3884c312ecb2bfa1dd2286a139c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Channel *</type>
        <definition>static Channel * rr::createConsoleChannel</definition>
        <argsstring>()</argsstring>
        <name>createConsoleChannel</name>
        <qualifiedname>rr::createConsoleChannel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="91" column="16" bodyfile="rrLogger.cpp" bodystart="91" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="rrLogger_8cpp_1ac105e1e1eb0adf90f77d96af64538dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Poco::Logger &amp;</type>
        <definition>RR_DECLSPEC Poco::Logger &amp; rr::getLogger</definition>
        <argsstring>()</argsstring>
        <name>getLogger</name>
        <qualifiedname>rr::getLogger</qualifiedname>
        <briefdescription>
<para>the real logger is actually a Poco::Logger named &quot;RoadRunner&quot;, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>Poco::Logger::get(&quot;RoadRunner&quot;).</para>
<para>This returns that logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="163" column="14" bodyfile="rrLogger.cpp" bodystart="163" bodyend="205" declfile="rrLogger.h" declline="326" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="rrLogger_8cpp_1a4996b05a760f1b8eeedf3abfed936cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::LoggingBufferCtor</definition>
        <argsstring>()</argsstring>
        <name>LoggingBufferCtor</name>
        <qualifiedname>rr::LoggingBufferCtor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrLogger.cpp" line="513" column="6" bodyfile="rrLogger.cpp" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ1Interface_8cpp_1a602e172bdfe5a8eeea93fa7e1475848e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::ModelFunction</definition>
        <argsstring>(int *nx, double *y, double *fval, int *pErr)</argsstring>
        <name>ModelFunction</name>
        <qualifiedname>rr::ModelFunction</qualifiedname>
        <param>
          <type>int *</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="271" column="6" bodyfile="rrNLEQ1Interface.cpp" bodystart="271" bodyend="323" declfile="rrNLEQ1Interface.cpp" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ1Interface_8cpp_1a93528dd46012279f7b005b47a5875b04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::ErrorForStatus</definition>
        <argsstring>(int error)</argsstring>
        <name>ErrorForStatus</name>
        <qualifiedname>rr::ErrorForStatus</qualifiedname>
        <param>
          <type>int</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="358" column="13" bodyfile="rrNLEQ1Interface.cpp" bodystart="358" bodyend="378" declfile="rrNLEQ1Interface.cpp" declline="33" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ1Interface_8cpp_1a521e52291db0a6b78b5b9dac61132cd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::isError</definition>
        <argsstring>(int e)</argsstring>
        <name>isError</name>
        <qualifiedname>rr::isError</qualifiedname>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="35" column="13" bodyfile="rrNLEQ1Interface.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ1Interface_8cpp_1abde39e918b3c1490e1719e58be90d750" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::isWarning</definition>
        <argsstring>(int e)</argsstring>
        <name>isWarning</name>
        <qualifiedname>rr::isWarning</qualifiedname>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ1Interface.cpp" line="40" column="13" bodyfile="rrNLEQ1Interface.cpp" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ2Interface_8cpp_1a602e172bdfe5a8eeea93fa7e1475848e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::ModelFunction</definition>
        <argsstring>(int *nx, double *y, double *fval, int *pErr)</argsstring>
        <name>ModelFunction</name>
        <qualifiedname>rr::ModelFunction</qualifiedname>
        <param>
          <type>int *</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>fval</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pErr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="31" column="13" bodyfile="rrNLEQ2Interface.cpp" bodystart="278" bodyend="330" declfile="rrNLEQ2Interface.cpp" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ2Interface_8cpp_1a93528dd46012279f7b005b47a5875b04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::ErrorForStatus</definition>
        <argsstring>(int error)</argsstring>
        <name>ErrorForStatus</name>
        <qualifiedname>rr::ErrorForStatus</qualifiedname>
        <param>
          <type>int</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="33" column="20" bodyfile="rrNLEQ2Interface.cpp" bodystart="365" bodyend="385" declfile="rrNLEQ2Interface.cpp" declline="33" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ2Interface_8cpp_1a521e52291db0a6b78b5b9dac61132cd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::isError</definition>
        <argsstring>(int e)</argsstring>
        <name>isError</name>
        <qualifiedname>rr::isError</qualifiedname>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="35" column="13" bodyfile="rrNLEQ2Interface.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="rrNLEQ2Interface_8cpp_1abde39e918b3c1490e1719e58be90d750" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::isWarning</definition>
        <argsstring>(int e)</argsstring>
        <name>isWarning</name>
        <qualifiedname>rr::isWarning</qualifiedname>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrNLEQ2Interface.cpp" line="40" column="13" bodyfile="rrNLEQ2Interface.cpp" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a0f5665edb8c4fd00b412ba5780c9050e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; rr::createModelStringList</definition>
        <argsstring>(ExecutableModel *model, GetNumFuncPtr numFunc, GetNameFuncPtr nameFunc)</argsstring>
        <name>createModelStringList</name>
        <qualifiedname>rr::createModelStringList</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>GetNumFuncPtr</type>
          <declname>numFunc</declname>
        </param>
        <param>
          <type>GetNameFuncPtr</type>
          <declname>nameFunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="98" column="24" bodyfile="rrRoadRunner.cpp" bodystart="98" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1aed3558708e5fa7c09e2b78d62ad5bbc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; rr::createSelectionList</definition>
        <argsstring>(const SimulateOptions &amp;o)</argsstring>
        <name>createSelectionList</name>
        <qualifiedname>rr::createSelectionList</qualifiedname>
        <param>
          <type>const <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>convert the names from the sbml settings file into the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> selection syntax. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="4348" column="24" bodyfile="rrRoadRunner.cpp" bodystart="4348" bodyend="4367" declfile="rrRoadRunner.cpp" declline="118" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a917d75bd4f447fd8ce903024a4b54b16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::logspace</definition>
        <argsstring>(const double &amp;startW, const double &amp;d2, const int &amp;n)</argsstring>
        <name>logspace</name>
        <qualifiedname>rr::logspace</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>startW</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>d2</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Some functions needed for the freq. </para>
        </briefdescription>
        <detaileddescription>
<para>analysis code From Frank Bergmann code, ported to C++ by Totte Karlson Generate log spaced array, algorithm from matlab, note operator precedence y = (10).^ [d1+(0:n-2)*(d2-d1)/(floor(n)-1), d2];</para>
<para>d1 = starting value (10^d1) d2 = ending value (10^d2) n = number of values in the generated series </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="4767" column="17" bodyfile="rrRoadRunner.cpp" bodystart="4767" bodyend="4778" declfile="rrRoadRunner.cpp" declline="130" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a75109bf37b627be32b9afc0b88faa6cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::phase</definition>
        <argsstring>(std::complex&lt; double &gt; &amp;val)</argsstring>
        <name>phase</name>
        <qualifiedname>rr::phase</qualifiedname>
        <param>
          <type>std::complex&lt; double &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="4780" column="12" bodyfile="rrRoadRunner.cpp" bodystart="4780" bodyend="4786" declfile="rrRoadRunner.cpp" declline="132" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a974b1666ce3b0140ebe3f84c2de8dac8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::getAdjustment</definition>
        <argsstring>(std::complex&lt; double &gt; &amp;z)</argsstring>
        <name>getAdjustment</name>
        <qualifiedname>rr::getAdjustment</qualifiedname>
        <param>
          <type>std::complex&lt; double &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="4789" column="12" bodyfile="rrRoadRunner.cpp" bodystart="4789" bodyend="4801" declfile="rrRoadRunner.cpp" declline="134" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1acf824e8a1d12cf613cbff9f108fb55e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rr::metabolicControlCheck</definition>
        <argsstring>(ExecutableModel *model)</argsstring>
        <name>metabolicControlCheck</name>
        <qualifiedname>rr::metabolicControlCheck</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>check if metabolic control analysis is valid for the model. </para>
        </briefdescription>
        <detaileddescription>
<para>In effect, this checks that the the model is a pure reaction-kinetics model with no rate rules, no events.</para>
<para>Throws an invaid arg exception if not valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="5019" column="17" bodyfile="rrRoadRunner.cpp" bodystart="5019" bodyend="5025" declfile="rrRoadRunner.cpp" declline="150" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a0600f1d6e25aacf7e78a999c5f09ea47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::writeDoubleVectorListToStream</definition>
        <argsstring>(std::ostream &amp;out, const DoubleVectorList &amp;results)</argsstring>
        <name>writeDoubleVectorListToStream</name>
        <qualifiedname>rr::writeDoubleVectorListToStream</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const DoubleVectorList &amp;</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="6956" column="10" bodyfile="rrRoadRunner.cpp" bodystart="6956" bodyend="6966" declfile="rrRoadRunner.cpp" declline="156" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1ad900af7633d26b2608f329edb942501a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::writeDoubleMatrixToStream</definition>
        <argsstring>(std::ostream &amp;out, const ls::DoubleMatrix &amp;results, int nrows)</argsstring>
        <name>writeDoubleMatrixToStream</name>
        <qualifiedname>rr::writeDoubleMatrixToStream</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const ls::DoubleMatrix &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="6968" column="10" bodyfile="rrRoadRunner.cpp" bodystart="6968" bodyend="6979" declfile="rrRoadRunner.cpp" declline="158" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a569819a5525e04339f43eb978f1a190e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rr::setSBMLValue</definition>
        <argsstring>(libsbml::Model *model, const std::string &amp;id, double value)</argsstring>
        <name>setSBMLValue</name>
        <qualifiedname>rr::setSBMLValue</qualifiedname>
        <param>
          <type>libsbml::Model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>find an symbol id in the model and set its value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="3197" column="17" bodyfile="rrRoadRunner.cpp" bodystart="3197" bodyend="3236"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a630339ba3a50c08fb38901e1decaf7b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rr::setSpeciesAmount</definition>
        <argsstring>(libsbml::Model *model, const std::string &amp;id, double value)</argsstring>
        <name>setSpeciesAmount</name>
        <qualifiedname>rr::setSpeciesAmount</qualifiedname>
        <param>
          <type>libsbml::Model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="3239" column="17" bodyfile="rrRoadRunner.cpp" bodystart="3239" bodyend="3253"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a7c7c65070a14127d9d684112801d4360" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::convertSBMLVersion</definition>
        <argsstring>(const std::string &amp;str, int level, int version)</argsstring>
        <name>convertSBMLVersion</name>
        <qualifiedname>rr::convertSBMLVersion</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="4170" column="24" bodyfile="rrRoadRunner.cpp" bodystart="4170" bodyend="4219"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunner_8cpp_1a410ba7a28b6d72c94782c0b8d6a02902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::checkAddRule</definition>
        <argsstring>(const std::string &amp;vid, libsbml::Model *sbmlModel)</argsstring>
        <name>checkAddRule</name>
        <qualifiedname>rr::checkAddRule</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>libsbml::Model *</type>
          <declname>sbmlModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.cpp" line="6068" column="10" bodyfile="rrRoadRunner.cpp" bodystart="6068" bodyend="6111"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunnerData_8cpp_1a0e666e5ba85bccf08a1f2920a69aa660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ss, const RoadRunnerData &amp;data)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1RoadRunnerData" kindref="compound">RoadRunnerData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunnerData.cpp" line="375" column="1" bodyfile="rrRoadRunnerData.cpp" bodystart="375" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="rrRoadRunnerData_8cpp_1a046ac6f725bc2f09bd1a877f9dba4240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; rr::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;ss, RoadRunnerData &amp;data)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>rr::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>ss</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1RoadRunnerData" kindref="compound">RoadRunnerData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunnerData.cpp" line="453" column="14" bodyfile="rrRoadRunnerData.cpp" bodystart="453" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="rrSBMLReader_8cpp_1a8335d385693dd8fa56df30c73c372d8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Poco::RegularExpression</type>
        <definition>static const Poco::RegularExpression rr::sbml_re</definition>
        <argsstring>(&quot;&lt;\\s*sbml\\s*.*?&gt;&quot;, RegularExpression::RE_UNGREEDY)</argsstring>
        <name>sbml_re</name>
        <qualifiedname>rr::sbml_re</qualifiedname>
        <param>
          <type>&quot;&lt;\\s*sbml\\s*.*?&gt;&quot;</type>
        </param>
        <param>
          <type>RegularExpression::RE_UNGREEDY</type>
        </param>
        <briefdescription>
<para>extract the &lt;sbml...&gt; tag from an sbml document. </para>
        </briefdescription>
        <detaileddescription>
<para>This regex should stop at the first match. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSBMLReader.cpp" line="100" column="38" declfile="rrSBMLReader.cpp" declline="100" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="rrSBMLReader_8cpp_1a2fdc7210b109194f841ae5b0adaa7f39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::has_comp</definition>
        <argsstring>(const std::string &amp;sbml)</argsstring>
        <name>has_comp</name>
        <qualifiedname>rr::has_comp</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbml</declname>
        </param>
        <briefdescription>
<para>Check if the given sbml std::string uses the composite extension. </para>
        </briefdescription>
        <detaileddescription>
<para>We only need to scan inside the &lt;sbml ... &gt; tag, which is as the start of the doc, so this should be a very fast search.</para>
<para>&lt;sbml xmlns=&quot;http://www.sbml.org/sbml/level3/version1/core&quot;
    xmlns:comp=&quot;http://www.sbml.org/sbml/level3/version1/comp/version1&quot;
    level=&quot;3&quot; version=&quot;1&quot; comp:required=&quot;false&quot;&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSBMLReader.cpp" line="113" column="13" bodyfile="rrSBMLReader.cpp" bodystart="113" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="rrSBMLReader_8cpp_1a0c036f6ee9b8ac3fbeed93b650662d8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::flatten_comp</definition>
        <argsstring>(const std::string &amp;sbml, const std::string fname)</argsstring>
        <name>flatten_comp</name>
        <qualifiedname>rr::flatten_comp</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbml</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>flatten a comp model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSBMLReader.cpp" line="124" column="20" bodyfile="rrSBMLReader.cpp" bodystart="124" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="rrSBMLReader_8cpp_1abcd7fcef54bd4724c1b162db5b7cab80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char rr::mytolower</definition>
        <argsstring>(char x)</argsstring>
        <name>mytolower</name>
        <qualifiedname>rr::mytolower</qualifiedname>
        <param>
          <type>char</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSBMLReader.cpp" line="190" column="6" bodyfile="rrSBMLReader.cpp" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="rrSelectionRecord_8cpp_1aecc9c110f75cc1ac54685b89171be7e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const SelectionRecord &amp;rec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &amp;</type>
          <declname>rec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSelectionRecord.cpp" line="277" column="1" bodyfile="rrSelectionRecord.cpp" bodystart="277" bodyend="285" declfile="rrSelectionRecord.h" declline="428" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1afaa83180a614be810cf93055ae573763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
        <definition>csr_matrix * rr::csr_matrix_new</definition>
        <argsstring>(unsigned m, unsigned n, const std::vector&lt; unsigned &gt; &amp;rowidx, const std::vector&lt; unsigned &gt; &amp;colidx, const std::vector&lt; double &gt; &amp;values)</argsstring>
        <name>csr_matrix_new</name>
        <qualifiedname>rr::csr_matrix_new</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>m</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned &gt; &amp;</type>
          <declname>rowidx</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned &gt; &amp;</type>
          <declname>colidx</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>allocate and initialize the buffers and fields of a dcsr_matrix struct. </para>
        </briefdescription>
        <detaileddescription>
<para>TODO: These belong someplace more appropriate that this header file.</para>
<para>These funcs are used by the generated LLVM model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="44" column="12" bodyfile="rrSparse.cpp" bodystart="44" bodyend="127" declfile="rrSparse.h" declline="79" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a929716f59371ef3425060046086f05dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::csr_matrix_set_nz</definition>
        <argsstring>(csr_matrix *mat, unsigned row, unsigned col, double val)</argsstring>
        <name>csr_matrix_set_nz</name>
        <qualifiedname>rr::csr_matrix_set_nz</qualifiedname>
        <param>
          <type><ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>row</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>col</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>sets a (previously allocted) non-zero value to the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true on success, false on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="129" column="6" bodyfile="rrSparse.cpp" bodystart="129" bodyend="143" declfile="rrSparse.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a3ee2de95cb632d92d34d21511cb40a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::csr_matrix_get_nz</definition>
        <argsstring>(const csr_matrix *mat, unsigned row, unsigned col)</argsstring>
        <name>csr_matrix_get_nz</name>
        <qualifiedname>rr::csr_matrix_get_nz</qualifiedname>
        <param>
          <type>const <ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>row</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>sets a (previously allocted) non-zero value to the given value. </para>
        </briefdescription>
        <detaileddescription>
<para>returns NaN if the entry (i,j) has not been alocated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="145" column="8" bodyfile="rrSparse.cpp" bodystart="145" bodyend="158" declfile="rrSparse.h" declline="101" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a28f33517451a18ef65ef8833cb8656da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::csr_matrix_delete</definition>
        <argsstring>(csr_matrix *mat)</argsstring>
        <name>csr_matrix_delete</name>
        <qualifiedname>rr::csr_matrix_delete</qualifiedname>
        <param>
          <type><ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>free the buffers belonging to a dcsr_matrix, and the matrix itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="160" column="6" bodyfile="rrSparse.cpp" bodystart="160" bodyend="169" declfile="rrSparse.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a8299de7cf9253ebb7383d5e612eccd95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::csr_matrix_dgemv</definition>
        <argsstring>(double alpha, const csr_matrix *A, double const *x, double beta, double *y)</argsstring>
        <name>csr_matrix_dgemv</name>
        <qualifiedname>rr::csr_matrix_dgemv</qualifiedname>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>performs the matrix-std::vector operations y := alpha*A*x + beta*y </para>
        </briefdescription>
        <detaileddescription>
<para>LAPACK sig: SUBROUTINE DGEMV(TRANS,M,N,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)</para>
<para>The given vectors y and x must be the same size as number of columns in the sparse matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="171" column="6" bodyfile="rrSparse.cpp" bodystart="171" bodyend="202" declfile="rrSparse.h" declline="111" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1aa3bcf65a7d872026cee0db01713685fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::csr_matrix_ddot</definition>
        <argsstring>(size_t row, const csr_matrix *x, const double *y)</argsstring>
        <name>csr_matrix_ddot</name>
        <qualifiedname>rr::csr_matrix_ddot</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const <ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>perform a dot product between the a row in the matrix and a std::vector y. </para>
        </briefdescription>
        <detaileddescription>
<para>The given std::vector y must obviously be the same length as the number of rows in matrix x. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="205" column="8" bodyfile="rrSparse.cpp" bodystart="205" bodyend="218" declfile="rrSparse.h" declline="120" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a0be8d8a7df46cd68894ae9502ed7b5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::csr_matrix_fill_dense</definition>
        <argsstring>(const csr_matrix *x, double *dense)</argsstring>
        <name>csr_matrix_fill_dense</name>
        <qualifiedname>rr::csr_matrix_fill_dense</qualifiedname>
        <param>
          <type>const <ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dense</declname>
        </param>
        <briefdescription>
<para>fill dense matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="220" column="6" bodyfile="rrSparse.cpp" bodystart="220" bodyend="241" declfile="rrSparse.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1abbf742c51f4a7d4ebd46de04e59967a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::csr_matrix_dump_binary</definition>
        <argsstring>(const csr_matrix *x, std::ostream &amp;out)</argsstring>
        <name>csr_matrix_dump_binary</name>
        <qualifiedname>rr::csr_matrix_dump_binary</qualifiedname>
        <param>
          <type>const <ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="243" column="6" bodyfile="rrSparse.cpp" bodystart="243" bodyend="251" declfile="rrSparse.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a5b0c9fedf05679bf01f3affdba23b296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
        <definition>csr_matrix * rr::csr_matrix_new_from_binary</definition>
        <argsstring>(std::istream &amp;in)</argsstring>
        <name>csr_matrix_new_from_binary</name>
        <qualifiedname>rr::csr_matrix_new_from_binary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="253" column="12" bodyfile="rrSparse.cpp" bodystart="253" bodyend="269" declfile="rrSparse.h" declline="128" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="rrSparse_8cpp_1a4cca136e41fb9f65c578844b10dc03ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const csr_matrix *mat)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structrr_1_1csr__matrix__t" kindref="compound">csr_matrix</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>dump the matrix to an output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrSparse.cpp" line="271" column="1" bodyfile="rrSparse.cpp" bodystart="271" bodyend="324" declfile="rrSparse.h" declline="132" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a2f4f50341a032f46a3c428670ab85205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>RR_DECLSPEC char * rr::createText</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>createText</name>
        <qualifiedname>rr::createText</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="19" column="6" bodyfile="rrStringUtils.cpp" bodystart="19" bodyend="30" declfile="rrStringUtils.h" declline="21" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a155d30d4782453020052a9dd7f6a2f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>RR_DECLSPEC char * rr::createText</definition>
        <argsstring>(const int &amp;count)</argsstring>
        <name>createText</name>
        <qualifiedname>rr::createText</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="32" column="6" bodyfile="rrStringUtils.cpp" bodystart="32" bodyend="42" declfile="rrStringUtils.h" declline="23" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a1f3deec728908be2c5985f49bf71e489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::freeText</definition>
        <argsstring>(char *str)</argsstring>
        <name>freeText</name>
        <qualifiedname>rr::freeText</qualifiedname>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="44" column="6" bodyfile="rrStringUtils.cpp" bodystart="44" bodyend="48" declfile="rrStringUtils.h" declline="25" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ace285fb4007b2b8480af0ccbe2d5ab20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::replaceWord</definition>
        <argsstring>(const std::string &amp;str1, const std::string &amp;str2, const std::string &amp;theString)</argsstring>
        <name>replaceWord</name>
        <qualifiedname>rr::replaceWord</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>theString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="50" column="13" bodyfile="rrStringUtils.cpp" bodystart="50" bodyend="59" declfile="rrStringUtils.h" declline="27" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aef8c4e328fe993fd6effc53de4b56bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::convertFunctionCallToUseVarArgsSyntax</definition>
        <argsstring>(const std::string &amp;funcName, std::string &amp;expression)</argsstring>
        <name>convertFunctionCallToUseVarArgsSyntax</name>
        <qualifiedname>rr::convertFunctionCallToUseVarArgsSyntax</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>funcName</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="61" column="6" bodyfile="rrStringUtils.cpp" bodystart="61" bodyend="79" declfile="rrStringUtils.h" declline="29" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a1c4c74a725f3887a511407153f34bfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::removeChars</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;chars)</argsstring>
        <name>removeChars</name>
        <qualifiedname>rr::removeChars</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="81" column="13" bodyfile="rrStringUtils.cpp" bodystart="81" bodyend="90" declfile="rrStringUtils.h" declline="31" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ad33119a80cb315c0865071228cc8f903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::isUnwantedChar</definition>
        <argsstring>(char ch)</argsstring>
        <name>isUnwantedChar</name>
        <qualifiedname>rr::isUnwantedChar</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="92" column="6" bodyfile="rrStringUtils.cpp" bodystart="92" bodyend="99" declfile="rrStringUtils.h" declline="33" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a25bcfa31b5601e55419c68e88dc617d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>RR_DECLSPEC size_t rr::findMatchingRightParenthesis</definition>
        <argsstring>(const std::string &amp;expression, const size_t startFrom)</argsstring>
        <name>findMatchingRightParenthesis</name>
        <qualifiedname>rr::findMatchingRightParenthesis</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>startFrom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="101" column="8" bodyfile="rrStringUtils.cpp" bodystart="101" bodyend="128" declfile="rrStringUtils.h" declline="34" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a2e927e5eb85fac02e3750de577ec9c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>RR_DECLSPEC int rr::getNumberOfFunctionArguments</definition>
        <argsstring>(const std::string &amp;expression)</argsstring>
        <name>getNumberOfFunctionArguments</name>
        <qualifiedname>rr::getNumberOfFunctionArguments</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="130" column="5" bodyfile="rrStringUtils.cpp" bodystart="130" bodyend="158" declfile="rrStringUtils.h" declline="36" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a0e56d9ab9489b22b2162e54a391d8a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::tabs</definition>
        <argsstring>(const int &amp;nr)</argsstring>
        <name>tabs</name>
        <qualifiedname>rr::tabs</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="160" column="13" bodyfile="rrStringUtils.cpp" bodystart="160" bodyend="168" declfile="rrStringUtils.h" declline="38" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a974146eb0b63f5933b9be2cd2513fcf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::NL</definition>
        <argsstring>()</argsstring>
        <name>NL</name>
        <qualifiedname>rr::NL</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="170" column="13" bodyfile="rrStringUtils.cpp" bodystart="170" bodyend="175" declfile="rrStringUtils.h" declline="40" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a4c1a5884bcd195c526d125863218e226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getFileName</definition>
        <argsstring>(const std::string &amp;fileN)</argsstring>
        <name>getFileName</name>
        <qualifiedname>rr::getFileName</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="178" column="13" bodyfile="rrStringUtils.cpp" bodystart="178" bodyend="193" declfile="rrStringUtils.h" declline="50" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ab39463fcf243a4ecaad4a434af413a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getFileNameNoExtension</definition>
        <argsstring>(const std::string &amp;fileN)</argsstring>
        <name>getFileNameNoExtension</name>
        <qualifiedname>rr::getFileNameNoExtension</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="195" column="13" bodyfile="rrStringUtils.cpp" bodystart="195" bodyend="212" declfile="rrStringUtils.h" declline="52" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a54a1d19a38c0dc5c7cd715bbb581ec29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getFileExtension</definition>
        <argsstring>(const std::string &amp;fileN)</argsstring>
        <name>getFileExtension</name>
        <qualifiedname>rr::getFileExtension</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="214" column="13" bodyfile="rrStringUtils.cpp" bodystart="214" bodyend="229" declfile="rrStringUtils.h" declline="54" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a1d4ec8ce62d63d59689b88dd9d73868d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getFilePath</definition>
        <argsstring>(const std::string &amp;fileN)</argsstring>
        <name>getFilePath</name>
        <qualifiedname>rr::getFilePath</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="231" column="13" bodyfile="rrStringUtils.cpp" bodystart="231" bodyend="246" declfile="rrStringUtils.h" declline="48" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a7b7c1a1b9ed348873f4d85f8dc37687c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::changeFileExtensionTo</definition>
        <argsstring>(const std::string &amp;_fName, const std::string &amp;newExtension)</argsstring>
        <name>changeFileExtensionTo</name>
        <qualifiedname>rr::changeFileExtensionTo</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_fName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>newExtension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="248" column="13" bodyfile="rrStringUtils.cpp" bodystart="248" bodyend="277" declfile="rrStringUtils.h" declline="56" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aacde64c6c77a2d3183aa6032dce7ef19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::startsWith</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;sub)</argsstring>
        <name>startsWith</name>
        <qualifiedname>rr::startsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="279" column="6" bodyfile="rrStringUtils.cpp" bodystart="279" bodyend="283" declfile="rrStringUtils.h" declline="80" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a73277562d0dc9d18ca89c1bf04e385e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::endsWith</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;sub)</argsstring>
        <name>endsWith</name>
        <qualifiedname>rr::endsWith</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="285" column="6" bodyfile="rrStringUtils.cpp" bodystart="285" bodyend="289" declfile="rrStringUtils.h" declline="82" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a23ba5d1c3f701f58d02d5faae2273297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::trim</definition>
        <argsstring>(const std::string &amp;str, const char &amp;ch)</argsstring>
        <name>trim</name>
        <qualifiedname>rr::trim</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char &amp;</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="291" column="13" bodyfile="rrStringUtils.cpp" bodystart="291" bodyend="309" declfile="rrStringUtils.h" declline="60" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a6d95508376e0e3c23c809bcd54ab481f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>RR_DECLSPEC std::string &amp; rr::trim</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>trim</name>
        <qualifiedname>rr::trim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>removes both leading and trailing white space characters from input string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="311" column="13" bodyfile="rrStringUtils.cpp" bodystart="311" bodyend="314" declfile="rrStringUtils.h" declline="66" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aa70c7f88cd5ededcf802f497d1263068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>RR_DECLSPEC std::string &amp; rr::ltrim</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>ltrim</name>
        <qualifiedname>rr::ltrim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>left trim. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes leading white space characters from string<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="316" column="14" bodyfile="rrStringUtils.cpp" bodystart="316" bodyend="321" declfile="rrStringUtils.h" declline="72" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a425c3a337563f14fdfa67809cea4ca3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>RR_DECLSPEC std::string &amp; rr::rtrim</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>rtrim</name>
        <qualifiedname>rr::rtrim</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>right trim. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes trailing white space characters from string<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="323" column="14" bodyfile="rrStringUtils.cpp" bodystart="323" bodyend="328" declfile="rrStringUtils.h" declline="78" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a95aba1d1adea11f996cc0585d44e8ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::removeNewLines</definition>
        <argsstring>(const std::string &amp;str, const int &amp;howMany)</argsstring>
        <name>removeNewLines</name>
        <qualifiedname>rr::removeNewLines</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>howMany</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="330" column="13" bodyfile="rrStringUtils.cpp" bodystart="330" bodyend="333" declfile="rrStringUtils.h" declline="204" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1abf45e4c0e31c1d1736de84e1ba269f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;arg)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="335" column="13" bodyfile="rrStringUtils.cpp" bodystart="335" bodyend="338" declfile="rrStringUtils.h" declline="153" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a81a686872dfd856e4c286e7a407f925c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;src, const int &amp;arg)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="340" column="13" bodyfile="rrStringUtils.cpp" bodystart="340" bodyend="343" declfile="rrStringUtils.h" declline="138" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aa98cfa8e00c527add1335dcae82c16a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;arg1, const std::string &amp;arg2)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="345" column="13" bodyfile="rrStringUtils.cpp" bodystart="345" bodyend="349" declfile="rrStringUtils.h" declline="155" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aeafb66ba5f33b6f789abc38c04c71b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;arg1, const int &amp;arg2)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="351" column="13" bodyfile="rrStringUtils.cpp" bodystart="351" bodyend="355" declfile="rrStringUtils.h" declline="157" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ad5db7a9d5e52f1e999325badd6422480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;arg1, const std::string &amp;arg2, const std::string &amp;arg3)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="357" column="13" bodyfile="rrStringUtils.cpp" bodystart="357" bodyend="364" declfile="rrStringUtils.h" declline="163" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a2f227c6316b5697718df2a5292636719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;arg1, const int &amp;arg2, const std::string &amp;arg3)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="366" column="13" bodyfile="rrStringUtils.cpp" bodystart="366" bodyend="371" declfile="rrStringUtils.h" declline="160" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a7d9378e84d304488ec1dccaf2d1d666e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;str1, const std::string &amp;arg1, const std::string &amp;arg2, const std::string &amp;arg3, const std::string &amp;arg4)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg3</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="373" column="13" bodyfile="rrStringUtils.cpp" bodystart="373" bodyend="386" declfile="rrStringUtils.h" declline="166" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1adcc3520a143a49e0834031179448b3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;str1, const std::string &amp;arg1, const std::string &amp;arg2, const std::string &amp;arg3, const std::string &amp;arg4, const std::string &amp;arg5)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg3</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg4</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="388" column="13" bodyfile="rrStringUtils.cpp" bodystart="388" bodyend="403" declfile="rrStringUtils.h" declline="170" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a50e1f9809b47aed7305d4f9e8ce1430d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;str1, const unsigned int &amp;arg1, const std::string &amp;arg2)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="405" column="13" bodyfile="rrStringUtils.cpp" bodystart="405" bodyend="414" declfile="rrStringUtils.h" declline="173" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a24322424d00ba5701a898711d3bec459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;str1, const unsigned int &amp;arg1, const std::string &amp;arg2, const std::string &amp;arg3)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="416" column="13" bodyfile="rrStringUtils.cpp" bodystart="416" bodyend="428" declfile="rrStringUtils.h" declline="176" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a20110224a440658b3dcbc6663f92ec5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::format</definition>
        <argsstring>(const std::string &amp;str1, const unsigned int &amp;arg1, const unsigned int &amp;arg2, const std::string &amp;arg3, const std::string &amp;arg4)</argsstring>
        <name>format</name>
        <qualifiedname>rr::format</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>arg2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg3</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="430" column="13" bodyfile="rrStringUtils.cpp" bodystart="430" bodyend="444" declfile="rrStringUtils.h" declline="179" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a618d76374b01f7a4d0dd3a6aa4d7ac80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::substitute</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;thisOne, const int &amp;withThisOne, const int &amp;howMany)</argsstring>
        <name>substitute</name>
        <qualifiedname>rr::substitute</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>thisOne</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>withThisOne</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>howMany</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="446" column="13" bodyfile="rrStringUtils.cpp" bodystart="446" bodyend="449" declfile="rrStringUtils.h" declline="202" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ac093c697ec0d945068a5fb23aef1ab04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::substitute</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;thisOne, const std::string &amp;withThisOne, const int &amp;howMany)</argsstring>
        <name>substitute</name>
        <qualifiedname>rr::substitute</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>thisOne</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>withThisOne</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>howMany</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="456" column="13" bodyfile="rrStringUtils.cpp" bodystart="456" bodyend="474" declfile="rrStringUtils.h" declline="198" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a75bc0a080acf08f9a4004afe6a276ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::intToStr</definition>
        <argsstring>(const int &amp;nt)</argsstring>
        <name>intToStr</name>
        <qualifiedname>rr::intToStr</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>nt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="482" column="13" bodyfile="rrStringUtils.cpp" bodystart="482" bodyend="492" declfile="rrStringUtils.h" declline="85" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a6a296f8b01ed1e0a7479d67184a989fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::dblToStr</definition>
        <argsstring>(const double &amp;nt)</argsstring>
        <name>dblToStr</name>
        <qualifiedname>rr::dblToStr</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>nt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="494" column="13" bodyfile="rrStringUtils.cpp" bodystart="494" bodyend="500" declfile="rrStringUtils.h" declline="89" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a2e38ee766913ea8b7acb37461f1271d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>RR_DECLSPEC int rr::strToInt</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>strToInt</name>
        <qualifiedname>rr::strToInt</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="502" column="5" bodyfile="rrStringUtils.cpp" bodystart="502" bodyend="505" declfile="rrStringUtils.h" declline="87" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a53a4164dd51fdc1b8c2f850f4cd997e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>RR_DECLSPEC double rr::strToDbl</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>strToDbl</name>
        <qualifiedname>rr::strToDbl</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="507" column="8" bodyfile="rrStringUtils.cpp" bodystart="507" bodyend="511" declfile="rrStringUtils.h" declline="91" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a5b0d8c6d3592729f4cabb9ff57bfc0d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>RR_DECLSPEC std::vector&lt; std::string &gt; rr::splitString</definition>
        <argsstring>(const std::string &amp;text, const char &amp;oneSep)</argsstring>
        <name>splitString</name>
        <qualifiedname>rr::splitString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const char &amp;</type>
          <declname>oneSep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="513" column="13" bodyfile="rrStringUtils.cpp" bodystart="513" bodyend="518" declfile="rrStringUtils.h" declline="95" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a8b43b3899b5243f319b57f3b35e1ffcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>RR_DECLSPEC std::vector&lt; std::string &gt; rr::splitString</definition>
        <argsstring>(const std::string &amp;text, const std::string &amp;separators)</argsstring>
        <name>splitString</name>
        <qualifiedname>rr::splitString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="520" column="13" bodyfile="rrStringUtils.cpp" bodystart="520" bodyend="538" declfile="rrStringUtils.h" declline="93" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a16f984f3b04b24e6b26b0c0bdd632740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::splitString</definition>
        <argsstring>(const std::string &amp;text, const std::string &amp;separators, bool cutDelimiter)</argsstring>
        <name>splitString</name>
        <qualifiedname>rr::splitString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cutDelimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="540" column="13" bodyfile="rrStringUtils.cpp" bodystart="540" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a3c382bc237bda9c2c69f146fa829f826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::splitString</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;words, const std::string &amp;text, const std::string &amp;separators)</argsstring>
        <name>splitString</name>
        <qualifiedname>rr::splitString</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>words</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="572" column="8" bodyfile="rrStringUtils.cpp" bodystart="572" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a55370a0f9a71d48310b82feb4d33220b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>RR_DECLSPEC int rr::toInt</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>toInt</name>
        <qualifiedname>rr::toInt</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="590" column="5" bodyfile="rrStringUtils.cpp" bodystart="590" bodyend="593" declfile="rrStringUtils.h" declline="97" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a2cf0717de73a9a2aaef462b64763b93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::toBool</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>toBool</name>
        <qualifiedname>rr::toBool</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="595" column="6" bodyfile="rrStringUtils.cpp" bodystart="595" bodyend="606" declfile="rrStringUtils.h" declline="99" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a7a635c0455b16a5e3a4ef66c9ef2be59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>RR_DECLSPEC double rr::toDouble</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>toDouble</name>
        <qualifiedname>rr::toDouble</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="608" column="8" bodyfile="rrStringUtils.cpp" bodystart="608" bodyend="659" declfile="rrStringUtils.h" declline="101" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a5013e0c084c37c57a475c05db3b05afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>RR_DECLSPEC std::vector&lt; double &gt; rr::toDoubleVector</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>toDoubleVector</name>
        <qualifiedname>rr::toDoubleVector</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="661" column="13" bodyfile="rrStringUtils.cpp" bodystart="661" bodyend="675" declfile="rrStringUtils.h" declline="103" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aee82813dd2248318bc03e742877af5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>complex&lt; double &gt;</type>
        <definition>RR_DECLSPEC complex&lt; double &gt; rr::toComplex</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>toComplex</name>
        <qualifiedname>rr::toComplex</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="677" column="9" bodyfile="rrStringUtils.cpp" bodystart="677" bodyend="709" declfile="rrStringUtils.h" declline="105" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a77764435e238f58b4eeb930e8c807675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toUpperOrLowerCase</definition>
        <argsstring>(const std::string &amp;inStr, int(*func)(int))</argsstring>
        <name>toUpperOrLowerCase</name>
        <qualifiedname>rr::toUpperOrLowerCase</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inStr</declname>
        </param>
        <param>
          <type>int(*)(int)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="711" column="13" bodyfile="rrStringUtils.cpp" bodystart="711" bodyend="716" declfile="rrStringUtils.h" declline="42" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a326b37ac35cb80768e899e8685acd717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toUpper</definition>
        <argsstring>(const std::string &amp;inStr)</argsstring>
        <name>toUpper</name>
        <qualifiedname>rr::toUpper</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="718" column="13" bodyfile="rrStringUtils.cpp" bodystart="718" bodyend="723" declfile="rrStringUtils.h" declline="44" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a620599208560d4233ccc001ecfffd285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toLower</definition>
        <argsstring>(const std::string &amp;inStr)</argsstring>
        <name>toLower</name>
        <qualifiedname>rr::toLower</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="725" column="13" bodyfile="rrStringUtils.cpp" bodystart="725" bodyend="730" declfile="rrStringUtils.h" declline="46" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ad739fc7845905090b647b8fc707fbc45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const char *str)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="732" column="13" bodyfile="rrStringUtils.cpp" bodystart="732" bodyend="735" declfile="rrStringUtils.h" declline="130" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a1ad72665007a90df6ee9fd91f2e518ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const bool &amp;val)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="737" column="13" bodyfile="rrStringUtils.cpp" bodystart="737" bodyend="740" declfile="rrStringUtils.h" declline="107" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ad3cc09c5020c411b22d1bec07b6da888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const double &amp;val, const std::string &amp;format)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="742" column="13" bodyfile="rrStringUtils.cpp" bodystart="742" bodyend="747" declfile="rrStringUtils.h" declline="109" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ae3c9d4140ffa2ae2c2678a976b0160cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const unsigned int &amp;n, const std::string &amp;format, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="756" column="13" bodyfile="rrStringUtils.cpp" bodystart="756" bodyend="783" declfile="rrStringUtils.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1abe7aa673ba22b0dd8b10591e8172c589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const int &amp;n, const std::string &amp;format, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="785" column="13" bodyfile="rrStringUtils.cpp" bodystart="785" bodyend="812" declfile="rrStringUtils.h" declline="114" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ad349f91784fc28b3894d1c39841fc963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::toString</definition>
        <argsstring>(const int n, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="814" column="13" bodyfile="rrStringUtils.cpp" bodystart="814" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a78afbd74c75f560f4c7617966847e090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const long n, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="843" column="13" bodyfile="rrStringUtils.cpp" bodystart="843" bodyend="852" declfile="rrStringUtils.h" declline="116" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a71d6fcf80abe72b3012304afd8fe262a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const unsigned long n, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="854" column="13" bodyfile="rrStringUtils.cpp" bodystart="854" bodyend="863" declfile="rrStringUtils.h" declline="118" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a8a80347899de71401991a4dfd1459e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const unsigned short n, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const unsigned short</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="865" column="13" bodyfile="rrStringUtils.cpp" bodystart="865" bodyend="874" declfile="rrStringUtils.h" declline="120" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a0a425d95e95d7063c872b48541737a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const short n, const int nBase)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const short</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nBase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="876" column="13" bodyfile="rrStringUtils.cpp" bodystart="876" bodyend="879" declfile="rrStringUtils.h" declline="122" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a2da96b5aab6164cf0f08da7ae8621524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const char n)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const char</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="881" column="13" bodyfile="rrStringUtils.cpp" bodystart="881" bodyend="886" declfile="rrStringUtils.h" declline="124" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1ad932f70ad7a7ed2476142e834a5e41b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const unsigned char n)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const unsigned char</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="888" column="13" bodyfile="rrStringUtils.cpp" bodystart="888" bodyend="893" declfile="rrStringUtils.h" declline="126" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a70eb0c858b64c72cf44b7e4ef3215368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="895" column="13" bodyfile="rrStringUtils.cpp" bodystart="895" bodyend="898" declfile="rrStringUtils.h" declline="128" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a108f81d8c3c8b6153416f2e87cfac4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toString</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;sep)</argsstring>
        <name>toString</name>
        <qualifiedname>rr::toString</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="900" column="13" bodyfile="rrStringUtils.cpp" bodystart="900" bodyend="914" declfile="rrStringUtils.h" declline="132" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a5cf5485cd6ab3cd4f994b9e21b91965a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::toStringSize</definition>
        <argsstring>(size_t n)</argsstring>
        <name>toStringSize</name>
        <qualifiedname>rr::toStringSize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="916" column="13" bodyfile="rrStringUtils.cpp" bodystart="916" bodyend="921" declfile="rrStringUtils.h" declline="134" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a216ec881c17d9f174696ee840a9a0ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>RR_DECLSPEC int rr::compareNoCase</definition>
        <argsstring>(const std::string &amp;str1, const std::string &amp;str2)</argsstring>
        <name>compareNoCase</name>
        <qualifiedname>rr::compareNoCase</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="923" column="5" bodyfile="rrStringUtils.cpp" bodystart="923" bodyend="931" declfile="rrStringUtils.h" declline="58" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a10c9ae40d2b9260981ea5c156571fea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="933" column="13" bodyfile="rrStringUtils.cpp" bodystart="933" bodyend="938" declfile="rrStringUtils.h" declline="182" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a23dadb4b4a95c9ad8ecd47b31257f59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const int &amp;str)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="940" column="13" bodyfile="rrStringUtils.cpp" bodystart="940" bodyend="945" declfile="rrStringUtils.h" declline="184" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a596a534762c06e3d8d9efed6adfd4051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const unsigned int &amp;str)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="948" column="13" bodyfile="rrStringUtils.cpp" bodystart="948" bodyend="953" declfile="rrStringUtils.h" declline="186" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a5a58a8aa18b603f4f107a5585a47dafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="956" column="13" bodyfile="rrStringUtils.cpp" bodystart="956" bodyend="961" declfile="rrStringUtils.h" declline="188" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a134dd84d307c3910233920eb9f13cbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const std::string &amp;s1, const std::string &amp;s2, const std::string &amp;s3)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="963" column="13" bodyfile="rrStringUtils.cpp" bodystart="963" bodyend="968" declfile="rrStringUtils.h" declline="190" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1a27cc9076e767bd2339fc93b77e355b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const std::string &amp;s1, const unsigned int &amp;s2, const std::string &amp;s3)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="970" column="13" bodyfile="rrStringUtils.cpp" bodystart="970" bodyend="975" declfile="rrStringUtils.h" declline="192" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8cpp_1aa3c5679169c6b0d5886a36652fa26218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::append</definition>
        <argsstring>(const std::string &amp;s1, const unsigned int &amp;s2, const std::string &amp;s3, const std::string &amp;s4)</argsstring>
        <name>append</name>
        <qualifiedname>rr::append</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s3</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.cpp" line="977" column="13" bodyfile="rrStringUtils.cpp" bodystart="977" bodyend="982" declfile="rrStringUtils.h" declline="195" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a5834f4c8e5fd5a47d0a3db5bc9c19c23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, const T &amp;t)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="213" column="17" bodyfile="rrStringUtils.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a616196f237c7bb52fee83634483f51bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, T *t)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="218" column="17" bodyfile="rrStringUtils.h" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a097e937c65e6b309579f9e0c25b96823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, const std::string &amp;s)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="223" column="17" bodyfile="rrStringUtils.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a1b13ab73b9f0ae188baba26335868b4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="229" column="17" bodyfile="rrStringUtils.h" bodystart="229" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a09342ff650bd4ff0d25f7ae86de2faa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, const std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="237" column="17" bodyfile="rrStringUtils.h" bodystart="237" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a015da2b8130c19654c037ab9208003be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, const std::unordered_map&lt; K, V &gt; &amp;m)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="246" column="17" bodyfile="rrStringUtils.h" bodystart="246" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a13f29ec4e8ee8d0aa4a207dbf7dc0099" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary</definition>
        <argsstring>(std::ostream &amp;out, const std::set&lt; T &gt; &amp;s)</argsstring>
        <name>saveBinary</name>
        <qualifiedname>rr::saveBinary</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="255" column="17" bodyfile="rrStringUtils.h" bodystart="255" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1aeda64da4f8513fbd874b8479f227e317" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::saveBinary&lt; rr::Setting &gt;</definition>
        <argsstring>(std::ostream &amp;out, const rr::Setting &amp;var)</argsstring>
        <name>saveBinary&lt; rr::Setting &gt;</name>
        <qualifiedname>rr::saveBinary&lt; rr::Setting &gt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Setting" kindref="compound">rr::Setting</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="263" column="12" bodyfile="rrStringUtils.h" bodystart="263" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a60b73bc6ee53472c6d75d5b4dbecd62e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, T &amp;t)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="310" column="17" bodyfile="rrStringUtils.h" bodystart="310" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1afd25efcadfb4fbf915c72322cfe99217" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, T *t)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="317" column="17" bodyfile="rrStringUtils.h" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a625d298a2759c0d9ecc3f9526a5f569e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, std::string &amp;s)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="322" column="17" bodyfile="rrStringUtils.h" bodystart="322" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a398974d0e4b38c8d0887b7694e2fb6a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="330" column="17" bodyfile="rrStringUtils.h" bodystart="330" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a5cb731d9058bfef3caaff0a0155365ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="342" column="17" bodyfile="rrStringUtils.h" bodystart="342" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1af76b918320b9988556f3db3240d172e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, std::unordered_map&lt; K, V &gt; &amp;m)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="356" column="17" bodyfile="rrStringUtils.h" bodystart="356" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1aa04a7851764c21dc667dd5dcc93d34da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary</definition>
        <argsstring>(std::istream &amp;in, std::set&lt; T &gt; &amp;s)</argsstring>
        <name>loadBinary</name>
        <qualifiedname>rr::loadBinary</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="370" column="17" bodyfile="rrStringUtils.h" bodystart="370" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="rrStringUtils_8h_1a9c16bc6e3f158c5682e9c55b3efc63d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void rr::loadBinary&lt; rr::Setting &gt;</definition>
        <argsstring>(std::istream &amp;in, rr::Setting &amp;var)</argsstring>
        <name>loadBinary&lt; rr::Setting &gt;</name>
        <qualifiedname>rr::loadBinary&lt; rr::Setting &gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Setting" kindref="compound">rr::Setting</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrStringUtils.h" line="382" column="12" bodyfile="rrStringUtils.h" bodystart="382" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a481b1b5830f0013dbef86e825657af41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::cleanFolder</definition>
        <argsstring>(const std::string &amp;folder, const std::string &amp;baseName, const std::vector&lt; std::string &gt; &amp;extensions)</argsstring>
        <name>cleanFolder</name>
        <qualifiedname>rr::cleanFolder</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>folder</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>baseName</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="68" column="6" bodyfile="rrUtils.cpp" bodystart="68" bodyend="80" declfile="rrUtils.h" declline="29" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a6fd786b020fc23e2f9b2891832665e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getMD5</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>getMD5</name>
        <qualifiedname>rr::getMD5</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="113" column="13" bodyfile="rrUtils.cpp" bodystart="113" bodyend="119" declfile="rrUtils.h" declline="32" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a653fb85ee5ab48ff21fce496f2dcb293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getSBMLMD5</definition>
        <argsstring>(const std::string &amp;text, int modelGenOpt)</argsstring>
        <name>getSBMLMD5</name>
        <qualifiedname>rr::getSBMLMD5</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>modelGenOpt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="121" column="13" bodyfile="rrUtils.cpp" bodystart="121" bodyend="128" declfile="rrUtils.h" declline="33" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1aa448dfe42e37d9970b5742489d55bf98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getTime</definition>
        <argsstring>()</argsstring>
        <name>getTime</name>
        <qualifiedname>rr::getTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="130" column="13" bodyfile="rrUtils.cpp" bodystart="130" bodyend="142" declfile="rrUtils.h" declline="30" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a5ee790b6551b032564ece81bccaa3b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getDateTime</definition>
        <argsstring>()</argsstring>
        <name>getDateTime</name>
        <qualifiedname>rr::getDateTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="144" column="13" bodyfile="rrUtils.cpp" bodystart="144" bodyend="156" declfile="rrUtils.h" declline="31" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a0fcfe7004671266883200908483ea4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getTempDir</definition>
        <argsstring>()</argsstring>
        <name>getTempDir</name>
        <qualifiedname>rr::getTempDir</qualifiedname>
        <briefdescription>
<para>Get a temporary directory path. </para>
        </briefdescription>
        <detaileddescription>
<para>If the config specifies a TEMP_DIR entry, this is used, if not this will return the system specified temporary directory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="158" column="13" bodyfile="rrUtils.cpp" bodystart="158" bodyend="184" declfile="rrUtils.h" declline="82" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a264c80dddd9b21acd4ab1304487296d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getCurrentSharedLibDir</definition>
        <argsstring>()</argsstring>
        <name>getCurrentSharedLibDir</name>
        <qualifiedname>rr::getCurrentSharedLibDir</qualifiedname>
        <briefdescription>
<para>If roadrunner is build and running as shared library, either using the C++ shared library, or using the _roadrunner.so (or .pyd on Win). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="186" column="13" bodyfile="rrUtils.cpp" bodystart="186" bodyend="225" declfile="rrUtils.h" declline="74" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1accb9ee7ca8cce6a4beecb51776341915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getCurrentExeFolder</definition>
        <argsstring>()</argsstring>
        <name>getCurrentExeFolder</name>
        <qualifiedname>rr::getCurrentExeFolder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="228" column="13" bodyfile="rrUtils.cpp" bodystart="228" bodyend="269" declfile="rrUtils.h" declline="67" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1ad45c0c3811f29c272fc62f30bf5da7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getParentFolder</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>getParentFolder</name>
        <qualifiedname>rr::getParentFolder</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="271" column="13" bodyfile="rrUtils.cpp" bodystart="271" bodyend="280" declfile="rrUtils.h" declline="66" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a653eea2d98d9b0a4e321f3272191e769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getCWD</definition>
        <argsstring>()</argsstring>
        <name>getCWD</name>
        <qualifiedname>rr::getCWD</qualifiedname>
        <briefdescription>
<para><zwj/>** </para>
        </briefdescription>
        <detaileddescription>
<para><zwj/>** </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="282" column="13" bodyfile="rrUtils.cpp" bodystart="282" bodyend="301" declfile="rrUtils.h" declline="105" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1af80d533e7578d61e1f5e35c899f338be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>RR_DECLSPEC void rr::sleep</definition>
        <argsstring>(int milliSeconds)</argsstring>
        <name>sleep</name>
        <qualifiedname>rr::sleep</qualifiedname>
        <param>
          <type>int</type>
          <declname>milliSeconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="303" column="6" bodyfile="rrUtils.cpp" bodystart="303" bodyend="306" declfile="rrUtils.h" declline="34" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1ac34c1c7b25242a250e7635ef78d2ea2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char</type>
        <definition>RR_DECLSPEC const char rr::getPathSeparator</definition>
        <argsstring>()</argsstring>
        <name>getPathSeparator</name>
        <qualifiedname>rr::getPathSeparator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="308" column="12" bodyfile="rrUtils.cpp" bodystart="308" bodyend="311" declfile="rrUtils.h" declline="106" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a7f8f4d98dbb63baa2ececa78198c13d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getFileContent</definition>
        <argsstring>(std::filesystem::path fName)</argsstring>
        <name>getFileContent</name>
        <qualifiedname>rr::getFileContent</qualifiedname>
        <param>
          <type>std::filesystem::path</type>
          <declname>fName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="313" column="13" bodyfile="rrUtils.cpp" bodystart="313" bodyend="325" declfile="rrUtils.h" declline="109" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1ad05da0d9422f45b950a7814e056ad8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>RR_DECLSPEC std::vector&lt; std::string &gt; rr::getLinesInFile</definition>
        <argsstring>(std::filesystem::path fName)</argsstring>
        <name>getLinesInFile</name>
        <qualifiedname>rr::getLinesInFile</qualifiedname>
        <param>
          <type>std::filesystem::path</type>
          <declname>fName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="327" column="13" bodyfile="rrUtils.cpp" bodystart="327" bodyend="341" declfile="rrUtils.h" declline="108" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1aafaabbfa0bff0f791334b6dda2a0e86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ptrdiff_t</type>
        <definition>RR_DECLSPEC std::ptrdiff_t rr::indexOf</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;vec, const std::string &amp;elem)</argsstring>
        <name>indexOf</name>
        <qualifiedname>rr::indexOf</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>indexOf returns the index of an element in the std::vector. If not found, or if std::vector size is zero, it returns -1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="343" column="16" bodyfile="rrUtils.cpp" bodystart="343" bodyend="354" declfile="rrUtils.h" declline="40" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1ac58e36fb697b06edcdca6fab538990e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::removeTrailingSeparator</definition>
        <argsstring>(const std::string &amp;_folder, const char sep)</argsstring>
        <name>removeTrailingSeparator</name>
        <qualifiedname>rr::removeTrailingSeparator</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>_folder</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="358" column="13" bodyfile="rrUtils.cpp" bodystart="358" bodyend="370" declfile="rrUtils.h" declline="46" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a7f15b8135a4a24399e23a493a7435324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::isNaN</definition>
        <argsstring>(const double &amp;aNum)</argsstring>
        <name>isNaN</name>
        <qualifiedname>rr::isNaN</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>aNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="372" column="6" bodyfile="rrUtils.cpp" bodystart="372" bodyend="379" declfile="rrUtils.h" declline="41" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1aafbb1cf0975ea5cbd44ec0d1921866e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::isNullOrEmpty</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>isNullOrEmpty</name>
        <qualifiedname>rr::isNullOrEmpty</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="381" column="6" bodyfile="rrUtils.cpp" bodystart="381" bodyend="384" declfile="rrUtils.h" declline="42" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a700b2f6e72a8beaf30a7fa41cd3b8a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>RR_DECLSPEC void rr::pause</definition>
        <argsstring>(bool doIt, const std::string &amp;msg)</argsstring>
        <name>pause</name>
        <qualifiedname>rr::pause</qualifiedname>
        <param>
          <type>bool</type>
          <declname>doIt</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="386" column="6" bodyfile="rrUtils.cpp" bodystart="386" bodyend="406" declfile="rrUtils.h" declline="43" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a706024111a960d6c69a6c52c5ff4cfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>RR_DECLSPEC void rr::createTestSuiteFileNameParts</definition>
        <argsstring>(int caseNr, const std::string &amp;postFixPart, std::string &amp;modelFilePath, std::string &amp;modelName, std::string &amp;settingsFName, std::string &amp;descriptionFName)</argsstring>
        <name>createTestSuiteFileNameParts</name>
        <qualifiedname>rr::createTestSuiteFileNameParts</qualifiedname>
        <param>
          <type>int</type>
          <declname>caseNr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>postFixPart</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>modelFilePath</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>modelName</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>settingsFName</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>descriptionFName</declname>
        </param>
        <briefdescription>
<para>check file access, just calls access, but on windows, access is _access, </para>
        </briefdescription>
        <detaileddescription>
<para>file modes: 00 Existence only 02 Write permission 04 Read permission 06 Read and write permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="441" column="6" bodyfile="rrUtils.cpp" bodystart="441" bodyend="453" declfile="rrUtils.h" declline="110" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a69b5061541f03bd882aa38462493e2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>RR_DECLSPEC std::string rr::getTestSuiteSubFolderName</definition>
        <argsstring>(int caseNr)</argsstring>
        <name>getTestSuiteSubFolderName</name>
        <qualifiedname>rr::getTestSuiteSubFolderName</qualifiedname>
        <param>
          <type>int</type>
          <declname>caseNr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="455" column="13" bodyfile="rrUtils.cpp" bodystart="455" bodyend="460" declfile="rrUtils.h" declline="111" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a8dc45a306e6142ba0ce2881b91733eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::hasUnimplementedTags</definition>
        <argsstring>(const std::string &amp;descriptionFileName, const string &amp;integrator)</argsstring>
        <name>hasUnimplementedTags</name>
        <qualifiedname>rr::hasUnimplementedTags</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>descriptionFileName</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>integrator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="462" column="6" bodyfile="rrUtils.cpp" bodystart="462" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1acac684bc6e25f111e45fbc09a65087be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::isSemiStochasticTest</definition>
        <argsstring>(const std::string &amp;descriptionFileName)</argsstring>
        <name>isSemiStochasticTest</name>
        <qualifiedname>rr::isSemiStochasticTest</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>descriptionFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="495" column="6" bodyfile="rrUtils.cpp" bodystart="495" bodyend="507" declfile="rrUtils.h" declline="115" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a602eeb02a9aeedd206f42dfabafb5ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::isFBCTest</definition>
        <argsstring>(const std::string &amp;descriptionFileName)</argsstring>
        <name>isFBCTest</name>
        <qualifiedname>rr::isFBCTest</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>descriptionFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="509" column="6" bodyfile="rrUtils.cpp" bodystart="509" bodyend="526" declfile="rrUtils.h" declline="117" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1aa1e38a29569597e4f5840d8c5b98b817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::createFolder</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>createFolder</name>
        <qualifiedname>rr::createFolder</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>check file access, just calls access, but on windows, access is _access, </para>
        </briefdescription>
        <detaileddescription>
<para>file modes: 00 Existence only 02 Write permission 04 Read permission 06 Read and write permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="549" column="6" bodyfile="rrUtils.cpp" bodystart="549" bodyend="561" declfile="rrUtils.h" declline="64" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1adab3ca838337b52f75719c14bf5326ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::createFile</definition>
        <argsstring>(const std::string &amp;fName, std::ios_base::openmode mode)</argsstring>
        <name>createFile</name>
        <qualifiedname>rr::createFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fName</declname>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="563" column="6" bodyfile="rrUtils.cpp" bodystart="563" bodyend="569" declfile="rrUtils.h" declline="137" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a3e712436e8a2d63e71021aa28b074b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::copyValues</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;dest, double *source, const int &amp;nrVals, const int &amp;startIndex)</argsstring>
        <name>copyValues</name>
        <qualifiedname>rr::copyValues</qualifiedname>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>nrVals</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>startIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="571" column="6" bodyfile="rrUtils.cpp" bodystart="571" bodyend="585" declfile="rrUtils.h" declline="122" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a74593febe25b33a5a4a222434a7ffdcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::copyStdVectorToCArray</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;src, double *dest, int size)</argsstring>
        <name>copyStdVectorToCArray</name>
        <qualifiedname>rr::copyStdVectorToCArray</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="587" column="6" bodyfile="rrUtils.cpp" bodystart="587" bodyend="600" declfile="rrUtils.h" declline="124" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a16c57a93c67d3d3bcc2c619ce2be3d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::copyStdVectorToCArray</definition>
        <argsstring>(const std::vector&lt; bool &gt; &amp;src, bool *dest, int size)</argsstring>
        <name>copyStdVectorToCArray</name>
        <qualifiedname>rr::copyStdVectorToCArray</qualifiedname>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="602" column="6" bodyfile="rrUtils.cpp" bodystart="602" bodyend="615" declfile="rrUtils.h" declline="125" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a869f2d6b16638b4853a5ff954fd66a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>RR_DECLSPEC std::vector&lt; double &gt; rr::createVector</definition>
        <argsstring>(const double *src, const int &amp;size)</argsstring>
        <name>createVector</name>
        <qualifiedname>rr::createVector</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="617" column="13" bodyfile="rrUtils.cpp" bodystart="617" bodyend="632" declfile="rrUtils.h" declline="127" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1aa96a49ec24bc766d0185ede97ee4f953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::copyCArrayToStdVector</definition>
        <argsstring>(const int *src, std::vector&lt; int &gt; &amp;dest, int size)</argsstring>
        <name>copyCArrayToStdVector</name>
        <qualifiedname>rr::copyCArrayToStdVector</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="634" column="6" bodyfile="rrUtils.cpp" bodystart="634" bodyend="648" declfile="rrUtils.h" declline="120" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a0095b8bd9e5a0bdd6c90b3e91e27c332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::copyCArrayToStdVector</definition>
        <argsstring>(const double *src, std::vector&lt; double &gt; &amp;dest, int size)</argsstring>
        <name>copyCArrayToStdVector</name>
        <qualifiedname>rr::copyCArrayToStdVector</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="650" column="6" bodyfile="rrUtils.cpp" bodystart="650" bodyend="664" declfile="rrUtils.h" declline="121" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1abc87cdbac229cf4a7f0bf7d8c20eaebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>RR_DECLSPEC bool rr::copyCArrayToStdVector</definition>
        <argsstring>(const bool *src, std::vector&lt; bool &gt; &amp;dest, int size)</argsstring>
        <name>copyCArrayToStdVector</name>
        <qualifiedname>rr::copyCArrayToStdVector</qualifiedname>
        <param>
          <type>const bool *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="666" column="6" bodyfile="rrUtils.cpp" bodystart="666" bodyend="680" declfile="rrUtils.h" declline="123" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1a1862b54c0ce8c2fa315dcc3e77641f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>RR_DECLSPEC double * rr::createVector</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;vec)</argsstring>
        <name>createVector</name>
        <qualifiedname>rr::createVector</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="682" column="8" bodyfile="rrUtils.cpp" bodystart="682" bodyend="696" declfile="rrUtils.h" declline="126" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8cpp_1ad1b5afe93a1b01cb209678d5657b6f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>RR_DECLSPEC int64_t rr::getMicroSeconds</definition>
        <argsstring>()</argsstring>
        <name>getMicroSeconds</name>
        <qualifiedname>rr::getMicroSeconds</qualifiedname>
        <briefdescription>
<para>Returns the timestamp expressed in microseconds since the Unix epoch, midnight, January 1, 1970. </para>
        </briefdescription>
        <detaileddescription>
<para>Note, this is a <emphasis>PRIVATE</emphasis> function, only reason why it is exported is so that the test suite can verify that it is increasing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.cpp" line="778" column="9" bodyfile="rrUtils.cpp" bodystart="778" bodyend="781" declfile="rrUtils.h" declline="147" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8h_1ac85d46c7532cfd8e404777694d3edb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RR_DECLSPEC size_t</type>
        <definition>RR_DECLSPEC size_t rr::populateFileSet</definition>
        <argsstring>(const std::string &amp;modelsFolder, std::set&lt; std::string &gt; &amp;models)</argsstring>
        <name>populateFileSet</name>
        <qualifiedname>rr::populateFileSet</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>modelsFolder</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>models</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.h" line="49" column="29" declfile="rrUtils.h" declline="49" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrUtils_8h_1a706169d28163976b921a2f3f48ac27f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RR_DECLSPEC bool</type>
        <definition>RR_DECLSPEC bool rr::hasUnimplementedTags</definition>
        <argsstring>(const std::string &amp;descriptionFileName, const std::string &amp;integrator)</argsstring>
        <name>hasUnimplementedTags</name>
        <qualifiedname>rr::hasUnimplementedTags</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>descriptionFileName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>integrator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrUtils.h" line="113" column="29" declfile="rrUtils.h" declline="113" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="rrVersionInfo_8cpp_1af920920c8778b635f231f004abe1733c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::getVersionStr</definition>
        <argsstring>(unsigned options)</argsstring>
        <name>getVersionStr</name>
        <qualifiedname>rr::getVersionStr</qualifiedname>
        <param>
          <type>unsigned</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrVersionInfo.cpp" line="17" column="13" bodyfile="rrVersionInfo.cpp" bodystart="17" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="rrVersionInfo_8cpp_1aea285419594d847528e94d7a4091862b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::getCopyrightStr</definition>
        <argsstring>()</argsstring>
        <name>getCopyrightStr</name>
        <qualifiedname>rr::getCopyrightStr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrVersionInfo.cpp" line="104" column="13" bodyfile="rrVersionInfo.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1a7f405d05e71fef7173969b80f7dfb1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::validateSBML</definition>
        <argsstring>(const std::string src, unsigned opt)</argsstring>
        <name>validateSBML</name>
        <qualifiedname>rr::validateSBML</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>src</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="23" column="17" bodyfile="SBMLValidator.cpp" bodystart="23" bodyend="28" declfile="SBMLValidator.h" declline="62" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1a5b49a666642e85d04ad07f7ce2ca18e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::validateSBML</definition>
        <argsstring>(SBMLDocument *doc, unsigned opt)</argsstring>
        <name>validateSBML</name>
        <qualifiedname>rr::validateSBML</qualifiedname>
        <param>
          <type>SBMLDocument *</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="30" column="17" bodyfile="SBMLValidator.cpp" bodystart="30" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1ab8b63e9bff22a1e32c3161072b648285" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::hasInitialAssignment</definition>
        <argsstring>(const SpeciesReference *s)</argsstring>
        <name>hasInitialAssignment</name>
        <qualifiedname>rr::hasInitialAssignment</qualifiedname>
        <param>
          <type>const SpeciesReference *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="63" column="17" bodyfile="SBMLValidator.cpp" bodystart="63" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1ad940221265fda26be8825c8a17683ed5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::hasAssignmentRule</definition>
        <argsstring>(const SpeciesReference *s)</argsstring>
        <name>hasAssignmentRule</name>
        <qualifiedname>rr::hasAssignmentRule</qualifiedname>
        <param>
          <type>const SpeciesReference *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="77" column="17" bodyfile="SBMLValidator.cpp" bodystart="77" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1ad9b66b84d1c41deb4ab5390db8cf44c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool rr::isStoichDefined</definition>
        <argsstring>(const SpeciesReference *s)</argsstring>
        <name>isStoichDefined</name>
        <qualifiedname>rr::isStoichDefined</qualifiedname>
        <param>
          <type>const SpeciesReference *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="92" column="17" bodyfile="SBMLValidator.cpp" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1aaaacdf338bcb998b9133e5c0519864be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::setSpeciesRefId</definition>
        <argsstring>(SpeciesReference *sr, const std::string &amp;idbase)</argsstring>
        <name>setSpeciesRefId</name>
        <qualifiedname>rr::setSpeciesRefId</qualifiedname>
        <param>
          <type>SpeciesReference *</type>
          <declname>sr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>idbase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="102" column="10" bodyfile="SBMLValidator.cpp" bodystart="102" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8cpp_1a38acf99648a691ac1b16d67e76e8646b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::fixMissingStoichAndMath</definition>
        <argsstring>(libsbml::SBMLDocument *sbml)</argsstring>
        <name>fixMissingStoichAndMath</name>
        <qualifiedname>rr::fixMissingStoichAndMath</qualifiedname>
        <param>
          <type>libsbml::SBMLDocument *</type>
          <declname>sbml</declname>
        </param>
        <briefdescription>
<para>Adds missing stoichiometry information and removes elements with no math. </para>
        </briefdescription>
        <detaileddescription>
<para>Assumes unit stoichiometry where not specified <simplesect kind="return"><para>SBML std::string with stoich fixed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.cpp" line="131" column="10" bodyfile="SBMLValidator.cpp" bodystart="131" bodyend="238" declfile="SBMLValidator.h" declline="73" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="SBMLValidator_8h_1a4c7b90b7091b945d8fb5f384fbc433b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::validateSBML</definition>
        <argsstring>(libsbml::SBMLDocument *doc, unsigned opt=VALIDATE_IDENTIFIER|VALIDATE_GENERAL|VALIDATE_MATHML)</argsstring>
        <name>validateSBML</name>
        <qualifiedname>rr::validateSBML</qualifiedname>
        <param>
          <type>libsbml::SBMLDocument *</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>opt</declname>
          <defval>VALIDATE_IDENTIFIER|VALIDATE_GENERAL|VALIDATE_MATHML</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SBMLValidator.h" line="65" column="17" declfile="SBMLValidator.h" declline="65" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rrCCompiler_8cpp_1a602ee4c4cf4696f30ae3914231a2de1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::getCompilerMessages</definition>
        <argsstring>()</argsstring>
        <name>getCompilerMessages</name>
        <qualifiedname>rr::getCompilerMessages</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCCompiler.cpp" line="406" column="13" bodyfile="c/rrCCompiler.cpp" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="rrCModelDataUtil_8cpp_1abdc46d37935e3b8673e0f5039338c70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>RR_DECLSPEC void rr::initModelData</definition>
        <argsstring>(ModelData &amp;data)</argsstring>
        <name>initModelData</name>
        <qualifiedname>rr::initModelData</qualifiedname>
        <param>
          <type><ref refid="structSModelData" kindref="compound">ModelData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>zero out the memory occupied by a ModelData struct, equivalent to memset(&amp;data, 0, sizeof(ModelData)); </para>
        </briefdescription>
        <detaileddescription>
<para>performs NO allocaation of memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCModelDataUtil.cpp" line="46" column="6" bodyfile="c/rrCModelDataUtil.cpp" bodystart="46" bodyend="50" declfile="c/rrCModelDataUtil.h" declline="32" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrCModelDataUtil_8cpp_1a5396270ef5818205220c3adf81af3aa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * rr::rrCalloc</definition>
        <argsstring>(size_t nmemb, size_t size)</argsstring>
        <name>rrCalloc</name>
        <qualifiedname>rr::rrCalloc</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>many implementations have a rrCalloc which returns a non zero pointer if a zero size data block is requested, this returns zero which makes debugging easier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCModelDataUtil.cpp" line="57" column="13" bodyfile="c/rrCModelDataUtil.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="rrCModelDataUtil_8cpp_1ae075bf7ea3c36e31bf96732975fdc3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RR_DECLSPEC rr::allocModelDataBuffers</definition>
        <argsstring>(ModelData &amp;data, const std::string &amp;modelName)</argsstring>
        <name>allocModelDataBuffers</name>
        <qualifiedname>rr::allocModelDataBuffers</qualifiedname>
        <param>
          <type><ref refid="structSModelData" kindref="compound">ModelData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>modelName</declname>
        </param>
        <briefdescription>
<para>Allocate memory for all the data buffers in a ModelData structure, (with the exception of the stoichiometry struct), based on what each buffer size variable indicates, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>if data.ySize is 10, data.y will now point to a length 10 double array. The data.modelName field will be a newly allocated null terminated c std::string.</para>
<para>The ModelData structure buffers should be freed with freeModelDataBuffers.</para>
<para>The following arrays are also allocated here, the model populates these with pointers to static strings.</para>
<para>char** variableTable; char** boundaryTable; char** globalParameterTable; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCModelDataUtil.cpp" line="62" column="6" bodyfile="c/rrCModelDataUtil.cpp" bodystart="62" bodyend="101" declfile="c/rrCModelDataUtil.h" declline="50" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrCModelDataUtil_8cpp_1a496ee94670b38706eedda7e8a8bcf6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>RR_DECLSPEC std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ModelData &amp;data)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structSModelData" kindref="compound">ModelData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>dump the ModelData to an output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCModelDataUtil.cpp" line="104" column="1" bodyfile="c/rrCModelDataUtil.cpp" bodystart="104" bodyend="190" declfile="c/rrCModelDataUtil.h" declline="22" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrCModelDataUtil_8cpp_1af3b8e5f621c195103b54ff87f1812bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RR_DECLSPEC rr::freeModelDataBuffers</definition>
        <argsstring>(ModelData &amp;data)</argsstring>
        <name>freeModelDataBuffers</name>
        <qualifiedname>rr::freeModelDataBuffers</qualifiedname>
        <param>
          <type><ref refid="structSModelData" kindref="compound">ModelData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Free all the data referenced by the ModelData pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>Does NOT free the ModelData itself, ONLY the buffer data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCModelDataUtil.cpp" line="192" column="7" bodyfile="c/rrCModelDataUtil.cpp" bodystart="192" bodyend="222" declfile="c/rrCModelDataUtil.h" declline="56" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrCModelGenerator_8cpp_1ad1e6f806b0df7d48bfa1ed1624ca6443" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::getSupportCodeDir</definition>
        <argsstring>(const std::string supdir)</argsstring>
        <name>getSupportCodeDir</name>
        <qualifiedname>rr::getSupportCodeDir</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>supdir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCModelGenerator.cpp" line="26" column="20" bodyfile="c/rrCModelGenerator.cpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="rrCompiledExecutableModel_8h_1ab22af03490427c18693b07d646f104e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>typedef</type>
        <definition>typedef rr::void</definition>
        <argsstring>(RR_CDECL *c_void_MDS)(ModelData *)</argsstring>
        <name>void</name>
        <qualifiedname>rr::void</qualifiedname>
        <param>
          <type>RR_CDECL *</type>
          <declname>c_void_MDS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrCompiledExecutableModel.h" line="23" column="9" declfile="c/rrCompiledExecutableModel.h" declline="23" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="rrEvent_8cpp_1abf3d9c52411e9ca4aa82651bf95f781a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::operator==</definition>
        <argsstring>(const Event &amp;e1, const Event &amp;e2)</argsstring>
        <name>operator==</name>
        <qualifiedname>rr::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classrr_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrEvent.cpp" line="50" column="6" bodyfile="c/rrEvent.cpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="rrEvent_8cpp_1a22a1ea44cf8f7bc5ecb594c2e9a95ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::operator&lt;</definition>
        <argsstring>(const Event &amp;e1, const Event &amp;e2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>rr::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classrr_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrEvent.cpp" line="59" column="1" bodyfile="c/rrEvent.cpp" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="rrEvent_8cpp_1a20e24001bbb695112dff07d59eea47ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>RR_DECLSPEC std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Event &amp;anEvent)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Event" kindref="compound">Event</ref> &amp;</type>
          <declname>anEvent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrEvent.cpp" line="70" column="1" bodyfile="c/rrEvent.cpp" bodystart="70" bodyend="81" declfile="c/rrEvent.h" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrHashTable_8cpp_1a56c658f65c7e1187914b7869fe78b8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, StringSymbolHashTable &amp;hash)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="classrr_1_1StringSymbolHashTable" kindref="compound">StringSymbolHashTable</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrHashTable.cpp" line="22" column="1" bodyfile="c/rrHashTable.cpp" bodystart="22" bodyend="31" declfile="c/rrHashTable.h" declline="26" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1af0fbb33672f6ec019b15ca4d76bb4df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>SymbolList rr::test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <qualifiedname>rr::test1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="27" column="12" bodyfile="c/rrModelSymbols.cpp" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a306ac65c11f87292c11f72228a8f05d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>SymbolList rr::test2</definition>
        <argsstring>(SymbolList &amp;s)</argsstring>
        <name>test2</name>
        <qualifiedname>rr::test2</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="31" column="12" bodyfile="c/rrModelSymbols.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a38debb3237ff03fe38522b144cfe4608" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1StringList" kindref="compound">StringList</ref></type>
        <definition>static StringList rr::readIndependentSpeciesList</definition>
        <argsstring>(const LibStructural &amp;libs, bool mComputeAndAssignConsevationLaws)</argsstring>
        <name>readIndependentSpeciesList</name>
        <qualifiedname>rr::readIndependentSpeciesList</qualifiedname>
        <param>
          <type>const LibStructural &amp;</type>
          <declname>libs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mComputeAndAssignConsevationLaws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="486" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="486" bodyend="501" declfile="c/rrModelSymbols.cpp" declline="165" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a478195c8b7189dab8315fbf40f26b210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1StringList" kindref="compound">StringList</ref></type>
        <definition>static StringList rr::readDependentSpeciesList</definition>
        <argsstring>(const LibStructural &amp;libs, bool mComputeAndAssignConsevationLaws)</argsstring>
        <name>readDependentSpeciesList</name>
        <qualifiedname>rr::readDependentSpeciesList</qualifiedname>
        <param>
          <type>const LibStructural &amp;</type>
          <declname>libs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mComputeAndAssignConsevationLaws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="503" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="503" bodyend="507" declfile="c/rrModelSymbols.cpp" declline="166" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1ad8119cb82f74b4354bb1aa5207c8ae16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readCompartments</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readCompartments</name>
        <qualifiedname>rr::readCompartments</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="318" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="318" bodyend="335" declfile="c/rrModelSymbols.cpp" declline="167" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a89359f16a17fc87d01f7f8f96943fe98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readBoundarySpecies</definition>
        <argsstring>(NOMSupport &amp;nom, const SymbolList &amp;compartmentList)</argsstring>
        <name>readBoundarySpecies</name>
        <qualifiedname>rr::readBoundarySpecies</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>compartmentList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="339" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="339" bodyend="404" declfile="c/rrModelSymbols.cpp" declline="168" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1aeb00febe028b6a9d6fdc3ed63e2c9e8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readConservationList</definition>
        <argsstring>(const int &amp;numDependentSpecies)</argsstring>
        <name>readConservationList</name>
        <qualifiedname>rr::readConservationList</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>numDependentSpecies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="474" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="474" bodyend="483" declfile="c/rrModelSymbols.cpp" declline="169" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1ad91a594d1d3f8f15e1e4793d46918375" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readFloatingSpeciesConcentrationList</definition>
        <argsstring>(NOMSupport &amp;nom, ls::LibStructural &amp;libs, bool mComputeAndAssignConsevationLaws, const SymbolList &amp;mCompartmentList)</argsstring>
        <name>readFloatingSpeciesConcentrationList</name>
        <qualifiedname>rr::readFloatingSpeciesConcentrationList</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <param>
          <type>ls::LibStructural &amp;</type>
          <declname>libs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mComputeAndAssignConsevationLaws</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>mCompartmentList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="170" column="19" declfile="c/rrModelSymbols.cpp" declline="170" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a9f3c363679715b99950b2cced63f2f4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readGlobalParameters</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readGlobalParameters</name>
        <qualifiedname>rr::readGlobalParameters</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="807" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="807" bodyend="828" declfile="c/rrModelSymbols.cpp" declline="172" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1af5060658de5711f150aaab14127e7a73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readModifiableSpeciesReferences</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readModifiableSpeciesReferences</name>
        <qualifiedname>rr::readModifiableSpeciesReferences</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="852" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="852" bodyend="914" declfile="c/rrModelSymbols.cpp" declline="173" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1af90b1ed97e7616d9dfa22b01aaf0a4d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readReactionList</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readReactionList</name>
        <qualifiedname>rr::readReactionList</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="919" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="919" bodyend="929" declfile="c/rrModelSymbols.cpp" declline="174" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a0b5915c51fcb66fe1f1a4be3c708c021" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>static std::vector&lt; int &gt; rr::readLocalParameterDimensions</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readLocalParameterDimensions</name>
        <qualifiedname>rr::readLocalParameterDimensions</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="931" column="20" bodyfile="c/rrModelSymbols.cpp" bodystart="931" bodyend="942" declfile="c/rrModelSymbols.cpp" declline="175" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1ade39cbb19de2d11f288df28d2a6eba97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &gt;</type>
        <definition>static std::vector&lt; SymbolList &gt; rr::readLocalParameterList</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readLocalParameterList</name>
        <qualifiedname>rr::readLocalParameterList</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="944" column="20" bodyfile="c/rrModelSymbols.cpp" bodystart="944" bodyend="965" declfile="c/rrModelSymbols.cpp" declline="176" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a11bc23e7ae1601b1693d29e2fc756421" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1StringList" kindref="compound">StringList</ref></type>
        <definition>StringList rr::readFunctionNames</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readFunctionNames</name>
        <qualifiedname>rr::readFunctionNames</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="997" column="12" bodyfile="c/rrModelSymbols.cpp" bodystart="997" bodyend="1020" declfile="c/rrModelSymbols.cpp" declline="177" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1aed21405c88a5fa639dc22d428ff3bebb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1StringList" kindref="compound">StringList</ref></type>
        <definition>StringList rr::readFunctionParameters</definition>
        <argsstring>(NOMSupport &amp;nom)</argsstring>
        <name>readFunctionParameters</name>
        <qualifiedname>rr::readFunctionParameters</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="1022" column="12" bodyfile="c/rrModelSymbols.cpp" bodystart="1022" bodyend="1047" declfile="c/rrModelSymbols.cpp" declline="178" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a33f0578b9cb91921f56c9d9989b3ff6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::readModelName</definition>
        <argsstring>(const NOMSupport &amp;nom)</argsstring>
        <name>readModelName</name>
        <qualifiedname>rr::readModelName</qualifiedname>
        <param>
          <type>const <ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="304" column="20" bodyfile="c/rrModelSymbols.cpp" bodystart="304" bodyend="313" declfile="c/rrModelSymbols.cpp" declline="179" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a2450f3abc2d37dc6c5387321a064caa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1IntStringHashTable" kindref="compound">IntStringHashTable</ref></type>
        <definition>static IntStringHashTable rr::readRateRules</definition>
        <argsstring>(NOMSupport &amp;nom, const SymbolList &amp;floatingSpeciesConcentrationList, const SymbolList &amp;globalParameterList, const SymbolList &amp;boundarySpeciesList, const SymbolList &amp;compartmentList, const SymbolList &amp;modifiableSpeciesReferenceList)</argsstring>
        <name>readRateRules</name>
        <qualifiedname>rr::readRateRules</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>floatingSpeciesConcentrationList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>globalParameterList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>boundarySpeciesList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>compartmentList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>modifiableSpeciesReferenceList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="758" column="27" bodyfile="c/rrModelSymbols.cpp" bodystart="758" bodyend="802" declfile="c/rrModelSymbols.cpp" declline="180" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1a50fa45a6e3b4f01f1b786686fbb4cad9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref></type>
        <definition>static SymbolList rr::readFloatingSpeciesConcentrationList</definition>
        <argsstring>(NOMSupport &amp;nom, LibStructural &amp;libs, bool mComputeAndAssignConsevationLaws, const SymbolList &amp;mCompartmentList)</argsstring>
        <name>readFloatingSpeciesConcentrationList</name>
        <qualifiedname>rr::readFloatingSpeciesConcentrationList</qualifiedname>
        <param>
          <type><ref refid="classrr_1_1NOMSupport" kindref="compound">NOMSupport</ref> &amp;</type>
          <declname>nom</declname>
        </param>
        <param>
          <type>LibStructural &amp;</type>
          <declname>libs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mComputeAndAssignConsevationLaws</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>mCompartmentList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="509" column="19" bodyfile="c/rrModelSymbols.cpp" bodystart="509" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="rrModelSymbols_8cpp_1aeaedf027cbf0a6a51572a6cc887e7741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rr::findSymbol</definition>
        <argsstring>(const std::string &amp;varName, const SymbolList &amp;floatingSpeciesConcentrationList, const SymbolList &amp;globalParameterList, const SymbolList &amp;boundarySpeciesList, const SymbolList &amp;compartmentList, const SymbolList &amp;modifiableSpeciesReferenceList)</argsstring>
        <name>findSymbol</name>
        <qualifiedname>rr::findSymbol</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>varName</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>floatingSpeciesConcentrationList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>globalParameterList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>boundarySpeciesList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>compartmentList</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SymbolList" kindref="compound">SymbolList</ref> &amp;</type>
          <declname>modifiableSpeciesReferenceList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrModelSymbols.cpp" line="724" column="20" bodyfile="c/rrModelSymbols.cpp" bodystart="724" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="rrNOMSupport_8cpp_1ad0422ec5914fc066b04c271fa74d1222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::SBML_formulaToStdString</definition>
        <argsstring>(const ASTNode *tree)</argsstring>
        <name>SBML_formulaToStdString</name>
        <qualifiedname>rr::SBML_formulaToStdString</qualifiedname>
        <param>
          <type>const ASTNode *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>SBML_formulaToString is used all over the place here, SBML_formulaToString returns a char* that MUST BE FREED!!! </para>
        </briefdescription>
        <detaileddescription>
<para>This function frees the std::string and returns a std::string with its contents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrNOMSupport.cpp" line="27" column="13" bodyfile="c/rrNOMSupport.cpp" bodystart="27" bodyend="33" declfile="c/rrNOMSupport.h" declline="333" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrNOMSupport_8cpp_1ac674ad8d8552e2691169706ec74f7af6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rr::changeSymbol</definition>
        <argsstring>(ASTNode *node, const std::string &amp;time, const int &amp;targetType)</argsstring>
        <name>changeSymbol</name>
        <qualifiedname>rr::changeSymbol</qualifiedname>
        <param>
          <type>ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>targetType</declname>
        </param>
        <briefdescription>
<para>some helper functions for changeSymbol. </para>
        </briefdescription>
        <detaileddescription>
<para>These are private symbols inside this file so they are not even visible anywhere else.</para>
<para>Recursivly go through a ASTNode tree and change the name to time </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrNOMSupport.cpp" line="334" column="13" bodyfile="c/rrNOMSupport.cpp" bodystart="334" bodyend="342" declfile="c/rrNOMSupport.cpp" declline="44" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrNOMSupport_8cpp_1af82e4b9b98f94561012d26545c7451a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MathT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void rr::changeSymbolT</definition>
        <argsstring>(MathT *thing, const std::string &amp;sTimeSymbol, const int &amp;targetType)</argsstring>
        <name>changeSymbolT</name>
        <qualifiedname>rr::changeSymbolT</qualifiedname>
        <param>
          <type>MathT *</type>
          <declname>thing</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sTimeSymbol</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>targetType</declname>
        </param>
        <briefdescription>
<para>Many sbml classes have isSetMath, setMath and getMath methods. </para>
        </briefdescription>
        <detaileddescription>
<para>This template replaces the name of each ASTNode item with sTimeSymbol </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrNOMSupport.cpp" line="346" column="13" bodyfile="c/rrNOMSupport.cpp" bodystart="346" bodyend="355" declfile="c/rrNOMSupport.cpp" declline="51" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrRule_8cpp_1a2a6f7d15efea5f29f372fa1724c32513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RuleType</type>
        <definition>RuleType rr::GetRuleTypeFromString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>GetRuleTypeFromString</name>
        <qualifiedname>rr::GetRuleTypeFromString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrRule.cpp" line="43" column="10" bodyfile="c/rrRule.cpp" bodystart="43" bodyend="61" declfile="c/rrRule.h" declline="12" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="rrSBMLSymbol_8cpp_1ac29b96b50f2650562cce383d5da7bb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>RR_DECLSPEC std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const SBMLSymbol &amp;symbol)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1SBMLSymbol" kindref="compound">SBMLSymbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrSBMLSymbol.cpp" line="91" column="1" bodyfile="c/rrSBMLSymbol.cpp" bodystart="91" bodyend="110" declfile="c/rrSBMLSymbol.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rrStringList_8cpp_1abdecbbc422014c2b0fdc8784e57c865c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const StringList &amp;list)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1StringList" kindref="compound">StringList</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrStringList.cpp" line="218" column="1" bodyfile="c/rrStringList.cpp" bodystart="218" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="rrStringListContainer_8cpp_1ab2951377b85e539d20f7b3aab5613a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const StringListContainer &amp;list)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1StringListContainer" kindref="compound">StringListContainer</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrStringListContainer.cpp" line="112" column="1" bodyfile="c/rrStringListContainer.cpp" bodystart="112" bodyend="121" declfile="c/rrStringListContainer.h" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rrSymbol_8cpp_1a1d622fa234d2f3799b7cbc5d17db96f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rr::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, const Symbol &amp;symbol)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>rr::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Symbol" kindref="compound">Symbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="c/rrSymbol.cpp" line="43" column="1" bodyfile="c/rrSymbol.cpp" bodystart="43" bodyend="47" declfile="c/rrSymbol.h" declline="79" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="_Variant.cpp" line="25" column="1"/>
  </compounddef>
</doxygen>
