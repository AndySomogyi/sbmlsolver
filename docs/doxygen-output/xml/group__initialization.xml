<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__initialization" kind="group">
    <compoundname>initialization</compoundname>
    <title>Library initialization and termination methods</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__initialization_1ga3285113641ecf1dc35c39fceb39b60fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C_DECL_SPEC <ref refid="rrc__types_8h_1a1d68f0592372208fa5a5f2799ea4b3ae" kindref="member">RRHandle</ref> rrcCallConv</type>
        <definition>C_DECL_SPEC RRHandle rrcCallConv createRRInstance</definition>
        <argsstring>(void)</argsstring>
        <name>createRRInstance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize a new roadRunner instance and return a handle to it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a RoadRunner instance, returns null if it fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="59" column="34" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="159" bodyend="168" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="59" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__initialization_1ga0bd8e459a637346cdf196f91148015ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C_DECL_SPEC <ref refid="rrc__types_8h_1a1d68f0592372208fa5a5f2799ea4b3ae" kindref="member">RRHandle</ref> rrcCallConv</type>
        <definition>C_DECL_SPEC RRHandle rrcCallConv createRRInstanceEx</definition>
        <argsstring>(const char *tempFolder, const char *compiler)</argsstring>
        <name>createRRInstanceEx</name>
        <param>
          <type>const char *</type>
          <declname>tempFolder</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>compiler</declname>
        </param>
        <briefdescription>
<para>Initialize a new roadRunner instance and return a handle to it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tempFolder</parametername>
</parameternamelist>
<parameterdescription>
<para>set roadrunners temporary folder </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">compiler</parametername>
</parameternamelist>
<parameterdescription>
<para>may be NULL, if NULL, uses default compiler. If LLVM build is enabled, setting compiler to &quot;llvm&quot; enables llvm based model generation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a RoadRunner instance, returns null if it fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="71" column="34" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="170" bodyend="196" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="71" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__initialization_1gae0b2f65464742bba3beb0ad38dcdd863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C_DECL_SPEC bool rrcCallConv</type>
        <definition>C_DECL_SPEC bool rrcCallConv freeRRInstance</definition>
        <argsstring>(RRHandle handle)</argsstring>
        <name>freeRRInstance</name>
        <param>
          <type><ref refid="rrc__types_8h_1a1d68f0592372208fa5a5f2799ea4b3ae" kindref="member">RRHandle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Free the roadRunner instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a RoadRunner instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="78" column="30" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="3075" bodyend="3083" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="78" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__initialization_1gad1a68a41c939d388df3d8cf1f14023a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* getInstallFolder</definition>
        <argsstring>(void)</argsstring>
        <name>getInstallFolder</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the folder in which the RoadRunner wrappers is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to string holding the install folder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="85" column="6" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="198" bodyend="205" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__initialization_1gabe314ab514c04cd902c078b864f22a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C_DECL_SPEC bool rrcCallConv</type>
        <definition>C_DECL_SPEC bool rrcCallConv setInstallFolder</definition>
        <argsstring>(const char *folder)</argsstring>
        <name>setInstallFolder</name>
        <param>
          <type>const char *</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
<para>Set the internal string containing the folder in where the RoadRunner C wrappers is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">folder</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to string holding the install folder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="93" column="32" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="207" bodyend="212" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="93" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__initialization_1gacb21c6ed7c891635f41cfd43e99cda2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C_DECL_SPEC bool rrcCallConv</type>
        <definition>C_DECL_SPEC bool rrcCallConv setComputeAndAssignConservationLaws</definition>
        <argsstring>(RRHandle handle, const bool On_Or_Off)</argsstring>
        <name>setComputeAndAssignConservationLaws</name>
        <param>
          <type><ref refid="rrc__types_8h_1a1d68f0592372208fa5a5f2799ea4b3ae" kindref="member">RRHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>On_Or_Off</declname>
        </param>
        <briefdescription>
<para>Enable or disable conservation analysis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a RoadRunner instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">On_Or_Off</parametername>
</parameternamelist>
<parameterdescription>
<para>Set true to switch on conservation analysis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="324" column="30" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="313" bodyend="325" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="324" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__initialization_1ga3e9ca24ab5e08fa5a5c70aad4d9d255c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>C_DECL_SPEC int rrcCallConv</type>
        <definition>C_DECL_SPEC int rrcCallConv getComputeAndAssignConservationLaws</definition>
        <argsstring>(RRHandle handle, int *value)</argsstring>
        <name>getComputeAndAssignConservationLaws</name>
        <param>
          <type><ref refid="rrc__types_8h_1a1d68f0592372208fa5a5f2799ea4b3ae" kindref="member">RRHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the value of the moiety conservation setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a RoadRunner instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>A place to store the value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vsts/work/1/s/wrappers/C/rrc_api.h" line="333" column="29" bodyfile="/home/vsts/work/1/s/wrappers/C/rrc_api.cpp" bodystart="327" bodyend="334" declfile="/home/vsts/work/1/s/wrappers/C/rrc_api.h" declline="333" declcolumn="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Initialize library and terminate library instance. </para>
    </briefdescription>
    <detaileddescription>
<para>RoadRunner C wrappers Library</para>
<sect1 id="group__initialization_1intro_sec">
<title>Introduction</title>
<para>RoadRunner is a SBML compliant high performance and portable simulation engine for systems and synthetic biology. To run a simple SBML model and generate time series data we would write the following code:</para>
<para><programlisting><codeline><highlight class="normal">#undef<sp/>__cplusplus</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>STATIC_RRC</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdlib.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_api.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_types.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_utilities.h&quot;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main<sp/>(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RRHandle<sp/>rrHandle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RRCDataPtr<sp/>result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf<sp/>(&quot;Starting<sp/>Test<sp/>Program<sp/>%s\n&quot;,<sp/>argv[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rrHandle<sp/>=<sp/>createRRInstance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!loadSBMLFromFile<sp/>(rrHandle,<sp/>&quot;feedback.xml&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;Failed<sp/>to<sp/>load<sp/>model:<sp/>%s\n&quot;,<sp/>getLastError<sp/>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getchar<sp/>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>simulateEx<sp/>(rrHandle,<sp/>0,<sp/>10,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf<sp/>(rrDataToString<sp/>(result));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>freeRRCData(result);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>getchar<sp/>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>More complex example, using C wrappers: <programlisting><codeline><highlight class="normal">#undef<sp/>__cplusplus</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>STATIC_RRC</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdlib.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_api.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_types.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_utilities.h&quot;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main<sp/>(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RRHandle<sp/>rrHandle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RRCDataPtr<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>int<sp/>index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>int<sp/>col;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>int<sp/>row;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf<sp/>(&quot;Starting<sp/>Test<sp/>Program<sp/>%s\n&quot;,<sp/>argv[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>rrHandle<sp/>=<sp/>createRRInstance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(!loadSBML<sp/>(rrHandle,<sp/>&quot;feedback.xml&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;Error<sp/>while<sp/>loading<sp/>SBML<sp/>file\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;Error<sp/>message:<sp/>%s\n&quot;,<sp/>getLastError());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getchar<sp/>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>simulateEx<sp/>(rrHandle,<sp/>0,<sp/>10,<sp/>10);<sp/><sp/>//<sp/>start<sp/>time,<sp/>end<sp/>time,<sp/>and<sp/>number<sp/>of<sp/>points</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Print<sp/>out<sp/>column<sp/>headers...<sp/>typically<sp/>time<sp/>and<sp/>species.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>for<sp/>(col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>result-&gt;CSize;<sp/>col++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;%10s&quot;,<sp/>result-&gt;ColumnHeaders[index++]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(col<sp/>&lt;<sp/>result-&gt;CSize<sp/>-<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;\t&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf<sp/>(&quot;\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Print<sp/>out<sp/>the<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>result-&gt;RSize;<sp/>row++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>result-&gt;CSize;<sp/>col++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;%10f&quot;,<sp/>result-&gt;Data[index++]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(col<sp/>&lt;<sp/>result-&gt;CSize<sp/>-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(&quot;\t&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf<sp/>(&quot;\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//Cleanup</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>freeRRCData<sp/>(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>freeRRInstance<sp/>(rrHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>getchar<sp/>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>exit<sp/>(0);</highlight></codeline>
</programlisting></para>
<para>Would create output as shown below:</para>
<para><programlisting><codeline><highlight class="normal">Starting<sp/>Test<sp/>Program:<sp/>&lt;File<sp/>path<sp/>Here&gt;</highlight></codeline>
<codeline><highlight class="normal">Notice:<sp/>Creating<sp/>C<sp/>based<sp/>model<sp/>generator<sp/>using<sp/>..\compilers\tcc\tcc.exe<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[S1]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[S2]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[S3]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[S4]</highlight></codeline>
<codeline><highlight class="normal"><sp/>0.000000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.000000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.000000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.000000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.000000</highlight></codeline>
<codeline><highlight class="normal"><sp/>1.111111<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.295975<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.677255<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.121418<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.074708</highlight></codeline>
<codeline><highlight class="normal"><sp/>2.222222<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.971810<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.658970<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.841065<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.192728</highlight></codeline>
<codeline><highlight class="normal"><sp/>3.333333<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.137340<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.501854<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.295138<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.444883</highlight></codeline>
<codeline><highlight class="normal"><sp/>4.444445<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.141470<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.200937<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.549172<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.505662</highlight></codeline>
<codeline><highlight class="normal"><sp/>5.555556<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.831017<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.317792<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.129982<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.351300</highlight></codeline>
<codeline><highlight class="normal"><sp/>6.666667<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.306310<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.775477<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.304950<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.952076</highlight></codeline>
<codeline><highlight class="normal"><sp/>7.777778<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.193459<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.268986<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.628542<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.483161</highlight></codeline>
<codeline><highlight class="normal"><sp/>8.888889<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.566864<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.219950<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.105718<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.370199</highlight></codeline>
<codeline><highlight class="normal">10.000000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.269437<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.678127<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.199353<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.868247</highlight></codeline>
</programlisting> Note that if you are using a C++ compiler, you&apos;ll need to change the #include lines of both above programs to: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdlib.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_api.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_types.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rrc_utilities.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>rrc;</highlight></codeline>
</programlisting> </para>
</sect1>
<sect1 id="group__initialization_1install_sec">
<title>Installation</title>
<para>Installation documentation is provided at libRoadRunner.org.</para>
</sect1>
<sect1 id="group__initialization_1license_sec">
<title>License</title>
<para>Copyright (C) 2012 University of Washington, Seattle, WA, USA</para>
<para>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <verbatim>http://www.apache.org/licenses/LICENSE-2.0
</verbatim></para>
<para>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</para>
<para>In plain english this means:</para>
<para>You CAN freely download and use this software, in whole or in part, for personal, company internal, or commercial purposes;</para>
<para>You CAN use the software in packages or distributions that you create.</para>
<para>You SHOULD include a copy of the license in any redistribution you may make;</para>
<para>You are NOT required include the source of software, or of any modifications you may have made to it, in any redistribution you may assemble that includes it.</para>
<para>YOU CANNOT:</para>
<para>redistribute any piece of this software without proper attribution; </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
