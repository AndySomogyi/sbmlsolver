<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="KinsolSteadyStateSolver_8cpp" kind="file" language="C++">
    <compoundname>KinsolSteadyStateSolver.cpp</compoundname>
    <includes refid="KinsolSteadyStateSolver_8h" local="yes">KinsolSteadyStateSolver.h</includes>
    <includes local="no">cassert</includes>
    <includes refid="KinsolErrHandler_8h" local="yes">KinsolErrHandler.h</includes>
    <includes refid="rrConfig_8h" local="yes">rrConfig.h</includes>
    <includes refid="CVODEIntegrator_8h" local="yes">CVODEIntegrator.h</includes>
    <incdepgraph>
      <node id="35">
        <label>list</label>
      </node>
      <node id="32">
        <label>rrExecutableModel.h</label>
        <link refid="rrExecutableModel_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>functional</label>
      </node>
      <node id="16">
        <label>limits</label>
      </node>
      <node id="33">
        <label>sbml/SBMLDocument.h</label>
      </node>
      <node id="1">
        <label>KinsolSteadyStateSolver.cpp</label>
        <link refid="KinsolSteadyStateSolver_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Registrar.h</label>
        <link refid="Registrar_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Integrator.h</label>
        <link refid="Integrator_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>stdint.h</label>
      </node>
      <node id="13">
        <label>variant</label>
      </node>
      <node id="11">
        <label>Dictionary.h</label>
        <link refid="Dictionary_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>rrOSSpecifics.h</label>
        <link refid="rrOSSpecifics_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdexcept</label>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="4">
        <label>sundials/sundials_types.h</label>
      </node>
      <node id="9">
        <label>rrExporter.h</label>
        <link refid="rrExporter_8h_source"/>
      </node>
      <node id="27">
        <label>tr1proxy/rr_unordered_map.h</label>
      </node>
      <node id="7">
        <label>rrLogger.h</label>
        <link refid="rrLogger_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>setting_t.h</label>
        <link refid="setting__t_8h_source"/>
      </node>
      <node id="37">
        <label>KinsolErrHandler.h</label>
        <link refid="KinsolErrHandler_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>KinsolSteadyStateSolver.h</label>
        <link refid="KinsolSteadyStateSolver_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>exception</label>
      </node>
      <node id="36">
        <label>ostream</label>
      </node>
      <node id="30">
        <label>RegistrationFactory.h</label>
        <link refid="FactoryWithRegistration_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>SteadyStateSolver.h</label>
        <link refid="SteadyStateSolver_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>sundials/sundials_nonlinearsolver.h</label>
      </node>
      <node id="25">
        <label>Solver.h</label>
        <link refid="Solver_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>typeinfo</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="21">
        <label>rrException.h</label>
        <link refid="rrException_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>sundials/sundials_linearsolver.h</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="40">
        <label>CVODEIntegrator.h</label>
        <link refid="CVODEIntegrator_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>rrConfig.h</label>
        <link refid="rrConfig_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kinsol/kinsol.h</label>
      </node>
      <node id="42">
        <label>rrRoadRunnerOptions.h</label>
        <link refid="rrRoadRunnerOptions_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>unordered_map</label>
      </node>
      <node id="12">
        <label>Setting.h</label>
        <link refid="Setting_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tr1proxy/rr_memory.h</label>
      </node>
      <node id="3">
        <label>nvector/nvector_serial.h</label>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacerr">rr</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Ciaran<sp/>on<sp/>26/02/2021.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KinsolSteadyStateSolver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;KinsolErrHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rrConfig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CVODEIntegrator_8h" kindref="compound">CVODEIntegrator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">rr<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a7cc99b1d285e7e1afae54f217135d0b5" kindref="member">KinsolSteadyStateSolver::KinsolSteadyStateSolver</ref>(ExecutableModel<sp/>*executableModel)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SteadyStateSolver(executableModel)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad6bb33d80ec7660150167cac4aefa2ae" kindref="member">KinsolSteadyStateSolver::resetSettings</ref>();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a49ceabb3db818eabcf56d77d28d60d6d" kindref="member">KinsolSteadyStateSolver::syncWithModel</ref>(ExecutableModel<sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a9ddc7acd14dad905333c11667363de66" kindref="member">freeKinsol</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1Solver_1ab60e7640a8c959558a144d9d7ee45515" kindref="member">mModel</ref><sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a7c7a941fbf27c7a3a5326b254ee2f1b1" kindref="member">createKinsol</ref>();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a7c7a941fbf27c7a3a5326b254ee2f1b1" kindref="member">KinsolSteadyStateSolver::createKinsol</ref>()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classrr_1_1Solver_1ab60e7640a8c959558a144d9d7ee45515" kindref="member">mModel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;calling<sp/>createKinsol,<sp/>but<sp/>kinsol<sp/>objects<sp/>already<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>argument<sp/>is<sp/>null,<sp/>returns<sp/>size<sp/>of<sp/>state<sp/>std::vector<sp/>(see<sp/>rrExecutableModel::getStateVector)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stateVectorSize<sp/>=<sp/><ref refid="classrr_1_1Solver_1ab60e7640a8c959558a144d9d7ee45515" kindref="member">mModel</ref>-&gt;<ref refid="classrr_1_1ExecutableModel_1a75b6f37ac538d2d2a0709fe4080b0570" kindref="member">getStateVector</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>our<sp/>N_Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref><sp/>=<sp/>N_VNew_Serial(stateVectorSize);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Sundials<sp/>failed<sp/>to<sp/>create<sp/>N_Vector<sp/>for<sp/>state<sp/>variables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref><sp/>=<sp/>N_VNew_Serial(stateVectorSize);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Sundials<sp/>failed<sp/>to<sp/>create<sp/>N_Vector<sp/>for<sp/>fscale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VConst(1,<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref>);<sp/></highlight><highlight class="comment">//<sp/>no<sp/>scaling.<sp/>Implement<sp/>if<sp/>wanted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref><sp/>=<sp/>N_VNew_Serial(stateVectorSize);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Sundials<sp/>failed<sp/>to<sp/>create<sp/>N_Vector<sp/>for<sp/>fscale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VConst(1,<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref>);<sp/></highlight><highlight class="comment">//<sp/>no<sp/>scaling.<sp/>Implement<sp/>if<sp/>wanted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>to<sp/>model<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1Solver_1ab60e7640a8c959558a144d9d7ee45515" kindref="member">mModel</ref>-&gt;<ref refid="classrr_1_1ExecutableModel_1a75b6f37ac538d2d2a0709fe4080b0570" kindref="member">getStateVector</ref>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>-&gt;ops-&gt;nvgetarraypointer(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>the<sp/>main<sp/>kinsol<sp/>memory<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref><sp/>=<sp/>KINCreate();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>kinsol<sp/>memory<sp/>block,<sp/>Kinsol<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>non<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref><sp/>=<sp/>N_VNew_Serial(stateVectorSize);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Sundials<sp/>failed<sp/>to<sp/>create<sp/>N_Vector<sp/>for<sp/>fscale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constraints.<sp/>If,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>0<sp/>-&gt;<sp/>No<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1<sp/>-&gt;<sp/>&gt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>-&gt;<sp/>&lt;=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2<sp/><sp/>-&gt;<sp/>&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-2<sp/><sp/>-&gt;<sp/>&lt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VConst(2,<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;allow_negative&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetConstraints(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>our<sp/>own<sp/>error<sp/>handler.<sp/>This<sp/>should<sp/>be<sp/>the<sp/>first<sp/>thing<sp/>called<sp/>after<sp/>creating<sp/>kinsol<sp/>memory<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>only<sp/>function<sp/>where<sp/>we<sp/>need<sp/>to<sp/>collect<sp/>the<sp/>error<sp/>code<sp/>and<sp/>decode<sp/>it,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>purpose<sp/>of<sp/>using<sp/>this<sp/>function<sp/>is<sp/>to<sp/>enable<sp/>automatic<sp/>error<sp/>handling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/>KINSetErrHandlerFn(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">KINErrHandlerFn</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kinsolErrHandler),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>!=<sp/>KIN_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decodeKinsolError(err);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>kinsol<sp/>&quot;user<sp/>data&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kinsol<sp/>uses<sp/>callback<sp/>functions<sp/>for<sp/>computing<sp/>the<sp/>rate<sp/>of<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kinsol<sp/>passes<sp/>a<sp/>void*<sp/>memory<sp/>buffer<sp/>to<sp/>`FixedPointIteration::kinsolDyDtFcn`<sp/>where<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cast<sp/>back<sp/>to<sp/>&quot;FixedPointIteration&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetUserData(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a9ddc7acd14dad905333c11667363de66" kindref="member">KinsolSteadyStateSolver::freeKinsol</ref>()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINFree(&amp;<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VDestroy_Serial(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VDestroy_Serial(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VDestroy_Serial(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VDestroy_Serial(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a80807be1f440f524769e55568a3abcf2" kindref="member">constraints</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad6bb33d80ec7660150167cac4aefa2ae" kindref="member">KinsolSteadyStateSolver::resetSettings</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1SteadyStateSolver_1ac9652965eb0defa7c12af91110dd68fc" kindref="member">SteadyStateSolver::resetSettings</ref>();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Max.<sp/>number<sp/>of<sp/>iterations<sp/>the<sp/>nonlinear<sp/>solver<sp/>is<sp/>allowed<sp/>to<sp/>use.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;num_max_iters&quot;</highlight><highlight class="normal">,<sp/>Setting(200),<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>Nonlinear<sp/>Iterations&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;allow_negative&quot;</highlight><highlight class="normal">,<sp/>Setting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Allow<sp/>negative<sp/>values&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ensures<sp/>non-negative<sp/>results&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(bool)Constrains<sp/>the<sp/>problem<sp/>such<sp/>that<sp/>all<sp/>values<sp/>are<sp/>non-negative<sp/>at<sp/>all<sp/>times&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Kinsol<sp/>logger<sp/>level.<sp/>Default=0,<sp/>no<sp/>additional<sp/>output.<sp/>Max=3.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;print_level&quot;</highlight><highlight class="normal">,Setting(<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;Kinsol<sp/>Print<sp/>Level&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Form<sp/>of<sp/>nu<sp/>coefficient.<sp/>One<sp/>of<sp/>eta_choice1,<sp/>eta_choice2<sp/>or<sp/>eta_constant&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;eta_form&quot;</highlight><highlight class="normal">,<sp/>Setting(</highlight><highlight class="stringliteral">&quot;eta_choice1&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;ETA<sp/>Form&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>initial<sp/>matrix<sp/>setup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;no_init_setup&quot;</highlight><highlight class="normal">,<sp/>Setting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>Init<sp/>Setup&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>residual<sp/>monitoring&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;no_res_monitoring&quot;</highlight><highlight class="normal">,<sp/>Setting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>Residual<sp/>Monitoring&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Max.<sp/>iterations<sp/>without<sp/>matrix<sp/>setup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;max_setup_calls&quot;</highlight><highlight class="normal">,<sp/>Setting(10),<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Setup<sp/>Calls&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Max.<sp/>iterations<sp/>without<sp/>residual<sp/>check&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;max_subsetup_calls&quot;</highlight><highlight class="normal">,<sp/>Setting(5),<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Sub<sp/>Setup<sp/>Calls&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Constant<sp/>value<sp/>of<sp/>nu&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;eta_constant_value&quot;</highlight><highlight class="normal">,<sp/>Setting(0.1),<sp/></highlight><highlight class="stringliteral">&quot;ETA<sp/>Constant<sp/>Value&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>gamma<sp/>where<sp/>0<sp/>&lt;&lt;<sp/>gamma<sp/>&lt;&lt;<sp/>1.0.<sp/>Use<sp/>0<sp/>to<sp/>indidate<sp/>default<sp/>value<sp/>of<sp/>0.9.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;eta_param_gamma&quot;</highlight><highlight class="normal">,<sp/>Setting(0),<sp/></highlight><highlight class="stringliteral">&quot;ETA<sp/>Gamma&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>alpha<sp/>where<sp/>1.0<sp/>&lt;<sp/>alpha<sp/>&lt;<sp/>2.0.<sp/>Use<sp/>0<sp/>to<sp/>indicate<sp/>default<sp/>value<sp/>of<sp/>2.0.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;eta_param_alpha&quot;</highlight><highlight class="normal">,<sp/>Setting(0),<sp/></highlight><highlight class="stringliteral">&quot;ETA<sp/>alpha&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>omega_min<sp/>-<sp/>lower<sp/>bound<sp/>residual<sp/>monitoring&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;res_mon_min&quot;</highlight><highlight class="normal">,<sp/>Setting(0.00001),<sp/></highlight><highlight class="stringliteral">&quot;Residual<sp/>Monitoring<sp/>Param<sp/>Minimum&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>omega_max<sp/>-<sp/>upper<sp/>bound<sp/>residual<sp/>monitoring&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;res_mon_max&quot;</highlight><highlight class="normal">,<sp/>Setting(0.9),<sp/></highlight><highlight class="stringliteral">&quot;Residual<sp/>Monitoring<sp/>Param<sp/>Minimum&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Constant<sp/>value<sp/>of<sp/>omega&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;res_mon_constant_value&quot;</highlight><highlight class="normal">,<sp/>Setting(0.9),<sp/></highlight><highlight class="stringliteral">&quot;Residual<sp/>Monitoring<sp/>Constant<sp/>Value&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Lower<sp/>bound<sp/>on<sp/>epsilon&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;no_min_eps&quot;</highlight><highlight class="normal">,<sp/>Setting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>Minimum<sp/>Epsilon&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Max.<sp/>scaled<sp/>length<sp/>of<sp/>Newton<sp/>step.<sp/>If<sp/>0<sp/>use<sp/>default<sp/>value<sp/>which<sp/>is<sp/>1000*||D_u*u_0||2.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;max_newton_step&quot;</highlight><highlight class="normal">,<sp/>Setting(0),<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Newton<sp/>Step<sp/>size&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Max.<sp/>number<sp/>of<sp/>beta-condition<sp/>failures&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;max_beta_fails&quot;</highlight><highlight class="normal">,<sp/>Setting(10),<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Beta<sp/>Fails&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Function-norm<sp/>stopping<sp/>tolerance.<sp/>If<sp/>0<sp/>use<sp/>default<sp/>of<sp/>uround^1/3.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;func_norm_tol&quot;</highlight><highlight class="normal">,<sp/>Setting(0),<sp/></highlight><highlight class="stringliteral">&quot;Func<sp/>Norm<sp/>Tol&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Scaled-step<sp/>stopping<sp/>tolerance.<sp/>If<sp/>0<sp/>use<sp/>default<sp/>of<sp/>uround^2/3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;scaled_step_tol&quot;</highlight><highlight class="normal">,<sp/>Setting(0),<sp/></highlight><highlight class="stringliteral">&quot;Scaled<sp/>Step<sp/>Tol&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>function<sp/>KINSetRelErrFunc<sp/>speciffies<sp/>the<sp/>relative<sp/>error<sp/>in<sp/>computing<sp/>F(u),<sp/>which<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>used<sp/>in<sp/>the<sp/>difference<sp/>quotient<sp/>approximation<sp/>to<sp/>the<sp/>Jacobian<sp/>matrix.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>to<sp/>0<sp/>for<sp/>default<sp/>which<sp/>equals<sp/>U<sp/>=<sp/>unit<sp/>roundoff.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSetting(</highlight><highlight class="stringliteral">&quot;rel_err_func&quot;</highlight><highlight class="normal">,<sp/>Setting(0),<sp/></highlight><highlight class="stringliteral">&quot;Relative<sp/>Error<sp/>Function&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>desc);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a6e2deeb6268b4dcf40893529abd6c192" kindref="member">KinsolSteadyStateSolver::getSolverStatsFromKinsol</ref>()<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetNumFuncEvals(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;<ref refid="classrr_1_1KinsolSteadyStateSolver_1a94eae6c3534054b7fff476be111133ca" kindref="member">numFuncEvals</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetNumNonlinSolvIters(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;numNolinSolvIters);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetNumBetaCondFails(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;numBetaCondFails);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetNumBacktrackOps(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;numBacktrackOps);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetFuncNorm(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;funcNorm);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetStepLength(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;stepLength);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINGetNumNonlinSolvIters(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>&amp;numNonlinSolvIters);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1af702594542f53277aa41afcea984e287" kindref="member">KinsolSteadyStateSolver::setFScale</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VConst(value,<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1af702594542f53277aa41afcea984e287" kindref="member">KinsolSteadyStateSolver::setFScale</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stateSize<sp/>=<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>-&gt;ops-&gt;nvgetlength(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.size()<sp/>!=<sp/>stateSize)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>err;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__FUNCTION__</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>size<sp/>of<sp/>std::vector<sp/>to<sp/>set<sp/>the<sp/>fscale<sp/>variable<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;equal<sp/>the<sp/>number<sp/>of<sp/>states<sp/>in<sp/>the<sp/>model<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stateSize<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err.str());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dptr<sp/>=<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>-&gt;ops-&gt;nvgetarraypointer(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dptr<sp/>=<sp/>*value.data();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a6b80db848ae533f85d9696ac82c0f07d" kindref="member">KinsolSteadyStateSolver::setUScale</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_VConst(value,<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a6b80db848ae533f85d9696ac82c0f07d" kindref="member">KinsolSteadyStateSolver::setUScale</ref>(std::vector&lt;double&gt;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stateSize<sp/>=<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>-&gt;ops-&gt;nvgetlength(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.size()<sp/>!=<sp/>stateSize)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>err;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__FUNCTION__</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>size<sp/>of<sp/>std::vector<sp/>to<sp/>set<sp/>the<sp/>uscale<sp/>variable<sp/>does<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;equal<sp/>the<sp/>number<sp/>of<sp/>states<sp/>in<sp/>the<sp/>model<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stateSize<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err.str());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dptr<sp/>=<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>-&gt;ops-&gt;nvgetarraypointer(<ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dptr<sp/>=<sp/>*value.data();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5ebba0ecca346216d982d9533d32d811" kindref="member">KinsolSteadyStateSolver::getKinsolMemory</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a46e1ca358f9d1a8bbfe1150a1f6cf8ed" kindref="member">KinsolSteadyStateSolver::updateKinsol</ref>()<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>if<sp/>invalid<sp/>option<sp/>chosen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>validEtaForms({</highlight><highlight class="stringliteral">&quot;eta_choice1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;eta_choice2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;eta_constant&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>etaChoice<sp/>=<sp/><ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;eta_form&quot;</highlight><highlight class="normal">).<ref refid="classrr_1_1Setting_1a7b66c72a2cf9b9215733f554b6cd466e" kindref="member">get</ref>&lt;std::string&gt;();<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(validEtaForms.begin(),<sp/>validEtaForms.end(),<sp/>etaChoice)<sp/>==<sp/>validEtaForms.end())<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>err;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etaChoice<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.<sp/>Valid<sp/>options<sp/>are<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x:<sp/>validEtaForms)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>InvalidKeyException(err.str());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etaChoice<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;eta_choice1&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetEtaForm(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>KIN_ETACHOICE1);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etaChoice<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;eta_choice2&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetEtaForm(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>KIN_ETACHOICE2);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etaChoice<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;eta_constant&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetEtaForm(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>KIN_ETACONSTANT);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetNumMaxIters(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;num_max_iters&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetPrintLevel(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;print_level&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetNoInitSetup(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;no_init_setup&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetNoResMon(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;no_res_monitoring&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetMaxSetupCalls(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;max_setup_calls&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetMaxSubSetupCalls(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;max_subsetup_calls&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetEtaConstValue(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;eta_constant_value&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetEtaParams(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;eta_param_gamma&quot;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;eta_param_alpha&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetResMonParams(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;res_mon_min&quot;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;res_mon_max&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetResMonConstValue(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;res_mon_constant_value&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetNoMinEps(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;no_min_eps&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetMaxNewtonStep(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;max_newton_step&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetMaxBetaFails(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;max_beta_fails&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetFuncNormTol(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;func_norm_tol&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetScaledStepTol(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;scaled_step_tol&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KINSetRelErrFunc(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classrr_1_1Solver_1a87339915a211b22ecd63078bb1cb7ca9" kindref="member">getValue</ref>(</highlight><highlight class="stringliteral">&quot;rel_err_func&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>Setting&gt;&amp;<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a953b279ea00b86a0fbd2a1e82d52d331" kindref="member">KinsolSteadyStateSolver::getSolverStats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>Setting&gt;<sp/>map;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numFuncEvals&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a94eae6c3534054b7fff476be111133ca" kindref="member">numFuncEvals</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numNolinSolvIters&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numNolinSolvIters);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numBetaCondFails&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numBetaCondFails);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numBacktrackOps&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numBacktrackOps);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;funcNorm&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(funcNorm);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;stepLength&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(stepLength);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numJacEvals&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numJacEvals);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numJtimesEvals&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numJtimesEvals);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numLinConvFails&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numLinConvFails);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numLinFuncEvals&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numLinFuncEvals);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numLinIters&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numLinIters);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numNonlinSolvIters&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numNonlinSolvIters);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numPrecEvals&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numPrecEvals);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverStats[</highlight><highlight class="stringliteral">&quot;numPrecSolves&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Setting(numPrecSolves);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solverStats;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a4588d8d7266adc7df1f7ed6cacac84d7" kindref="member">KinsolSteadyStateSolver::printSolverStats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Solver<sp/>Stats:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;it:<sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a953b279ea00b86a0fbd2a1e82d52d331" kindref="member">getSolverStats</ref>())<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.second.get&lt;std::string&gt;()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a7523fec309a03e68bd30d2cf604510f3" kindref="member">KinsolSteadyStateSolver::solveForSteadyState</ref>(KinsolSteadyStateSolver<sp/>*solverInstance,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kinsolStrategy)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kinsolStrategy<sp/>&lt;<sp/>0<sp/>||<sp/>kinsolStrategy<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;kinsolStrategy<sp/>should<sp/>be<sp/>0,<sp/>1,<sp/>2,<sp/>or<sp/>3<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;KIN_NONE,<sp/>KIN_LINESEARCH,<sp/>KIN_PICARD,<sp/>KIN_FP<sp/>respectively&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Kinsol<sp/>memory<sp/>block<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Solvers<sp/>state<sp/>std::vector<sp/>is<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensures<sp/>options<sp/>have<sp/>been<sp/>correctly<sp/>propagated<sp/>to<sp/>kinsol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>solving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverInstance-&gt;updateKinsol();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>KINSol(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a64033039dc53f114855985463ad108f6" kindref="member">mKinsol_Memory</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kinsol<sp/>memory<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>guess<sp/>and<sp/>solution<sp/>std::vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>strategy,<sp/>options<sp/>defined<sp/>in<sp/>kinsol.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kinsolStrategy,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ab0bf299b6530378feb374d92a58a959e" kindref="member">uscale</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scaling<sp/>std::vector<sp/>for<sp/>the<sp/>variable<sp/>cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1ad3bc465ff768913724631e8d4daf62c1" kindref="member">fscale</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scaling<sp/>std::vector<sp/>for<sp/>the<sp/>variable<sp/>fval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*flagName<sp/>=<sp/>KINGetReturnFlagName(flag);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors<sp/>are<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>error<sp/>handler<sp/>for<sp/>kinsol.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>handle<sp/>warnings<sp/>and<sp/>success<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flag)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>KIN_SUCCESS:<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rrLog(Logger::LOG_INFORMATION)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Steady<sp/>state<sp/>found&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>KIN_INITIAL_GUESS_OK:<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rrLog(Logger::LOG_INFORMATION)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Steady<sp/>state<sp/>found.<sp/>The<sp/>guess<sp/>u<sp/>=<sp/>u0<sp/>satisifed<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;system<sp/>F(u)<sp/>=<sp/>0<sp/>within<sp/>the<sp/>tolerances<sp/>specified<sp/>(the&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;scaled<sp/>norm<sp/>of<sp/>F(u0)<sp/>is<sp/>less<sp/>than<sp/>0.01*fnormtol).&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>KIN_STEP_LT_STPTOL:<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rrLog(Logger::LOG_WARNING)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;kinsol<sp/>stopped<sp/>based<sp/>on<sp/>scaled<sp/>step<sp/>length.<sp/>This<sp/>means<sp/>that<sp/>the<sp/>current<sp/>iterate<sp/>may&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;be<sp/>an<sp/>approximate<sp/>solution<sp/>of<sp/>the<sp/>given<sp/>nonlinear<sp/>system,<sp/>but<sp/>it<sp/>is<sp/>also<sp/>quite<sp/>possible&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;that<sp/>the<sp/>algorithm<sp/>is<sp/>\&quot;stalled\&quot;<sp/>(making<sp/>insufficient<sp/>progress)<sp/>near<sp/>an<sp/>invalid<sp/>solution,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;or<sp/>that<sp/>the<sp/>scalar<sp/>scsteptol<sp/>is<sp/>too<sp/>large<sp/>(see<sp/>ScaledStepTol<sp/>to&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;change<sp/>ScaledStepTol<sp/>from<sp/>its<sp/>default<sp/>value).&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>errMsg<sp/>=<sp/>decodeKinsolError(flag);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Kinsol<sp/>Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>errMsg);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(flagName);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1KinsolSteadyStateSolver_1a6e2deeb6268b4dcf40893529abd6c192" kindref="member">getSolverStatsFromKinsol</ref>();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>model&apos;s<sp/>state<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classrr_1_1Solver_1ab60e7640a8c959558a144d9d7ee45515" kindref="member">mModel</ref>-&gt;<ref refid="classrr_1_1ExecutableModel_1a57a67063c957714b916d4a3d4277c3b9" kindref="member">setStateVector</ref>(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>-&gt;ops-&gt;nvgetarraypointer(<ref refid="classrr_1_1KinsolSteadyStateSolver_1a5f5802fe0c668fe5569bfb163748a621" kindref="member">mStateVector</ref>));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>funcNorm;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="KinsolSteadyStateSolver.cpp"/>
  </compounddef>
</doxygen>
