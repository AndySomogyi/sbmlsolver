<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classrr_1_1SteadyStateSolverFactory" kind="class" language="C++" prot="public">
    <compoundname>rr::SteadyStateSolverFactory</compoundname>
    <basecompoundref refid="classrr_1_1FactoryWithRegistration" prot="public" virt="non-virtual">rr::FactoryWithRegistration</basecompoundref>
    <includes refid="SteadyStateSolver_8h" local="no">SteadyStateSolver.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrr_1_1SteadyStateSolverFactory_1aa3b79f8ddd6f63bc2aad49234a662108" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SteadyStateSolverFactory" kindref="compound">SteadyStateSolverFactory</ref> &amp;</type>
        <definition>SteadyStateSolverFactory &amp; rr::SteadyStateSolverFactory::getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <briefdescription>
<para>Returns the singleton instance of the solver factory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM, WBC  If one exists return is otherwise create one. This method implements the sigleton pattern and is thread safe due to use of std::mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SteadyStateSolver.h" line="96" column="41" bodyfile="SteadyStateSolver.cpp" bodystart="108" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Constructs new integrators. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>JKM, WBC  Implements the factory and singleton patterns. Constructs a new integrator given the name (e.g. cvode, gillespie) and returns a base pointer to <ref refid="classrr_1_1SteadyStateSolver" kindref="compound">rr::SteadyStateSolver</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>rr::SteadyStateSolverFactory</label>
        <link refid="classrr_1_1SteadyStateSolverFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rr::FactoryWithRegistration</label>
        <link refid="classrr_1_1FactoryWithRegistration"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>rr::SteadyStateSolverFactory</label>
        <link refid="classrr_1_1SteadyStateSolverFactory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rr::FactoryWithRegistration</label>
        <link refid="classrr_1_1FactoryWithRegistration"/>
      </node>
    </collaborationgraph>
    <location file="SteadyStateSolver.h" line="85" column="5" bodyfile="SteadyStateSolver.h" bodystart="86" bodyend="97"/>
    <listofallmembers>
      <member refid="classrr_1_1FactoryWithRegistration_1a87bfaaa30d0574a096f1a2c0e98d13dc" prot="public" virt="virtual"><scope>rr::SteadyStateSolverFactory</scope><name>description</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1a5bf68f07f71d724839bc759a1791efa2" prot="protected" virt="non-virtual"><scope>rr::SteadyStateSolverFactory</scope><name>FactoryWithRegistration</name></member>
      <member refid="classrr_1_1SteadyStateSolverFactory_1aa3b79f8ddd6f63bc2aad49234a662108" prot="public" virt="non-virtual"><scope>rr::SteadyStateSolverFactory</scope><name>getInstance</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1adfdf0ab1c4e8e61c20c3af4809baadc0" prot="public" virt="virtual"><scope>rr::SteadyStateSolverFactory</scope><name>hint</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1a8ac0326917df8a3aa25ed9bba5cb066d" prot="public" virt="virtual"><scope>rr::SteadyStateSolverFactory</scope><name>name</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1a7c398ee43e2cc611cfdc9ba1598a1c64" prot="public" virt="non-virtual"><scope>rr::SteadyStateSolverFactory</scope><name>New</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1a8d75bd9ffec1eef7241f173a64ef5674" prot="public" virt="virtual"><scope>rr::SteadyStateSolverFactory</scope><name>registerSolver</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1af22bbf5b406cd4c0b1e104d1ea62530b" prot="protected" virt="non-virtual"><scope>rr::SteadyStateSolverFactory</scope><name>registrars</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1a2235f601129fa81c0d32b6e778940c72" prot="public" virt="virtual"><scope>rr::SteadyStateSolverFactory</scope><name>size</name></member>
      <member refid="classrr_1_1FactoryWithRegistration_1a1b4253d8373e8d31919de20e63d834c0" prot="public" virt="virtual"><scope>rr::SteadyStateSolverFactory</scope><name>~FactoryWithRegistration</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
