<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classrrllvm_1_1LLVMCompiler" kind="class" language="C++" prot="public">
    <compoundname>rrllvm::LLVMCompiler</compoundname>
    <basecompoundref refid="classrr_1_1Compiler" prot="public" virt="non-virtual">rr::Compiler</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a2f01f4a746fe47ce09d53b636c58e6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::LLVMCompiler::LLVMCompiler</definition>
        <argsstring>()</argsstring>
        <name>LLVMCompiler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="22" column="5" bodyfile="llvm/LLVMCompiler.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a9e60eb7ba34d0a54667bab18e04eecf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>rrllvm::LLVMCompiler::~LLVMCompiler</definition>
        <argsstring>()</argsstring>
        <name>~LLVMCompiler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="23" column="13" bodyfile="llvm/LLVMCompiler.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1af60c9c0772a118ad6601ef05280503ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getCompiler</definition>
        <argsstring>() const</argsstring>
        <name>getCompiler</name>
        <reimplements refid="classrr_1_1Compiler_1a30d924b503ddddc0056108f6f08e86ee">getCompiler</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="25" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a8707e79ee48a442da849734dde908709" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool rrllvm::LLVMCompiler::setCompiler</definition>
        <argsstring>(const std::string &amp;compiler)</argsstring>
        <name>setCompiler</name>
        <reimplements refid="classrr_1_1Compiler_1a0556fb1db12b7f693d37a6108068103d">setCompiler</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>compiler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="26" column="18" bodyfile="llvm/LLVMCompiler.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a38932bfff982e7939c13eace4eddde3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getCompilerLocation</definition>
        <argsstring>() const</argsstring>
        <name>getCompilerLocation</name>
        <reimplements refid="classrr_1_1Compiler_1a2d39ffe37cd77cbbc802085197e7b3de">getCompilerLocation</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="28" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1adb6ba40c7dcb5d26d5ff33074af28492" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool rrllvm::LLVMCompiler::setCompilerLocation</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>setCompilerLocation</name>
        <reimplements refid="classrr_1_1Compiler_1a08a268ed8d239e64f7dca5ffe883e606">setCompilerLocation</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="29" column="18" bodyfile="llvm/LLVMCompiler.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a3b711ae71d3b808fe1d7c2517f42c91e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getSupportCodeFolder</definition>
        <argsstring>() const</argsstring>
        <name>getSupportCodeFolder</name>
        <reimplements refid="classrr_1_1Compiler_1ac9bcede80a7f19a2294e812f0f9f2208">getSupportCodeFolder</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="31" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a6a9910411f41ba0fc47d95bd30b04fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool rrllvm::LLVMCompiler::setSupportCodeFolder</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>setSupportCodeFolder</name>
        <reimplements refid="classrr_1_1Compiler_1a79c97dd74e6eea11b64c7469c55a6d89">setSupportCodeFolder</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="32" column="18" bodyfile="llvm/LLVMCompiler.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1af43a6b3d973fee5348bd9d2cea192752" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getDefaultTargetTriple</definition>
        <argsstring>()</argsstring>
        <name>getDefaultTargetTriple</name>
        <reimplements refid="classrr_1_1Compiler_1a244cefa6a995aeb5d2793ff893f1893b">getDefaultTargetTriple</reimplements>
        <briefdescription>
<para><ref refid="classrrllvm_1_1LLVMCompiler_1af43a6b3d973fee5348bd9d2cea192752" kindref="member">getDefaultTargetTriple()</ref> - Return the default target triple the compiler has been configured to produce code for. </para>
        </briefdescription>
        <detaileddescription>
<para>The target triple is a std::string in the format of: CPU_TYPE-VENDOR-OPERATING_SYSTEM or CPU_TYPE-VENDOR-KERNEL-OPERATING_SYSTEM </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="44" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a8a9f792ca40a9b3826d5b540263f7c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getProcessTriple</definition>
        <argsstring>()</argsstring>
        <name>getProcessTriple</name>
        <reimplements refid="classrr_1_1Compiler_1afe24151183f7db59208bfe86da2b3c79">getProcessTriple</reimplements>
        <briefdescription>
<para><ref refid="classrrllvm_1_1LLVMCompiler_1a8a9f792ca40a9b3826d5b540263f7c05" kindref="member">getProcessTriple()</ref> - Return an appropriate target triple for generating code to be loaded into the current process, e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>when using the JIT. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="50" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1ae8f2ba44fbc064d81f77b8aafdaf9109" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getHostCPUName</definition>
        <argsstring>()</argsstring>
        <name>getHostCPUName</name>
        <reimplements refid="classrr_1_1Compiler_1a1718efebfe7936512a299c2f32e8c800">getHostCPUName</reimplements>
        <briefdescription>
<para>getHostCPUName - Get the LLVM name for the host CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>The particular format of the name is target dependent, and suitable for passing as -mcpu to the target which matches the host.</para>
<para><simplesect kind="return"><para>- The host CPU name, or empty if the CPU could not be determined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="59" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCompiler_1a6b936a4ca2bde133b99505ef2e5f7cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::LLVMCompiler::getVersion</definition>
        <argsstring>()</argsstring>
        <name>getVersion</name>
        <reimplements refid="classrr_1_1Compiler_1ace56af18a4bc2cd882bdf4685e18fb33">getVersion</reimplements>
        <briefdescription>
<para>get the version of the compiler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/LLVMCompiler.h" line="64" column="25" bodyfile="llvm/LLVMCompiler.cpp" bodystart="79" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>rrllvm::LLVMCompiler</label>
        <link refid="classrrllvm_1_1LLVMCompiler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rr::Compiler</label>
        <link refid="classrr_1_1Compiler"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>rrllvm::LLVMCompiler</label>
        <link refid="classrrllvm_1_1LLVMCompiler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rr::Compiler</label>
        <link refid="classrr_1_1Compiler"/>
      </node>
    </collaborationgraph>
    <location file="llvm/LLVMCompiler.h" line="19" column="1" bodyfile="llvm/LLVMCompiler.h" bodystart="20" bodyend="65"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1LLVMCompiler_1af60c9c0772a118ad6601ef05280503ea" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getCompiler</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a38932bfff982e7939c13eace4eddde3c" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getCompilerLocation</name></member>
      <member refid="classrr_1_1Compiler_1a5144b370c3c98e8d4d3ae93a2e4bb57b" prot="public" virt="non-virtual"><scope>rrllvm::LLVMCompiler</scope><name>getDefaultCompiler</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1af43a6b3d973fee5348bd9d2cea192752" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getDefaultTargetTriple</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1ae8f2ba44fbc064d81f77b8aafdaf9109" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getHostCPUName</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a8a9f792ca40a9b3826d5b540263f7c05" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getProcessTriple</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a3b711ae71d3b808fe1d7c2517f42c91e" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getSupportCodeFolder</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a6b936a4ca2bde133b99505ef2e5f7cdd" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>getVersion</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a2f01f4a746fe47ce09d53b636c58e6b9" prot="public" virt="non-virtual"><scope>rrllvm::LLVMCompiler</scope><name>LLVMCompiler</name></member>
      <member refid="classrr_1_1Compiler_1a09cf96dd0f59ca06473aba26f1e4702c" prot="public" virt="non-virtual"><scope>rrllvm::LLVMCompiler</scope><name>New</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a8707e79ee48a442da849734dde908709" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>setCompiler</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1adb6ba40c7dcb5d26d5ff33074af28492" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>setCompilerLocation</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a6a9910411f41ba0fc47d95bd30b04fd2" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>setSupportCodeFolder</name></member>
      <member refid="classrr_1_1Compiler_1a344fb49215070b32990da67cd59b28e9" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>~Compiler</name></member>
      <member refid="classrrllvm_1_1LLVMCompiler_1a9e60eb7ba34d0a54667bab18e04eecf6" prot="public" virt="virtual"><scope>rrllvm::LLVMCompiler</scope><name>~LLVMCompiler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
