<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classrrllvm_1_1LLVMCodeGenTest" kind="class" language="C++" prot="public">
    <compoundname>rrllvm::LLVMCodeGenTest</compoundname>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1a3bc1ecdb1e13954ec3007c366a4b2abd" prot="protected" static="no" mutable="no">
        <type>const libsbml::Model *</type>
        <definition>const libsbml::Model* rrllvm::LLVMCodeGenTest::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
<para>could potentially be null, everything else is guaranteed to be valid </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="45" column="26" bodyfile="llvm/CodeGenBase.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1adbc76d0541d4896c649291d6095c2c55" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classrrllvm_1_1LLVMModelDataSymbols" kindref="compound">LLVMModelDataSymbols</ref> &amp;</type>
        <definition>const LLVMModelDataSymbols&amp; rrllvm::LLVMCodeGenTest::dataSymbols</definition>
        <argsstring></argsstring>
        <name>dataSymbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="47" column="32" bodyfile="llvm/CodeGenBase.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1a50711bf6f440ad7c11e5a5dcc4ddf551" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classrrllvm_1_1LLVMModelSymbols" kindref="compound">LLVMModelSymbols</ref> &amp;</type>
        <definition>const LLVMModelSymbols&amp; rrllvm::LLVMCodeGenTest::modelSymbols</definition>
        <argsstring></argsstring>
        <name>modelSymbols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="48" column="28" bodyfile="llvm/CodeGenBase.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1a8cc84563dc6127bac814de4642d6578e" prot="protected" static="no" mutable="no">
        <type>llvm::LLVMContext &amp;</type>
        <definition>llvm::LLVMContext&amp; rrllvm::LLVMCodeGenTest::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="50" column="23" bodyfile="llvm/CodeGenBase.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1aea270d21100163fccaccfc1ed42917d9" prot="protected" static="no" mutable="no">
        <type>llvm::Module *</type>
        <definition>llvm::Module* rrllvm::LLVMCodeGenTest::module</definition>
        <argsstring></argsstring>
        <name>module</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="51" column="18" bodyfile="llvm/CodeGenBase.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1ab05b6396eca32f6df5616d6cc0892e0c" prot="protected" static="no" mutable="no">
        <type>llvm::IRBuilder &amp;</type>
        <definition>llvm::IRBuilder&amp; rrllvm::LLVMCodeGenTest::builder</definition>
        <argsstring></argsstring>
        <name>builder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="52" column="6" bodyfile="llvm/CodeGenBase.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1LLVMCodeGenTest_1a8cd6891fdd4f7bb5dcf460758f91aa3a" prot="protected" static="no" mutable="no">
        <type>llvm::ExecutionEngine &amp;</type>
        <definition>llvm::ExecutionEngine&amp; rrllvm::LLVMCodeGenTest::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="53" column="27" bodyfile="llvm/CodeGenBase.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classrrllvm_1_1LLVMCodeGenTest_1aeee73184dc9f0f5089e5bb007da3299b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rrllvm::LLVMCodeGenTest::LLVMCodeGenTest</definition>
        <argsstring>(const ModelGeneratorContext &amp;mgc)</argsstring>
        <name>LLVMCodeGenTest</name>
        <param>
          <type>const <ref refid="classrrllvm_1_1ModelGeneratorContext" kindref="compound">ModelGeneratorContext</ref> &amp;</type>
          <declname>mgc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="31" column="5" bodyfile="llvm/CodeGenBase.cpp" bodystart="31" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrrllvm_1_1LLVMCodeGenTest_1aa6d2dfef45a27cd61375de6c6d22b7e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void rrllvm::LLVMCodeGenTest::test</definition>
        <argsstring>(const int(&amp;Arr)[N], double out[N])</argsstring>
        <name>test</name>
        <param>
          <type>const int(&amp;)</type>
          <declname>Arr</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>double</type>
          <declname>out</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="57" column="17" bodyfile="llvm/CodeGenBase.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1LLVMCodeGenTest_1a231438a208241e6d6462c8d9fd5beaae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rrllvm::LLVMCodeGenTest::codeGenHeader</definition>
        <argsstring>(const char *functionName, llvm::Type *retType, llvm::Type(*argTypes)[N], const char(*argNames)[N], llvm::Value(*args)[N])</argsstring>
        <name>codeGenHeader</name>
        <param>
          <type>const char *</type>
          <declname>functionName</declname>
        </param>
        <param>
          <type>llvm::Type *</type>
          <declname>retType</declname>
        </param>
        <param>
          <type>llvm::Type(*)</type>
          <declname>argTypes</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const char(*)</type>
          <declname>argNames</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>llvm::Value(*)</type>
          <declname>args</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="67" column="10" bodyfile="llvm/CodeGenBase.cpp" bodystart="67" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1LLVMCodeGenTest_1af16c31f2a5fa5b583c5474b752b2fdba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual rrllvm::LLVMCodeGenTest::~LLVMCodeGenTest</definition>
        <argsstring>()</argsstring>
        <name>~LLVMCodeGenTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/CodeGenBase.cpp" line="97" column="13" bodyfile="llvm/CodeGenBase.cpp" bodystart="97" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>rrllvm::ASTNodeFactory</label>
        <link refid="classrrllvm_1_1ASTNodeFactory"/>
      </node>
      <node id="2">
        <label>rrllvm::LLVMModelSymbols</label>
        <link refid="classrrllvm_1_1LLVMModelSymbols"/>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>nodes</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>assignmentRules</edgelabel>
          <edgelabel>initialAssignmentRules</edgelabel>
          <edgelabel>initialValues</edgelabel>
          <edgelabel>rateRules</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>rrllvm::LLVMCodeGenTest</label>
        <link refid="classrrllvm_1_1LLVMCodeGenTest"/>
        <childnode refid="2" relation="usage">
          <edgelabel>modelSymbols</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>dataSymbols</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>rrllvm::LLVMModelDataSymbols</label>
        <link refid="classrrllvm_1_1LLVMModelDataSymbols"/>
      </node>
      <node id="5">
        <label>rrllvm::SymbolForest</label>
        <link refid="classrrllvm_1_1SymbolForest"/>
        <childnode refid="6" relation="usage">
          <edgelabel>boundarySpecies</edgelabel>
          <edgelabel>compartments</edgelabel>
          <edgelabel>floatingSpecies</edgelabel>
          <edgelabel>globalParameters</edgelabel>
          <edgelabel>speciesReferences</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>libsbml::SBMLVisitor</label>
      </node>
      <node id="6">
        <label>map&lt; string, const libsbml::ASTNode * &gt;</label>
      </node>
    </collaborationgraph>
    <location file="llvm/CodeGenBase.cpp" line="26" column="1" bodyfile="llvm/CodeGenBase.cpp" bodystart="27" bodyend="98"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1ab05b6396eca32f6df5616d6cc0892e0c" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>builder</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1a231438a208241e6d6462c8d9fd5beaae" prot="public" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>codeGenHeader</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1a8cc84563dc6127bac814de4642d6578e" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>context</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1adbc76d0541d4896c649291d6095c2c55" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>dataSymbols</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1a8cd6891fdd4f7bb5dcf460758f91aa3a" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>engine</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1aeee73184dc9f0f5089e5bb007da3299b" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>LLVMCodeGenTest</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1a3bc1ecdb1e13954ec3007c366a4b2abd" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>model</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1a50711bf6f440ad7c11e5a5dcc4ddf551" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>modelSymbols</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1aea270d21100163fccaccfc1ed42917d9" prot="protected" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>module</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1aa6d2dfef45a27cd61375de6c6d22b7e7" prot="public" virt="non-virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>test</name></member>
      <member refid="classrrllvm_1_1LLVMCodeGenTest_1af16c31f2a5fa5b583c5474b752b2fdba" prot="public" virt="virtual"><scope>rrllvm::LLVMCodeGenTest</scope><name>~LLVMCodeGenTest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
