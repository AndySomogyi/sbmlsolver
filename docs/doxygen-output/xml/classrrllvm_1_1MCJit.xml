<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classrrllvm_1_1MCJit" kind="class" language="C++" prot="public">
    <compoundname>rrllvm::MCJit</compoundname>
    <basecompoundref refid="classrrllvm_1_1Jit" prot="public" virt="non-virtual">rrllvm::Jit</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1MCJit_1a263099bab61e97232b8316fea6c92caa" prot="private" static="no" mutable="no">
        <type>EngineBuilder</type>
        <definition>EngineBuilder rrllvm::MCJit::engineBuilder</definition>
        <argsstring></argsstring>
        <name>engineBuilder</name>
        <qualifiedname>rrllvm::MCJit::engineBuilder</qualifiedname>
        <briefdescription>
<para>Docs say to stack allocate the EngineBuilder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="86" column="23" bodyfile="llvm/MCJit.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1MCJit_1a6832a83ee09ff19eb901d4b53dcbe073" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; ExecutionEngine &gt;</type>
        <definition>std::unique_ptr&lt;ExecutionEngine&gt; rrllvm::MCJit::executionEngine</definition>
        <argsstring></argsstring>
        <name>executionEngine</name>
        <qualifiedname>rrllvm::MCJit::executionEngine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="87" column="25" bodyfile="llvm/MCJit.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1MCJit_1a95d0b38a36444ffb4d36a7592c3354c6" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; llvm::legacy::FunctionPassManager &gt;</type>
        <definition>std::unique_ptr&lt;llvm::legacy::FunctionPassManager&gt; rrllvm::MCJit::functionPassManager</definition>
        <argsstring></argsstring>
        <name>functionPassManager</name>
        <qualifiedname>rrllvm::MCJit::functionPassManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="88" column="25" bodyfile="llvm/MCJit.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1MCJit_1a2308811b59d84a4db126545b8d6f90cf" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::string &gt;</type>
        <definition>std::unique_ptr&lt;std::string&gt; rrllvm::MCJit::errString</definition>
        <argsstring></argsstring>
        <name>errString</name>
        <qualifiedname>rrllvm::MCJit::errString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="89" column="25" bodyfile="llvm/MCJit.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a82766ec1e6989cc512e8755019dbc05a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::MCJit::MCJit</definition>
        <argsstring>(std::uint32_t options)</argsstring>
        <name>MCJit</name>
        <qualifiedname>rrllvm::MCJit::MCJit</qualifiedname>
        <param>
          <type>std::uint32_t</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>cross platform mechanism for getting the target machine file type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="22" column="18" bodyfile="llvm/MCJit.cpp" bodystart="43" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1abfdb121bb47cc8f4ae3dfc0c4a2b8409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::MCJit::~MCJit</definition>
        <argsstring>() override=default</argsstring>
        <name>~MCJit</name>
        <qualifiedname>rrllvm::MCJit::~MCJit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="24" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a4aa0be70cb4c32f5cfdc2d48e19e53f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::MCJit::mangleName</definition>
        <argsstring>(const std::string &amp;unmangledName) const override</argsstring>
        <name>mangleName</name>
        <qualifiedname>rrllvm::MCJit::mangleName</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a3c1a1cf489bb7c8a965a2dfbfabddeec">mangleName</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>unmangledName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="27" column="21" bodyfile="llvm/MCJit.cpp" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a91eae38be659b79c86b536fd06da7a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::mapFunctionsToJitSymbols</definition>
        <argsstring>() override</argsstring>
        <name>mapFunctionsToJitSymbols</name>
        <qualifiedname>rrllvm::MCJit::mapFunctionsToJitSymbols</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a639f90099cf9faf011209586a9023a66">mapFunctionsToJitSymbols</reimplements>
        <briefdescription>
<para>adds functions that are declared and defined in C++ to the jit engine. </para>
        </briefdescription>
        <detaileddescription>
<para>unlike most functions that are created directly in the llvm IR language these functions are just C++ i.e. tan, arccsh, quotient. In <ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> (llvm 6) these were &quot;mapped&quot; to sbml support functions in addGlobalMappings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="29" column="14" bodyfile="llvm/MCJit.cpp" bodystart="69" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a11a02de74df8e811b98172f36a878cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::transferObjectsToResources</definition>
        <argsstring>(std::shared_ptr&lt; rrllvm::ModelResources &gt; modelResources) override</argsstring>
        <name>transferObjectsToResources</name>
        <qualifiedname>rrllvm::MCJit::transferObjectsToResources</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1ab4b10666cae29d7ee65d68f2e781b22f">transferObjectsToResources</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrrllvm_1_1ModelResources" kindref="compound">rrllvm::ModelResources</ref> &gt;</type>
          <declname>modelResources</declname>
        </param>
        <briefdescription>
<para><emphasis>Moves</emphasis> objects over to <ref refid="classrrllvm_1_1ModelResources" kindref="compound">ModelResources</ref> ptr </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="31" column="14" bodyfile="llvm/MCJit.cpp" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1ab595a7d72e4838dbbe2027130b4ecc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t rrllvm::MCJit::lookupFunctionAddress</definition>
        <argsstring>(const std::string &amp;name) override</argsstring>
        <name>lookupFunctionAddress</name>
        <qualifiedname>rrllvm::MCJit::lookupFunctionAddress</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a71b51482a5d3ed6e773494138358e317">lookupFunctionAddress</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="33" column="23" bodyfile="llvm/MCJit.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1ac9d5a99c6f5a888d3d403995873ec3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addObjectFile</definition>
        <argsstring>(rrOwningBinary owningObject) override</argsstring>
        <name>addObjectFile</name>
        <qualifiedname>rrllvm::MCJit::addObjectFile</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a1da020c67e709b9655807c6d7a8d8344">addObjectFile</reimplements>
        <param>
          <type>rrOwningBinary</type>
          <declname>owningObject</declname>
        </param>
        <briefdescription>
<para>add an in-memory representation of an object file to the current jit module. </para>
        </briefdescription>
        <detaileddescription>
<para>the rrOwningBinary is a typedef&apos;d llvm::object::OwningBinary&lt;llvm::object::ObjectFile&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="35" column="14" bodyfile="llvm/MCJit.cpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a1a86ef74cd562bd951bd3570cd823097" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addObjectFile</definition>
        <argsstring>(std::unique_ptr&lt; llvm::object::ObjectFile &gt; objectFile) override</argsstring>
        <name>addObjectFile</name>
        <qualifiedname>rrllvm::MCJit::addObjectFile</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a0914537453011b9acd33baabe5585453">addObjectFile</reimplements>
        <param>
          <type>std::unique_ptr&lt; llvm::object::ObjectFile &gt;</type>
          <declname>objectFile</declname>
        </param>
        <briefdescription>
<para>add an in-memory representation of an object file to the current jit module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="37" column="14" bodyfile="llvm/MCJit.cpp" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a54678279d720f8517a5c130a9c80e6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addObjectFile</definition>
        <argsstring>(std::unique_ptr&lt; llvm::MemoryBuffer &gt; obj) override</argsstring>
        <name>addObjectFile</name>
        <qualifiedname>rrllvm::MCJit::addObjectFile</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a33e40a54eb3ece2598f47e09c86b211e">addObjectFile</reimplements>
        <param>
          <type>std::unique_ptr&lt; llvm::MemoryBuffer &gt;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>add an in-memory representation of an object file to the current jit module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="39" column="14" bodyfile="llvm/MCJit.cpp" bodystart="121" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a9a77adef72b42870b30e2c8fc0a6db58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const llvm::DataLayout &amp;</type>
        <definition>const llvm::DataLayout &amp; rrllvm::MCJit::getDataLayout</definition>
        <argsstring>() const override</argsstring>
        <name>getDataLayout</name>
        <qualifiedname>rrllvm::MCJit::getDataLayout</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1aa12a437ad699812ffcb49839dbd74e4e">getDataLayout</reimplements>
        <briefdescription>
<para>get the DataLayout currently in use in the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="41" column="32" bodyfile="llvm/MCJit.cpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1ac2d4943094676d1cae9d39fa52618b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addModule</definition>
        <argsstring>() override</argsstring>
        <name>addModule</name>
        <qualifiedname>rrllvm::MCJit::addModule</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1af1bd1151bcdb23b228581e378eff5be0">addModule</reimplements>
        <briefdescription>
<para>add the module and context which are member variables of the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> instance to the current <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> engine. </para>
        </briefdescription>
        <detaileddescription>
<para>similar to <ref refid="classrrllvm_1_1MCJit_1a4bc8ec62262063d3a2ad50fe68ee10c7" kindref="member">addModule(std::unique_ptr&lt;llvm::Module&gt; M, std::unique_ptr&lt;llvm::LLVMContext&gt; ctx)</ref> the references are stolen by the call to construct a ThreadSafeModule which then takes ownership of the module and context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="43" column="14" bodyfile="llvm/MCJit.cpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a34a4ef86cfce934a493ed67fa8714dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addModule</definition>
        <argsstring>(llvm::Module *M) override</argsstring>
        <name>addModule</name>
        <qualifiedname>rrllvm::MCJit::addModule</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1ad2784cc3b1431f2315d3c7b3b63759af">addModule</reimplements>
        <param>
          <type>llvm::Module *</type>
          <declname>M</declname>
        </param>
        <briefdescription>
<para>add a module </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>directly to the jit engine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="45" column="14" bodyfile="llvm/MCJit.cpp" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a4bc8ec62262063d3a2ad50fe68ee10c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addModule</definition>
        <argsstring>(std::unique_ptr&lt; llvm::Module &gt; M, std::unique_ptr&lt; llvm::LLVMContext &gt; ctx) override</argsstring>
        <name>addModule</name>
        <qualifiedname>rrllvm::MCJit::addModule</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1add4b53cfec0eff51d41dc19d733914cc">addModule</reimplements>
        <param>
          <type>std::unique_ptr&lt; llvm::Module &gt;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; llvm::LLVMContext &gt;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>add a module </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>and Context</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>to the current jit engine.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
the parameters M and cts are unique pointers and therefore must be moved, not copied into the module. An llvm ThreadSafeModule is created internalls, which steals the references. For this reason, any code to be added to the module must happen before the call to addModule. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="47" column="14" bodyfile="llvm/MCJit.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a889adfa5bc53f553ff0631e845ca9e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::addModuleViaObjectFile</definition>
        <argsstring>()</argsstring>
        <name>addModuleViaObjectFile</name>
        <qualifiedname>rrllvm::MCJit::addModuleViaObjectFile</qualifiedname>
        <briefdescription>
<para>Adds the member variable context and associated module to current jit engine. </para>
        </briefdescription>
        <detaileddescription>
<para>The module is first converted into an in memory object file and then stored as a string in the member cariable compiledModuleBinaryStream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="55" column="14" bodyfile="llvm/MCJit.cpp" bodystart="151" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a9b07118c9077e486bb5393cd7c536fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; llvm::MemoryBuffer &gt;</type>
        <definition>std::unique_ptr&lt; llvm::MemoryBuffer &gt; rrllvm::MCJit::getCompiledModelFromCache</definition>
        <argsstring>(const std::string &amp;sbmlMD5) override</argsstring>
        <name>getCompiledModelFromCache</name>
        <qualifiedname>rrllvm::MCJit::getCompiledModelFromCache</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a38c60da63a6915853ee06bfc2de5e76c">getCompiledModelFromCache</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbmlMD5</declname>
        </param>
        <briefdescription>
<para>lookup the sbml with the md5 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sbmlMD5</parametername>
</parameternamelist>
<parameterdescription>
<para>in the compiled object cache. If it is there, return a memory buffer containing it (which you can turn into an object file). Returns empty (null) unique_ptr if not found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>at present this only works with <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="57" column="25" bodyfile="llvm/MCJit.cpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a6becdde6c4c01f7f926b82cd2cb554d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ExecutionEngine *</type>
        <definition>ExecutionEngine * rrllvm::MCJit::getExecutionEngineNonOwning</definition>
        <argsstring>() const</argsstring>
        <name>getExecutionEngineNonOwning</name>
        <qualifiedname>rrllvm::MCJit::getExecutionEngineNonOwning</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="59" column="25" bodyfile="llvm/MCJit.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a2a7986ac94bc40151b023787c2057d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::TargetMachine *</type>
        <definition>llvm::TargetMachine * rrllvm::MCJit::getTargetMachine</definition>
        <argsstring>()</argsstring>
        <name>getTargetMachine</name>
        <qualifiedname>rrllvm::MCJit::getTargetMachine</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="61" column="29" bodyfile="llvm/MCJit.cpp" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1a5745b69a08d8327de2943d04ca55c262" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::legacy::FunctionPassManager *</type>
        <definition>llvm::legacy::FunctionPassManager * rrllvm::MCJit::getFunctionPassManager</definition>
        <argsstring>() const</argsstring>
        <name>getFunctionPassManager</name>
        <qualifiedname>rrllvm::MCJit::getFunctionPassManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="63" column="43" bodyfile="llvm/MCJit.cpp" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1ad800ef0b104ffb3522e059796219da91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::raw_svector_ostream &amp;</type>
        <definition>llvm::raw_svector_ostream &amp; rrllvm::MCJit::getCompiledModuleStream</definition>
        <argsstring>()</argsstring>
        <name>getCompiledModuleStream</name>
        <qualifiedname>rrllvm::MCJit::getCompiledModuleStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="65" column="35" bodyfile="llvm/MCJit.cpp" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1ac3b90702092cb6082b57ebea939b83ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::MCJit::getModuleAsString</definition>
        <argsstring>(std::string sbmlMD5) override</argsstring>
        <name>getModuleAsString</name>
        <qualifiedname>rrllvm::MCJit::getModuleAsString</qualifiedname>
        <reimplements refid="classrrllvm_1_1Jit_1a49579ba0e6ce122894ec6def38f8e140">getModuleAsString</reimplements>
        <param>
          <type>std::string</type>
          <declname>sbmlMD5</declname>
        </param>
        <briefdescription>
<para>get a binary string representation of the current module. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called after the module is added to the jit engine. Throws if string is empty.</para>
<para>This interface is moderate abuse of interface design <ndash/> the parameter sbmlMD5 is only required for the <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref> subclass, as it is used to query the object cache created by llvm. This is of course bad design but we are boxed by not being able to find a way to enable the same cache system with the old <ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> class.</para>
<para>Regardless of the bad design, it works, so lets not spend any more time on it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="67" column="21" bodyfile="llvm/MCJit.cpp" bodystart="308" bodyend="316"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1ac80f79da4a2bd4b8a924d92c6f564401" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::writeObjectToBinaryStream</definition>
        <argsstring>()</argsstring>
        <name>writeObjectToBinaryStream</name>
        <qualifiedname>rrllvm::MCJit::writeObjectToBinaryStream</qualifiedname>
        <briefdescription>
<para>make the calls to PassManager to optimize the LLVM IR module. </para>
        </briefdescription>
        <detaileddescription>
<para>This is different between <ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> and <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref> in that the optimization module is already present in the <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref> layer stack, so optimization occurs automatically when a module is added. In contrast, in <ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> we need to call this ourselves. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="79" column="14" bodyfile="llvm/MCJit.cpp" bodystart="188" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1MCJit_1af7ec2ded7ff330f1d7229df211fa1b85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::MCJit::initFunctionPassManager</definition>
        <argsstring>()</argsstring>
        <name>initFunctionPassManager</name>
        <qualifiedname>rrllvm::MCJit::initFunctionPassManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Note to developers - passes are stored in llvm/Transforms/Scalar.h.</para>
        </inbodydescription>
        <location file="llvm/MCJit.h" line="81" column="14" bodyfile="llvm/MCJit.cpp" bodystart="220" bodyend="298"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>rrllvm::Jit</label>
        <link refid="classrrllvm_1_1Jit"/>
      </node>
      <node id="1">
        <label>rrllvm::MCJit</label>
        <link refid="classrrllvm_1_1MCJit"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>rrllvm::Jit</label>
        <link refid="classrrllvm_1_1Jit"/>
      </node>
      <node id="1">
        <label>rrllvm::MCJit</label>
        <link refid="classrrllvm_1_1MCJit"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="llvm/MCJit.h" line="19" column="5" bodyfile="llvm/MCJit.h" bodystart="19" bodyend="91"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1MCJit_1ac2d4943094676d1cae9d39fa52618b1f" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>addModule</name></member>
      <member refid="classrrllvm_1_1MCJit_1a34a4ef86cfce934a493ed67fa8714dd3" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>addModule</name></member>
      <member refid="classrrllvm_1_1MCJit_1a4bc8ec62262063d3a2ad50fe68ee10c7" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>addModule</name></member>
      <member refid="classrrllvm_1_1MCJit_1a889adfa5bc53f553ff0631e845ca9e96" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>addModuleViaObjectFile</name></member>
      <member refid="classrrllvm_1_1MCJit_1ac9d5a99c6f5a888d3d403995873ec3a4" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>addObjectFile</name></member>
      <member refid="classrrllvm_1_1MCJit_1a1a86ef74cd562bd951bd3570cd823097" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>addObjectFile</name></member>
      <member refid="classrrllvm_1_1MCJit_1a54678279d720f8517a5c130a9c80e6f8" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>addObjectFile</name></member>
      <member refid="classrrllvm_1_1Jit_1a130a9033f5e553542db7dccbbc91dbe2" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>builder</name></member>
      <member refid="classrrllvm_1_1Jit_1aa71f25762a7483cc342a3674881c44d1" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>compiledModuleBinaryStream</name></member>
      <member refid="classrrllvm_1_1Jit_1a004af13f555d2c7fdaf088bd6f2c037c" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>context</name></member>
      <member refid="classrrllvm_1_1Jit_1ab316cce1cd3f402e678fb3534da19b3d" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>emitToString</name></member>
      <member refid="classrrllvm_1_1MCJit_1a263099bab61e97232b8316fea6c92caa" prot="private" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>engineBuilder</name></member>
      <member refid="classrrllvm_1_1MCJit_1a2308811b59d84a4db126545b8d6f90cf" prot="private" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>errString</name></member>
      <member refid="classrrllvm_1_1MCJit_1a6832a83ee09ff19eb901d4b53dcbe073" prot="private" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>executionEngine</name></member>
      <member refid="classrrllvm_1_1Jit_1aa25373cc3dc5ac1bd2f7c162a4e044df" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>externalFunctionSignatures</name></member>
      <member refid="classrrllvm_1_1MCJit_1a95d0b38a36444ffb4d36a7592c3354c6" prot="private" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>functionPassManager</name></member>
      <member refid="classrrllvm_1_1Jit_1afb8cf53b3bde8eaa539b14cc685cb200" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>getBuilderNonOwning</name></member>
      <member refid="classrrllvm_1_1MCJit_1a9b07118c9077e486bb5393cd7c536fb7" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>getCompiledModelFromCache</name></member>
      <member refid="classrrllvm_1_1MCJit_1ad800ef0b104ffb3522e059796219da91" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getCompiledModuleStream</name></member>
      <member refid="classrrllvm_1_1Jit_1a1e2112dbdce27e06228eb49e5c8a3f47" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>getContextNonOwning</name></member>
      <member refid="classrrllvm_1_1MCJit_1a9a77adef72b42870b30e2c8fc0a6db58" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>getDataLayout</name></member>
      <member refid="classrrllvm_1_1Jit_1ae135808ab2a9ab0466cc1cc54715ad93" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getDefaultTargetMachine</name></member>
      <member refid="classrrllvm_1_1Jit_1a36e531717dce312189fd41dccf81140e" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getDefaultTargetTriple</name></member>
      <member refid="classrrllvm_1_1MCJit_1a6becdde6c4c01f7f926b82cd2cb554d9" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getExecutionEngineNonOwning</name></member>
      <member refid="classrrllvm_1_1MCJit_1a5745b69a08d8327de2943d04ca55c262" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getFunctionPassManager</name></member>
      <member refid="classrrllvm_1_1MCJit_1ac3b90702092cb6082b57ebea939b83ad" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>getModuleAsString</name></member>
      <member refid="classrrllvm_1_1Jit_1a92e5c8af5539c0e790328d66ed325d26" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>getModuleNonOwning</name></member>
      <member refid="classrrllvm_1_1Jit_1a7613abd146677cc3ee74bc9267ca5d1c" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getProcessTriple</name></member>
      <member refid="classrrllvm_1_1MCJit_1a2a7986ac94bc40151b023787c2057d29" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>getTargetMachine</name></member>
      <member refid="classrrllvm_1_1MCJit_1af7ec2ded7ff330f1d7229df211fa1b85" prot="private" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>initFunctionPassManager</name></member>
      <member refid="classrrllvm_1_1Jit_1af895c58cbe99d0e5dda02f689b80074d" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>Jit</name></member>
      <member refid="classrrllvm_1_1Jit_1ac9bfb0045cd3a21ecd4b48d7fb4683f8" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>Jit</name></member>
      <member refid="classrrllvm_1_1MCJit_1ab595a7d72e4838dbbe2027130b4ecc3b" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>lookupFunctionAddress</name></member>
      <member refid="classrrllvm_1_1MCJit_1a4aa0be70cb4c32f5cfdc2d48e19e53f5" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>mangleName</name></member>
      <member refid="classrrllvm_1_1MCJit_1a91eae38be659b79c86b536fd06da7a85" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>mapFunctionsToJitSymbols</name></member>
      <member refid="classrrllvm_1_1Jit_1a126ca0f75646887926342ef4ee8ea034" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>mapLLVMGeneratedFunctionsToSymbols</name></member>
      <member refid="classrrllvm_1_1MCJit_1a82766ec1e6989cc512e8755019dbc05a" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>MCJit</name></member>
      <member refid="classrrllvm_1_1Jit_1a78943fba79d6b4aa5a3d2e19b60de8e7" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>module</name></member>
      <member refid="classrrllvm_1_1Jit_1a1487ca6247ee86b6dab2020d4659d064" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>moduleBuffer</name></member>
      <member refid="classrrllvm_1_1Jit_1a5bf6d8132e7cdc6fadd635d39ee3f0a3" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>moduleNonOwning</name></member>
      <member refid="classrrllvm_1_1Jit_1a3cd9de39bf57162c328bdaca2b0edede" prot="protected" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>options</name></member>
      <member refid="classrrllvm_1_1Jit_1a2010d675d46f131db29d7b43b07454b1" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>setModuleIdentifier</name></member>
      <member refid="classrrllvm_1_1MCJit_1a11a02de74df8e811b98172f36a878cd7" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>transferObjectsToResources</name></member>
      <member refid="classrrllvm_1_1MCJit_1ac80f79da4a2bd4b8a924d92c6f564401" prot="private" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>writeObjectToBinaryStream</name></member>
      <member refid="classrrllvm_1_1Jit_1a3b8ed0a6c863013898f33f7bb9be650d" prot="public" virt="virtual"><scope>rrllvm::MCJit</scope><name>~Jit</name></member>
      <member refid="classrrllvm_1_1MCJit_1abfdb121bb47cc8f4ae3dfc0c4a2b8409" prot="public" virt="non-virtual"><scope>rrllvm::MCJit</scope><name>~MCJit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
