<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrr_1_1RoadRunner" kind="class" language="C++" prot="public">
    <compoundname>rr::RoadRunner</compoundname>
    <includes refid="rrRoadRunner_8h" local="no">rrRoadRunner.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18" prot="private" static="no" strong="no">
        <type></type>
        <name>VariableType</name>
        <enumvalue id="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a4ae4e1e200c7a750c23c3a46db0c4296" prot="private">
          <name>vtSpecies</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a08535eb44df113e1d6f85f42726753bd" prot="private">
          <name>vtFlux</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1828" column="26" bodyfile="rrRoadRunner.h" bodystart="1828" bodyend="1830"/>
      </memberdef>
      <memberdef kind="enum" id="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386" prot="private" static="no" strong="no">
        <type></type>
        <name>JacobianMode</name>
        <enumvalue id="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386ad752365597bec82910aae067d603df58" prot="private">
          <name>JACOBIAN_FULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386a0b8d064264c228c12c32627d3916804f" prot="private">
          <name>JACOBIAN_REDUCED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1864" column="26" bodyfile="rrRoadRunner.h" bodystart="1864" bodyend="1866"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1a3c3d5f6711f1c17c495627e970378f7d" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool rr::RoadRunner::llvmInitialized</definition>
        <argsstring></argsstring>
        <name>llvmInitialized</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>PRIVATE. </para>
        </briefdescription>
        <detaileddescription>
<para>True once the llvm initialization routines have been run. This is necessary because they are not threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1781" column="21" bodyfile="rrRoadRunner.h" bodystart="1781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1a4d337717ab4237e734f268c54d55cea6" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool rr::RoadRunner::solversRegistered</definition>
        <argsstring></argsstring>
        <name>solversRegistered</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1782" column="21" bodyfile="rrRoadRunner.h" bodystart="1782" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1a0045bee656601921b9f2ef88ab5b0599" prot="private" static="no" mutable="no">
        <type>class <ref refid="classrr_1_1RoadRunnerImpl" kindref="compound">RoadRunnerImpl</ref> *</type>
        <definition>class RoadRunnerImpl* rr::RoadRunner::impl</definition>
        <argsstring></argsstring>
        <name>impl</name>
        <briefdescription>
<para>private implementation class, can only access if inside the implementation file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1788" column="30" bodyfile="rrRoadRunner.h" bodystart="1788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1a09cc39fcf1ae7a5046291a1b47d58d45" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rr::RoadRunner::fileMagicNumber</definition>
        <argsstring></argsstring>
        <name>fileMagicNumber</name>
        <initializer>= 0xAD6F52</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1790" column="19" bodyfile="rrRoadRunner.h" bodystart="1790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1aab16c1bf7efe4d1076d3715bd4c1d6e0" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rr::RoadRunner::dataVersionNumber</definition>
        <argsstring></argsstring>
        <name>dataVersionNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1791" column="19" bodyfile="rrRoadRunner.h" bodystart="1791" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a04a6fd481cfacc2510d5d113520143ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(unsigned int level=3, unsigned int version=2)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>unsigned int</type>
          <declname>level</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>version</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>create an empty <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object with given SBML level and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="66" column="9" bodyfile="rrRoadRunner.cpp" bodystart="536" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad66240360fee4ccad50097e4b4c8460b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(const std::string &amp;uriOrSBML, const Dictionary *options=0)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uriOrSBML</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>load an sbml document from anywhere. </para>
        </briefdescription>
        <detaileddescription>
<para>same arguments as load.</para>
<para>If options is not null, then the RoadRunner::computeAndAssignConservationLaws flag is set to whatever value is specified in the options struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uriOrSBML</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI, local path or sbml document contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>an options struct, if null, default values are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Register solvers</para>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="79" column="9" bodyfile="rrRoadRunner.cpp" bodystart="568" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3e326546550b3f4533dd7d6b3f2f4250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(const std::string &amp;compiler, const std::string &amp;tempDir, const std::string &amp;supportCodeDir)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>compiler</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tempDir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>supportCodeDir</declname>
        </param>
        <briefdescription>
<para>All three of the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> options default to the empty std::string, in this case, the default values are used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compiler</parametername>
</parameternamelist>
<parameterdescription>
<para>If LLVM build is enabled, the compiler defaults to LLVM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tempDir</parametername>
</parameternamelist>
<parameterdescription>
<para>If the old external C compiler is used, this is the where the C files are written to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>supportCodeDir</parametername>
</parameternamelist>
<parameterdescription>
<para>If the old external C compiler is used, this is the location where roadrunner C include files are. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="91" column="9" bodyfile="rrRoadRunner.cpp" bodystart="598" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa6518611d8ac7cd908dbf5704d129020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(const RoadRunner &amp;rr)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>const <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para><ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="97" column="9" bodyfile="rrRoadRunner.cpp" bodystart="629" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa12fab77f4edec82aa83d28c36045afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::operator=</definition>
        <argsstring>(const RoadRunner &amp;rr)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para><ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="102" column="14" bodyfile="rrRoadRunner.cpp" bodystart="642" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a102e7c27e29219ae56e48ffd607fd621" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>rr::RoadRunner::~RoadRunner</definition>
        <argsstring>()</argsstring>
        <name>~RoadRunner</name>
        <briefdescription>
<para>free any memory this class allocated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="107" column="17" bodyfile="rrRoadRunner.cpp" bodystart="655" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6cc53f3668f94b3d88764e14b24bc87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getInstanceID</definition>
        <argsstring>()</argsstring>
        <name>getInstanceID</name>
        <briefdescription>
<para>When there are multiple instances of <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref>, this is the instance id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="112" column="13" bodyfile="rrRoadRunner.cpp" bodystart="532" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4860f41d8552118f3c8c5d5fb6d999f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getInstanceCount</definition>
        <argsstring>()</argsstring>
        <name>getInstanceCount</name>
        <briefdescription>
<para>Number of currently running <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="117" column="13" bodyfile="rrRoadRunner.cpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3280d3b45ff394b0f507fb0a5983d582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getInfo</definition>
        <argsstring>()</argsstring>
        <name>getInfo</name>
        <briefdescription>
<para>information about the current state of this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="128" column="21" bodyfile="rrRoadRunner.cpp" bodystart="671" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a284282cedaec1cc02059125532378cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getCurrentTime</definition>
        <argsstring>()</argsstring>
        <name>getCurrentTime</name>
        <briefdescription>
<para>return the current time as a double </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="133" column="16" bodyfile="rrRoadRunner.cpp" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a329f2009c2688bbedc906c21c4b8b3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classrr_1_1Compiler" kindref="compound">Compiler</ref> *</type>
        <definition>Compiler * rr::RoadRunner::getCompiler</definition>
        <argsstring>()</argsstring>
        <name>getCompiler</name>
        <briefdescription>
<para>The <ref refid="classrr_1_1Compiler" kindref="compound">Compiler</ref> that the ModelGenerator is using to compile / interpret sbml code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="138" column="23" bodyfile="rrRoadRunner.cpp" bodystart="739" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8372249ea83ce40f91b935b09791a920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setCompiler</definition>
        <argsstring>(const std::string &amp;compiler)</argsstring>
        <name>setCompiler</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>compiler</declname>
        </param>
        <briefdescription>
<para>Set the name of the externa compiler to use. </para>
        </briefdescription>
        <detaileddescription>
<para>Some ModelGenerators may have no use for this value.</para>
<para>An exception is raised if the std::string is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="146" column="14" bodyfile="rrRoadRunner.cpp" bodystart="744" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac7ed0222daee67405616805b1bd02125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> *</type>
        <definition>Integrator * rr::RoadRunner::getIntegrator</definition>
        <argsstring>()</argsstring>
        <name>getIntegrator</name>
        <briefdescription>
<para>get a pointer to the integrator which is currently being used to time evolve the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="152" column="20" bodyfile="rrRoadRunner.cpp" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aaaefc29aa1ff7f6fffdbcaa4425408cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> *</type>
        <definition>SteadyStateSolver * rr::RoadRunner::getSteadyStateSolver</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateSolver</name>
        <briefdescription>
<para>get a pointer to the current steady state solver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="157" column="27" bodyfile="rrRoadRunner.cpp" bodystart="753" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a51b5fe2a5b0d1b67120e61aa39f6c4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> *</type>
        <definition>SensitivitySolver * rr::RoadRunner::getSensitivitySolver</definition>
        <argsstring>()</argsstring>
        <name>getSensitivitySolver</name>
        <briefdescription>
<para>get a pointer to the current sensitivities solver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="162" column="27" bodyfile="rrRoadRunner.cpp" bodystart="757" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8acc349df7a67c32d696bb56952a069e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> *</type>
        <definition>Integrator * rr::RoadRunner::getIntegratorByName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getIntegratorByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get an integrator by name without switching the current integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="167" column="20" bodyfile="rrRoadRunner.cpp" bodystart="763" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a588a2b17f736b4830f0327bf18bf455d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> *</type>
        <definition>SteadyStateSolver * rr::RoadRunner::getSteadyStateSolverByName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getSteadyStateSolverByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> by name without switching the current solver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="172" column="27" bodyfile="rrRoadRunner.cpp" bodystart="775" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a53e466cbc03508fc2f02e6cc957a3309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> *</type>
        <definition>SensitivitySolver * rr::RoadRunner::getSensitivitySolverByName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getSensitivitySolverByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> by name without switching the current solver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="177" column="27" bodyfile="rrRoadRunner.cpp" bodystart="787" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aaa2b76b778006437b495a524b7ec94ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> *</type>
        <definition>Integrator * rr::RoadRunner::makeIntegrator</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>makeIntegrator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Make an integrator for the given name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="182" column="20" bodyfile="rrRoadRunner.cpp" bodystart="800" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad1c1bf612dfbc109788eb79450fadc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> *</type>
        <definition>SteadyStateSolver * rr::RoadRunner::makeSteadyStateSolver</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>makeSteadyStateSolver</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Make an SteadyStateSolver* for the given name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="187" column="27" bodyfile="rrRoadRunner.cpp" bodystart="814" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1accc767f44bdc41e29155e8a3ff6a4eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> *</type>
        <definition>SensitivitySolver * rr::RoadRunner::makeSensitivitySolver</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>makeSensitivitySolver</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Make <ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> for the given name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="192" column="27" bodyfile="rrRoadRunner.cpp" bodystart="827" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad9d66d24ede15b0c28db4093b782cd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getExistingIntegratorNames</definition>
        <argsstring>()</argsstring>
        <name>getExistingIntegratorNames</name>
        <briefdescription>
<para>Return a list of the names of all existing integrators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="197" column="21" bodyfile="rrRoadRunner.cpp" bodystart="840" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa0bc0322f7c8728205afe03628c136cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getExistingSteadyStateSolverNames</definition>
        <argsstring>()</argsstring>
        <name>getExistingSteadyStateSolverNames</name>
        <briefdescription>
<para>Return a list of the names of all existing integrators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="202" column="21" bodyfile="rrRoadRunner.cpp" bodystart="848" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa8b6f3e37b479867bc58c5ba7c40fb41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getExistingSensitivitySolverNames</definition>
        <argsstring>()</argsstring>
        <name>getExistingSensitivitySolverNames</name>
        <briefdescription>
<para>Return a list of the names of all existing sensitivity solvers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="207" column="21" bodyfile="rrRoadRunner.cpp" bodystart="856" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1400fd93277e9c4b85be1685a4c6ebb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setIntegrator</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setIntegrator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>set the current <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> to </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="228" column="14" bodyfile="rrRoadRunner.cpp" bodystart="889" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8bfdd74d62dfebda90f01d183c8f4201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateSolver</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setSteadyStateSolver</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>set the current <ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> to </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
use getRegisteredSteadyStateSolverNames to get a list of available names </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="235" column="14" bodyfile="rrRoadRunner.cpp" bodystart="906" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa3581eec71bf1d7385d86bb6b2e247ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSensitivitySolver</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setSensitivitySolver</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>set the current <ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> to </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
use getRegisteredSensitivitySolverNames to get a list of available sensitivity solver names </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="242" column="14" bodyfile="rrRoadRunner.cpp" bodystart="927" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8ca66bd2ccdbe4e9fac1457d67884a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::integratorExists</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>integratorExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>returns true if integrator </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>exists.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Use getRegisteredIntegratorNames to get a list of available integrator solver names. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="249" column="14" bodyfile="rrRoadRunner.cpp" bodystart="948" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a079cff347871871d192c2db5c02cbdf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::steadyStateSolverExists</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>steadyStateSolverExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>returns true if <ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="254" column="14" bodyfile="rrRoadRunner.cpp" bodystart="957" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae645693f2c3652b951e106be544a09cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::sensitivitySolverExists</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>sensitivitySolverExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>returns true if <ref refid="classrr_1_1SensitivitySolver" kindref="compound">SensitivitySolver</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>exists. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="259" column="14" bodyfile="rrRoadRunner.cpp" bodystart="966" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aecea2dbffc17d0322b00e18f126058b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::isModelLoaded</definition>
        <argsstring>()</argsstring>
        <name>isModelLoaded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="266" column="14" bodyfile="rrRoadRunner.cpp" bodystart="988" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac03b62cc39f62a61a556fe393e859e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getModelName</definition>
        <argsstring>()</argsstring>
        <name>getModelName</name>
        <briefdescription>
<para>returns the model name if a model is loaded, empty std::string otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="271" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3300" bodyend="3311"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a946f9140f83ede43c2e5bc2192d8e052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setModelName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setModelName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>sets the model name if a model is loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="276" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3313" bodyend="3317"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad46f7fb56422a9220e9b02d5acc13d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getModelId</definition>
        <argsstring>()</argsstring>
        <name>getModelId</name>
        <briefdescription>
<para>returns the model id if a model is loaded, empty std::string otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="281" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3319" bodyend="3327"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5c63bb6592faf97451de620a6ab4d444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setModelId</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>setModelId</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>sets the model id if a model is loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="286" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3329" bodyend="3333"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6486934df5e346da4209a578f4eaea2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::clearModel</definition>
        <argsstring>()</argsstring>
        <name>clearModel</name>
        <briefdescription>
<para>Clears the currently loaded model and all associated memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes jitted code and libStruct data <simplesect kind="return"><para>True if memory was freed, false if no model was loaded in the first place </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="294" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1507" bodyend="1520"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a27aedd28b2a2d5453200ca4a4a2bf4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::oneStep</definition>
        <argsstring>(double currentTime, double stepSize, bool reset=true)</argsstring>
        <name>oneStep</name>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Carry out a single integration step using a stepsize as indicated in the method call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para>current time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the step size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to reset the model (defaults to true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="304" column="16" bodyfile="rrRoadRunner.cpp" bodystart="2261" bodyend="2276"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2d4f3df674f8f6500d87a584b4f365cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::internalOneStep</definition>
        <argsstring>(double currentTime, double stepSize, bool reset=true)</argsstring>
        <name>internalOneStep</name>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Carry out a single internal solver integration step. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para>current time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the step size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to reset the model (defaults to true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="313" column="16" bodyfile="rrRoadRunner.cpp" bodystart="2279" bodyend="2303"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a377834f22edadb7706779ecca7c1eb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ls::DoubleMatrix *</type>
        <definition>const ls::DoubleMatrix * rr::RoadRunner::simulate</definition>
        <argsstring>(const SimulateOptions *options=0)</argsstring>
        <name>simulate</name>
        <param>
          <type>const <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> *</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Simulate the current SBML model. </para>
        </briefdescription>
        <detaileddescription>
<para>If options is null, then the current simulation settings (start time, end time, n steps) are used. If options is not null, then the current simulation settings are set to the values specified by options and they are used.</para>
<para>The options <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> may contain a large number of options, for a complete list of all available options for each integrator type, <simplesect kind="see"><para><ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref>, </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref>.</para>
</simplesect>
For example, to perform a simulation from time 0 to 10 with 1000 steps, using a stiff integtator, you would: <programlisting><codeline><highlight class="normal">RoadRunner<sp/>rr<sp/>=<sp/>RoadRunner(&quot;someFile.xml&quot;);</highlight></codeline>
<codeline><highlight class="normal">SimulateOptions<sp/>opt<sp/>=<sp/>rr.getSimulateOptions();</highlight></codeline>
<codeline><highlight class="normal">opt.start<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">opt.duration<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">opt.steps<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>DoubleMatrix<sp/>*result<sp/>=<sp/>rr.simulate(&amp;opt);</highlight></codeline>
</programlisting></para>
<para>Similarly, options specific to a particular integrator, such as the &apos;seed&apos; option with the Gillespie integrator, this is set via the &apos;setIntegrator&apos; &quot;integrator&quot; key, i.e. <programlisting><codeline><highlight class="normal">RoadRunner<sp/>rr<sp/>=<sp/>RoadRunner(&quot;someFile.xml&quot;);</highlight></codeline>
<codeline><highlight class="normal">rr.setIntegrator(&quot;gillespie&quot;);</highlight></codeline>
<codeline><highlight class="normal">SimulateOptions<sp/>opt;</highlight></codeline>
<codeline><highlight class="normal">opt.start<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">opt.duration<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">opt.steps<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;stiff&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;seed&quot;,<sp/>12345);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>DoubleMatrix<sp/>*result<sp/>=<sp/>rr.simulate(&amp;opt);</highlight></codeline>
</programlisting> Here, the &quot;integrator&quot; specifies the integrator to use. The &quot;stiff&quot; key is only used by the deterministic solvers, and it is safely ignored by the stochastic solvers. Also, the &quot;seed&quot; sets the random seed that the integrator uses. For more information about all of the available options for each integrator, <simplesect kind="see"><para>IntegratorFactory::getIntegratorOptions".</para>
</simplesect>
If one wants to not store the result matrix in memory and instead write it to a file during simulation, one can set the output_file option. When output file is nonempty, <ref refid="classrr_1_1RoadRunner_1a377834f22edadb7706779ecca7c1eb4e" kindref="member">simulate()</ref> will write to its path once every Config::K_ROWS_PER_WRITE rows are generated and clear the matrix. So an empty result matrix is returned, and the last simulation results are not stored.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>an</parametername>
</parameternamelist>
<parameterdescription>
<para>std::exception if any options are invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a borrowed reference to a DoubleMatrix object if successful. The matrix will be empty if output_file is specified and nonempty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="369" column="32" bodyfile="rrRoadRunner.cpp" bodystart="1916" bodyend="2232"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad3701c04d6317e96c2d2bb235b99d60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ls::DoubleMatrix *</type>
        <definition>const ls::DoubleMatrix * rr::RoadRunner::simulate</definition>
        <argsstring>(double start, double stop, int points)</argsstring>
        <name>simulate</name>
        <param>
          <type>double</type>
          <declname>start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <briefdescription>
<para>simulate the model using currently set integrator </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>starting time to simulate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>what time point does the simulation end? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>how many points to output (one greater than the number of steps to take). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="377" column="32" bodyfile="rrRoadRunner.cpp" bodystart="2234" bodyend="2242"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3148beddf65c37bcdce6cfd2726c48ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ls::DoubleMatrix *</type>
        <definition>const ls::DoubleMatrix * rr::RoadRunner::simulate</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;times)</argsstring>
        <name>simulate</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>simulate the model using currently set integrator </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>times</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of all the time outputs desired. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="383" column="32" bodyfile="rrRoadRunner.cpp" bodystart="2244" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5b337a5d5625545db98bdcaf9ba71c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>&lt; double, double &gt;</type>
        <definition>Matrix3D&lt; double, double &gt; rr::RoadRunner::timeSeriesSensitivities</definition>
        <argsstring>(double start, double stop, int num, std::vector&lt; std::string &gt; params=std::vector&lt; std::string &gt;(), std::vector&lt; std::string &gt; species=std::vector&lt; std::string &gt;(), int k=0)</argsstring>
        <name>timeSeriesSensitivities</name>
        <param>
          <type>double</type>
          <declname>start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>params</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>species</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>simulate a timeseries with sensitivities from start to step with num data points. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref> indexed by time. Each element of the 3D matrix is a Matrix&lt;double&gt; with rows and columns parameters and model variables respectively. The parameter k determines the kth order derivative of the sensitivity information that will be returned <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>starting time for time series simulation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>last time point for time series simulation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>number of data points to simulate. Determines Z of <ref refid="classrr_1_1Matrix3D" kindref="compound">Matrix3D</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of parameters that you want sensitivity for. When empty (default), compute sensitivities for all parameters vs all variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>species</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of species to include in the results Default is empty, in which case all species will be included. All species are selected during solving and slicing only occurs at the end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>(default 0) return the kth other derivative of the sensitivity data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="403" column="18" bodyfile="rrRoadRunner.cpp" bodystart="2250" bodyend="2259"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac982f0742233d5ad487064734c3b793c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::saveState</definition>
        <argsstring>(std::string filename, char opt=&apos;b&apos;)</argsstring>
        <name>saveState</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>char</type>
          <declname>opt</declname>
          <defval>&apos;b&apos;</defval>
        </param>
        <briefdescription>
<para>similar to saveStateS but save data to file </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to save the data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>either &apos;b&apos; (default) or &apos;r&apos;. The latter is used for debugging. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1a3f30bcb94eeb86ac029b123f51214c94" kindref="member">RoadRunner::saveStateS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1a56030d98802a87d9aa960cbb7bb5f0c6" kindref="member">RoadRunner::loadState</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="416" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5269" bodyend="5276"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3f30bcb94eeb86ac029b123f51214c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::stringstream *</type>
        <definition>std::stringstream * rr::RoadRunner::saveStateS</definition>
        <argsstring>(char opt=&apos;b&apos;)</argsstring>
        <name>saveStateS</name>
        <param>
          <type>char</type>
          <declname>opt</declname>
          <defval>&apos;b&apos;</defval>
        </param>
        <briefdescription>
<para>save state as binary to a stringstream so it can be loaded again later. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new reference to a stringstream - the caller is responsible for reclaiming memory Importantly, if the stream is read into a new <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> instance via <ref refid="classrr_1_1RoadRunner_1a68f5a245b02936d4ed83dcfe9145bf83" kindref="member">RoadRunner::loadStateS</ref> then the user no longer needs to handle the reference manually because <ref refid="classrr_1_1RoadRunner_1a68f5a245b02936d4ed83dcfe9145bf83" kindref="member">RoadRunner::loadStateS</ref> does it after loading the state. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>either &apos;b&apos; (default) or &apos;r&apos;. The latter is used for debugging. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1a68f5a245b02936d4ed83dcfe9145bf83" kindref="member">RoadRunner::loadStateS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1ac982f0742233d5ad487064734c3b793c" kindref="member">RoadRunner::saveState</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="428" column="27" bodyfile="rrRoadRunner.cpp" bodystart="5278" bodyend="5470"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a56030d98802a87d9aa960cbb7bb5f0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::loadState</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>loadState</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Loads a roadrunner instance saved by saveState with the &apos;b&apos; option. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1a68f5a245b02936d4ed83dcfe9145bf83" kindref="member">RoadRunner::loadStateS</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1ac982f0742233d5ad487064734c3b793c" kindref="member">RoadRunner::saveState</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="436" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5482" bodyend="5495"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a68f5a245b02936d4ed83dcfe9145bf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::loadStateS</definition>
        <argsstring>(std::stringstream *state)</argsstring>
        <name>loadStateS</name>
        <param>
          <type>std::stringstream *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>load state from a </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>stringstream that was produced by <ref refid="classrr_1_1RoadRunner_1a3f30bcb94eeb86ac029b123f51214c94" kindref="member">RoadRunner::saveStateS</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The stingstream pointer should be heap allocated and generated from <ref refid="classrr_1_1RoadRunner_1a3f30bcb94eeb86ac029b123f51214c94" kindref="member">RoadRunner::saveStateS</ref>. It is an error to use a stringstream that was generated in any other way. The memory associated with the stringstream is automatically cleaned up after loading the state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="447" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5497" bodyend="5630"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a12d2a06c5525aaf10c541d9cc91665ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ls::DoubleMatrix *</type>
        <definition>const ls::DoubleMatrix * rr::RoadRunner::getSimulationData</definition>
        <argsstring>() const</argsstring>
        <name>getSimulationData</name>
        <briefdescription>
<para><ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> keeps a copy of the simulation data around until the next call to simulate. </para>
        </briefdescription>
        <detaileddescription>
<para>This matrix can be obtained here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="453" column="32" bodyfile="rrRoadRunner.cpp" bodystart="5238" bodyend="5240"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aca42a09b3b1ce89330d42c48ddae21c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSimulateOptions</definition>
        <argsstring>(const SimulateOptions &amp;settings)</argsstring>
        <name>setSimulateOptions</name>
        <param>
          <type>const <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> &amp;</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="455" column="14" bodyfile="rrRoadRunner.cpp" bodystart="992" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1200e15aa2a3c0b8662e26f74f8320ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> &amp;</type>
        <definition>SimulateOptions &amp; rr::RoadRunner::getSimulateOptions</definition>
        <argsstring>()</argsstring>
        <name>getSimulateOptions</name>
        <briefdescription>
<para>get a reference to the <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> that were set either by setSimulateOptions or simulate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="461" column="25" bodyfile="rrRoadRunner.cpp" bodystart="996" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abca853c2d24000857a1c0971b99ec004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrr_1_1RoadRunnerOptions" kindref="compound">RoadRunnerOptions</ref> &amp;</type>
        <definition>RoadRunnerOptions &amp; rr::RoadRunner::getOptions</definition>
        <argsstring>()</argsstring>
        <name>getOptions</name>
        <briefdescription>
<para>Get a reference to the options that determine how this class should behave. </para>
        </briefdescription>
        <detaileddescription>
<para>These are general options. For options specific for loading or simulationg, <simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1a1200e15aa2a3c0b8662e26f74f8320ae" kindref="member">getSimulateOptions</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="469" column="27" bodyfile="rrRoadRunner.cpp" bodystart="5234" bodyend="5236"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5e00a39a88bf7d36c165f4ca9fbb3674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setOptions</definition>
        <argsstring>(const RoadRunnerOptions &amp;)</argsstring>
        <name>setOptions</name>
        <param>
          <type>const <ref refid="structrr_1_1RoadRunnerOptions" kindref="compound">RoadRunnerOptions</ref> &amp;</type>
          <defname>opt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="472" column="14" bodyfile="rrRoadRunner.cpp" bodystart="663" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae154e3cc9560f4a5725f03cbe9bb3aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getSBML</definition>
        <argsstring>(int level=0, int version=0)</argsstring>
        <name>getSBML</name>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>get the originally loaded sbml document as a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para>This may optionally up or downconvert the document to a different version, if the level and version arguments are non-zero.</para>
<para>If both arguments are zero, then the document is left alone and the </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="482" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4420" bodyend="4432"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abd7ed519514ee77cfe64c5d4cab6fc3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getCurrentSBML</definition>
        <argsstring>(int level=0, int version=0)</argsstring>
        <name>getCurrentSBML</name>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the SBML with the current model parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This is different than getSBML which returns the orginal SBML.</para>
<para>This may optionally up or downconvert the document to a different version, if the level and version arguments are non-zero.</para>
<para>If both arguments are zero, then the document is left alone and the original version is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="494" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4434" bodyend="4490"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae4b0eaa39fd37737e5f5fd7f7741e06c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Picks up default options from config. </para>
        </briefdescription>
        <detaileddescription>
<para>The current default is <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394add36248cdf4b1f588dd6fdd11855b012" kindref="member">SelectionRecord::TIME</ref> | <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394a2235d37b12b17d658b8f33a87712c806" kindref="member">SelectionRecord::RATE</ref> | <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394a6782153cdd565a17aef949662aa11a4a" kindref="member">SelectionRecord::FLOATING</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="502" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1522" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a807cbac5ca760b0f3ff033851cf5276b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::reset</definition>
        <argsstring>(int options)</argsstring>
        <name>reset</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>reset the model accordign to a bitfield specified by the <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394" kindref="member">SelectionRecord::SelectionType</ref> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Note, this would make more sense as an unsigned, however SWIG has issues mapping an enum to an unsigned, but seems to std::map enums just fine to an int.</para>
<para>For example, to reset the floating species, time and rate rule values: <programlisting><codeline><highlight class="normal">rr.reset(SelectionRecord::TIME<sp/>|<sp/>SelectionRecord::RATE<sp/>|<sp/>SelectionRecord::FLOATING);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>a bitmask made from the SelectionRecord::SelectionTypes values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="518" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1531" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5d1d6591131764e8e7a6cdd6a9ae6ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::resetSelectionLists</definition>
        <argsstring>()</argsstring>
        <name>resetSelectionLists</name>
        <briefdescription>
<para>resets time course and steady state selection lists to defaults </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="523" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1550" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a57f1463dafcc61a90c3122a8fb37b08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::changeInitialConditions</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;ic)</argsstring>
        <name>changeInitialConditions</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
<para>set the floating species initial concentrations. </para>
        </briefdescription>
        <detaileddescription>
<para>equivalent to <ref refid="classrr_1_1ExecutableModel_1a217c61819d9b029c5928ace53b805e89" kindref="member">ExecutableModel::reset</ref>, then <ref refid="classrr_1_1ExecutableModel_1aecd3bdfe291bd3791fe7e4e75a71ac3f" kindref="member">ExecutableModel::setFloatingSpeciesConcentrations</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="530" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4492" bodyend="4501"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afa827d569de3c83dd286ac2aa25d1cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
        <definition>ExecutableModel * rr::RoadRunner::getModel</definition>
        <argsstring>()</argsstring>
        <name>getModel</name>
        <briefdescription>
<para>get a pointer to the <ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> owned by the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="535" column="25" bodyfile="rrRoadRunner.cpp" bodystart="659" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9d1e7a6e9b2fff7561bd59d2e8475d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::load</definition>
        <argsstring>(const std::string &amp;uriOrSBML, const Dictionary *options=0)</argsstring>
        <name>load</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uriOrSBML</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>load an sbml document from anywhere. </para>
        </briefdescription>
        <detaileddescription>
<para>If options is not null, then the RoadRunner::computeAndAssignConservationLaws flag is set to whatever value is specified in the options struct.</para>
<para>WARNING, will no longer return a value in next version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uriOrSBML</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI, local path or sbml document contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>an options struct, if null, default values are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="548" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1416" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a422a0c1c50dfe1b6ae343e9313a005ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref></type>
        <definition>SelectionRecord rr::RoadRunner::createSelection</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>createSelection</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>create a selection record. </para>
        </briefdescription>
        <detaileddescription>
<para>This record can be used to select values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="557" column="29" bodyfile="rrRoadRunner.cpp" bodystart="4577" bodyend="4749"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a093f8d8cfe6959e2607eddccfd4a4989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
        <definition>std::vector&lt; rr::SelectionRecord &gt; &amp; rr::RoadRunner::getSelections</definition>
        <argsstring>()</argsstring>
        <name>getSelections</name>
        <briefdescription>
<para>Returns the currently selected columns that will be returned by calls to <ref refid="classrr_1_1RoadRunner_1a377834f22edadb7706779ecca7c1eb4e" kindref="member">simulate()</ref> or simulateEx(,,). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="563" column="21" bodyfile="rrRoadRunner.cpp" bodystart="1565" bodyend="1567"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa030bd78fd18af9737b6798e246dd4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getValue</definition>
        <argsstring>(const std::string &amp;sel)</argsstring>
        <name>getValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
<para>Creates a new selection based on the selection std::string, and returns the value it queries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="569" column="16" bodyfile="rrRoadRunner.cpp" bodystart="4536" bodyend="4538"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1ffdbba3a4b35b4092bc743aad78ccdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getValue</definition>
        <argsstring>(const SelectionRecord &amp;record)</argsstring>
        <name>getValue</name>
        <param>
          <type>const <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="571" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1134" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae2638d52117ad68f9ca1dc7bff285bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSelections</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;selections)</argsstring>
        <name>setSelections</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="574" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4761" bodyend="4779"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a152430ddf10b8270698519bd4d1d0738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSelections</definition>
        <argsstring>(const std::vector&lt; rr::SelectionRecord &gt; &amp;selections)</argsstring>
        <name>setSelections</name>
        <param>
          <type>const std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="576" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4781" bodyend="4783"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab5c1eda6c4babfbe69d46eaaa00e4b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getSelectedValues</definition>
        <argsstring>()</argsstring>
        <name>getSelectedValues</name>
        <briefdescription>
<para>returns the values selected with <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> for the current model time / timestep") </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="581" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4541" bodyend="4553"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8891806bc553fef5898f9e81751a9899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getIds</definition>
        <argsstring>(int types, std::list&lt; std::string &gt; &amp;ids)</argsstring>
        <name>getIds</name>
        <param>
          <type>int</type>
          <declname>types</declname>
        </param>
        <param>
          <type>std::list&lt; std::string &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>populates a given list with all the ids that this class can accept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>types is -1 when <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> is set to ALL.</para>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="586" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5034" bodyend="5053"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5008edbb3df7cd74abb87414638dea55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getIndependentFloatingSpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getIndependentFloatingSpeciesIds</name>
        <briefdescription>
<para>Gets the ids for all independent floating species. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM</para>
</simplesect>
Independent means (in this case) that the species is unique up to a conserved cycle, i.e. each conserved cycle counts for only one species. See Sauro, Systems Biology: Introduction to Pathway Modeling, 1st ed. pp. 60. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="596" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5055" bodyend="5057"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae1510bf8ed8a09c375605346c21eaefc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getDependentFloatingSpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getDependentFloatingSpeciesIds</name>
        <briefdescription>
<para>Gets the ids for all dependent floating species. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM</para>
</simplesect>
See <ref refid="classrr_1_1RoadRunner_1a5008edbb3df7cd74abb87414638dea55" kindref="member">getIndependentFloatingSpeciesIds</ref> for an explanation of independent vs. dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="604" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5059" bodyend="5061"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2282dace1e13af6f074819684536c2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getFloatingSpeciesConcentrationIds</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesConcentrationIds</name>
        <briefdescription>
<para>Gets the ids for all floating species concentrations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="610" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5181" bodyend="5189"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0bf792116912df16a5bffd637eb241c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getFloatingSpeciesInitialConcentrationIds</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesInitialConcentrationIds</name>
        <briefdescription>
<para>Gets the ids for all initial floating species concentrations. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classrr_1_1RoadRunner_1a5008edbb3df7cd74abb87414638dea55" kindref="member">getIndependentFloatingSpeciesIds</ref> for an explanation of independent vs. dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="617" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5201" bodyend="5209"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a64fd889ed2292a496bc06739e8fa206e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getSupportedIdTypes</definition>
        <argsstring>()</argsstring>
        <name>getSupportedIdTypes</name>
        <briefdescription>
<para>returns a bit field of the ids that this class supports. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="622" column="13" bodyfile="rrRoadRunner.cpp" bodystart="5063" bodyend="5071"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2aeb31b55a8f049c27910cd00f90c868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setValue</definition>
        <argsstring>(const std::string &amp;id, double value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>sets the value coresponding to the given selection std::string </para>
        </briefdescription>
        <detaileddescription>
<para>raises an exception in the selection std::string is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="630" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4517" bodyend="4533"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a530082f417fdf1f947fcdf8c936ff074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getFloatingSpeciesAmountsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesAmountsNamedArray</name>
        <briefdescription>
<para>Returns the floating species amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="638" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2362" bodyend="2381"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a449efe2b9a55e7c728c3a7ad47d0454e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getFloatingSpeciesConcentrationsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesConcentrationsNamedArray</name>
        <briefdescription>
<para>Returns the floating species concentrations as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="644" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2383" bodyend="2402"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a02467c06ea6325afa7536f29ec0c9f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getBoundarySpeciesAmountsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesAmountsNamedArray</name>
        <briefdescription>
<para>Returns the boundary species amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="650" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3527" bodyend="3546"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab13b18bcd87ed95a65b0f54412b22d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getBoundarySpeciesConcentrationsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesConcentrationsNamedArray</name>
        <briefdescription>
<para>Returns the boundary species concentrations as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="656" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3505" bodyend="3524"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aeef546a1279f26025bd97e6f574a5a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getIndependentFloatingSpeciesAmountsV</definition>
        <argsstring>()</argsstring>
        <name>getIndependentFloatingSpeciesAmountsV</name>
        <briefdescription>
<para>Returns the independent floating species amounts as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="662" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2404" bodyend="2413"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac61b6d42fa24571e256af51f4b5f3859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getDependentFloatingSpeciesAmountsV</definition>
        <argsstring>()</argsstring>
        <name>getDependentFloatingSpeciesAmountsV</name>
        <briefdescription>
<para>Returns the dependent floating species amounts as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="668" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2415" bodyend="2425"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8664db2797f10dd0505898532c17d357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getIndependentFloatingSpeciesConcentrationsV</definition>
        <argsstring>()</argsstring>
        <name>getIndependentFloatingSpeciesConcentrationsV</name>
        <briefdescription>
<para>Returns the independent floating species concentrations as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="674" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2427" bodyend="2436"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a56c4c2dbf8dc303904b0b4b23ed81096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getDependentFloatingSpeciesConcentrationsV</definition>
        <argsstring>()</argsstring>
        <name>getDependentFloatingSpeciesConcentrationsV</name>
        <briefdescription>
<para>Returns the dependent floating species concentrations as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="680" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2438" bodyend="2448"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1379bc409a52fd7d43dc78abbdda77eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getIndependentFloatingSpeciesAmountsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getIndependentFloatingSpeciesAmountsNamedArray</name>
        <briefdescription>
<para>Returns the independent floating species amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="686" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2450" bodyend="2464"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a698b6a158299d3ba4a76f78a647f32a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getDependentFloatingSpeciesAmountsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getDependentFloatingSpeciesAmountsNamedArray</name>
        <briefdescription>
<para>Returns the dependent floating species amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="692" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2466" bodyend="2480"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adb87f31990fb15986ae6f97ffc261933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getIndependentFloatingSpeciesConcentrationsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getIndependentFloatingSpeciesConcentrationsNamedArray</name>
        <briefdescription>
<para>Returns the independent floating concentrations amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="698" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2482" bodyend="2496"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5e941874b927f84ae9364a309f9ea74b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getDependentFloatingSpeciesConcentrationsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getDependentFloatingSpeciesConcentrationsNamedArray</name>
        <briefdescription>
<para>Returns the dependent floating concentrations amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Claire </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="704" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2498" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a129683b1d67a59066a0759983a9be38a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getRatesOfChange</definition>
        <argsstring>()</argsstring>
        <name>getRatesOfChange</name>
        <briefdescription>
<para>Returns the rate of change of the floating species as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="710" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2515" bodyend="2546"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a228559aa22f87707bf0914e4e09654bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getRatesOfChangeNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getRatesOfChangeNamedArray</name>
        <briefdescription>
<para>Returns the rate of change of the floating species as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="716" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2548" bodyend="2580"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6c974443cc51485d9150c80dc5e730db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getIndependentRatesOfChange</definition>
        <argsstring>()</argsstring>
        <name>getIndependentRatesOfChange</name>
        <briefdescription>
<para>Returns the rate of change of the independent floating species as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="722" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2582" bodyend="2600"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a856f9ed2a2abe44a1f91d679bd9f4d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getIndependentRatesOfChangeNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getIndependentRatesOfChangeNamedArray</name>
        <briefdescription>
<para>Returns the rate of change of the independent floating species as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="728" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2602" bodyend="2616"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8ab4bc9fd188058f67e84ac291d7eacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getDependentRatesOfChange</definition>
        <argsstring>()</argsstring>
        <name>getDependentRatesOfChange</name>
        <briefdescription>
<para>Returns the rate of change of the dependent floating species as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="734" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2618" bodyend="2636"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aed709485753c6718a1a861ae5eda1856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getDependentRatesOfChangeNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getDependentRatesOfChangeNamedArray</name>
        <briefdescription>
<para>Returns the rate of change of the dependent floating species as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="740" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2638" bodyend="2652"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8407626c7864621c3fd08781217b85b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getFullJacobian</definition>
        <argsstring>()</argsstring>
        <name>getFullJacobian</name>
        <briefdescription>
<para>compute the full Jacobian at the current operating point </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="745" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2654" bodyend="2843"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a084f0b815a37adbe36636d5e8d465673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getFullReorderedJacobian</definition>
        <argsstring>()</argsstring>
        <name>getFullReorderedJacobian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="747" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2845" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a63002e13888d647221cec2fc5de559ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getReducedJacobian</definition>
        <argsstring>(double h=-1.0)</argsstring>
        <name>getReducedJacobian</name>
        <param>
          <type>double</type>
          <declname>h</declname>
          <defval>-1.0</defval>
        </param>
        <briefdescription>
<para>Compute the reduced Jacobian at the current operating point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The step sized used for central difference method. If negative, the default value from the config file is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="754" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2854" bodyend="2936"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a08bb116b872c4f9f4d515745f2de7012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; rr::RoadRunner::getFullEigenValues</definition>
        <argsstring>()</argsstring>
        <name>getFullEigenValues</name>
        <briefdescription>
<para>Returns the eigenvalues of the full jacobian. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a vector of Complex numbers. In the python bindings, the values are complex only if there are non-zero imaginary parts of the values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="763" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2306" bodyend="2308"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6927dede026cdbea282a7bdd504a1ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; rr::RoadRunner::getReducedEigenValues</definition>
        <argsstring>()</argsstring>
        <name>getReducedEigenValues</name>
        <briefdescription>
<para>Returns the eigenvalues of the reduced jacobian. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a vector of Complex numbers. In the python bindings, the values are complex only if there are non-zero imaginary parts of the values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="772" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2311" bodyend="2313"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1b4939dd00d63dd4b73a0317b692b110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getFullEigenValuesNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getFullEigenValuesNamedArray</name>
        <briefdescription>
<para>Returns the eigenvalues of the full jacobian as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns an N x 2 matrix where the first column is the real values and the second is the imaginary part. The rows are labeled with the corresponding species ids, and the columns are labeled &apos;real&apos; and &apos;imaginary&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="783" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2328" bodyend="2330"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a05fbd6d9b494008b255c945d486078f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getReducedEigenValuesNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getReducedEigenValuesNamedArray</name>
        <briefdescription>
<para>Returns the eigenvalues of the reduced jacobian as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns an N x 2 matrix where the first column is the real values and the second is the imaginary part. The rows are labeled with the corresponding species ids, and the columns are labeled &apos;real&apos; and &apos;imaginary&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="793" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2332" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0799a1330b5f488ac4ffd940b431e32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getLinkMatrix</definition>
        <argsstring>()</argsstring>
        <name>getLinkMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="796" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2938" bodyend="2949"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8770cc21abd02ecd76e348a5d59971d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getNrMatrix</definition>
        <argsstring>()</argsstring>
        <name>getNrMatrix</name>
        <briefdescription>
<para>get the reduced stochiometry matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>If conservation conversion is enabled, this is the matrix that coresponds to the independent species.</para>
<para>A synonym for <ref refid="classrr_1_1RoadRunner_1a53727bd9547815c2645505a2b0580368" kindref="member">getReducedStoichiometryMatrix()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="804" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2955" bodyend="2966"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a24ba9e58efcfc856cb27c92f469fbdc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getKMatrix</definition>
        <argsstring>()</argsstring>
        <name>getKMatrix</name>
        <briefdescription>
<para>Returns the K matrix (right nullspace of Nr) The K matrix has the structure, [I K0]&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="811" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2968" bodyend="2979"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a53727bd9547815c2645505a2b0580368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getReducedStoichiometryMatrix</definition>
        <argsstring>()</argsstring>
        <name>getReducedStoichiometryMatrix</name>
        <briefdescription>
<para>get the reduced stochiometry matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>If conservation conversion is enabled, this is the matrix that coresponds to the independent species.</para>
<para>A synonym for <ref refid="classrr_1_1RoadRunner_1a8770cc21abd02ecd76e348a5d59971d0" kindref="member">getNrMatrix()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="819" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2951" bodyend="2953"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a41cc42926d90928298b56d4aac722cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getFullStoichiometryMatrix</definition>
        <argsstring>()</argsstring>
        <name>getFullStoichiometryMatrix</name>
        <briefdescription>
<para>Get the stoichiometry matrix that coresponds to the full model, even it it was converted via conservation conversion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="825" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2982" bodyend="3003"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6f87138b278b52031eba49422843a567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getExtendedStoichiometryMatrix</definition>
        <argsstring>()</argsstring>
        <name>getExtendedStoichiometryMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="827" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3006" bodyend="3126"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6b0be3f7470f1c52bb6965c9b4a4b662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getL0Matrix</definition>
        <argsstring>()</argsstring>
        <name>getL0Matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="830" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3129" bodyend="3141"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab2e1c9070010a6e372365102c4b4664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getConservationMatrix</definition>
        <argsstring>()</argsstring>
        <name>getConservationMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="833" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3144" bodyend="3174"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1acbd395494bb482a6e571f848e825bf1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getUnscaledConcentrationControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getUnscaledConcentrationControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="835" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4247" bodyend="4285"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a56e53094e1e9be55fa0a7356e1526d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getScaledConcentrationControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getScaledConcentrationControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="837" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4288" bodyend="4308"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afadf49f466a97f5fa4f1f1bdfcf1e3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getUnscaledFluxControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getUnscaledFluxControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="839" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4312" bodyend="4331"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8fab3bc1554a5a3cce0ee8fc7a2522a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getScaledFluxControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getScaledFluxControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="841" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4334" bodyend="4367"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aea6a2de3cb5502f2924f6c874b848758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getEigenValueIds</definition>
        <argsstring>()</argsstring>
        <name>getEigenValueIds</name>
        <briefdescription>
<para>returns the list of floating species, but with a &quot;eigen(...)&quot; std::string wrapped around them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="848" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5221" bodyend="5227"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5fb2c2cc40a2badce7c4803917cba029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getUnscaledParameterElasticity</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName)</argsstring>
        <name>getUnscaledParameterElasticity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Returns the unscaled elasticity for a named reaction with respect to a named parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="854" column="16" bodyfile="rrRoadRunner.cpp" bodystart="4912" bodyend="4990"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5db663d82f5087b6d289ff9810256168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::Matrix&lt; double &gt; rr::RoadRunner::getFrequencyResponse</definition>
        <argsstring>(double startFrequency, int numberOfDecades, int numberOfPoints, const std::string &amp;parameterName, const std::string &amp;variableName, bool useDB, bool useHz)</argsstring>
        <name>getFrequencyResponse</name>
        <param>
          <type>double</type>
          <declname>startFrequency</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numberOfDecades</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numberOfPoints</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>variableName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDB</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useHz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="858" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4799" bodyend="4908"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adbea6710dcab6c825573ce5c9b35dd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setConservedMoietyAnalysis</definition>
        <argsstring>(bool value)</argsstring>
        <name>setConservedMoietyAnalysis</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This method turns on / off the computation and adherence to conservation laws. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="866" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1682" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af69cf22ce68c8d5c4ab869fedefa16f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::getConservedMoietyAnalysis</definition>
        <argsstring>()</argsstring>
        <name>getConservedMoietyAnalysis</name>
        <briefdescription>
<para>is conservation analysis enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>This is set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="871" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1000" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1add8f2cfb1a37ad4e352f43a9529a3035" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getDiffStepSize</definition>
        <argsstring>() const</argsstring>
        <name>getDiffStepSize</name>
        <briefdescription>
<para>Set the differential step size used in MCA routines like <ref refid="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" kindref="member">getCC</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="884" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1749" bodyend="1753"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae5b37837542f842bd6ac6aef11875e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setDiffStepSize</definition>
        <argsstring>(double val)</argsstring>
        <name>setDiffStepSize</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the differential step size used in MCA routines like <ref refid="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" kindref="member">getCC</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="890" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1755" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1acae600eb92e9bd2a7739040e7148c0ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getSteadyStateThreshold</definition>
        <argsstring>() const</argsstring>
        <name>getSteadyStateThreshold</name>
        <briefdescription>
<para>Get the steady state threshold used in getCC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM</para>
</simplesect>
In the MCA routines, <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> will keep trying to converge to a steady state until this threshold is met </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="898" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1761" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a64b81cdc2b84a6f28affd212ef474392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateThreshold</definition>
        <argsstring>(double val)</argsstring>
        <name>setSteadyStateThreshold</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the steady state threshold used in getCC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM</para>
</simplesect>
In the MCA routines, <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> will keep trying to converge to a steady state until this threshold is met </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="906" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1767" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7df50d5a0fa7265b62af24a2e996b6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getuCC</definition>
        <argsstring>(const std::string &amp;variableName, const std::string &amp;parameterName)</argsstring>
        <name>getuCC</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variableName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get unscaled control coefficient with respect to a global parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>variableName must be either a reaction or floating species.</para>
<para>parameterName must be eithe a global parameter, boundary species, or conserved sum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="916" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3828" bodyend="3945"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getCC</definition>
        <argsstring>(const std::string &amp;variableName, const std::string &amp;parameterName)</argsstring>
        <name>getCC</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variableName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get scaled control coefficient with respect to a global parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>The variableName must be either a reaction id, or a floating species id.</para>
<para>The parameterName must be either a global parameter, boundary species, or conserved sum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="926" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3948" bodyend="3986"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad1a582f68475ad9e923dd23b12397d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getuEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName)</argsstring>
        <name>getuEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get unscaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="931" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1773" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6957a9119e32959e4bbd47107a22f8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getuEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName, bool computeSteadystate)</argsstring>
        <name>getuEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>computeSteadystate</declname>
        </param>
        <briefdescription>
<para>Get unscaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally the model is brought to steady state after the computation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="937" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1820" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4faad67b12aaf15212f7c57697556d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName)</argsstring>
        <name>getEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get scaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="943" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1707" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a54d7fece5e6ac6fcba4d113f62aff1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName, bool computeSteadyState)</argsstring>
        <name>getEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>computeSteadyState</declname>
        </param>
        <briefdescription>
<para>Get scaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally the model is brought to steady state after the computation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="949" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1712" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae70640f21445afff8da22e8ee23921b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getUnscaledElasticityMatrix</definition>
        <argsstring>()</argsstring>
        <name>getUnscaledElasticityMatrix</name>
        <briefdescription>
<para>Compute the unscaled species elasticity matrix at the current operating point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="955" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4164" bodyend="4181"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a511551ead0b6dcf50f161a0e6c8060d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getScaledElasticityMatrix</definition>
        <argsstring>()</argsstring>
        <name>getScaledElasticityMatrix</name>
        <briefdescription>
<para>Compute the unscaled elasticity matrix at the current operating point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="960" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4183" bodyend="4215"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6a388eb7c0f64e215490fa606f458770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getScaledFloatingSpeciesElasticity</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;speciesName)</argsstring>
        <name>getScaledFloatingSpeciesElasticity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>speciesName</declname>
        </param>
        <briefdescription>
<para>Compute the scaled elasticity for a given reaction and given species. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="965" column="16" bodyfile="rrRoadRunner.cpp" bodystart="4218" bodyend="4242"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5856b94d04fadfb190b407b126382503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getUnscaledSpeciesElasticity</definition>
        <argsstring>(int reactionId, int speciesIndex)</argsstring>
        <name>getUnscaledSpeciesElasticity</name>
        <param>
          <type>int</type>
          <declname>reactionId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>speciesIndex</declname>
        </param>
        <briefdescription>
<para>Get a single species elasticity value IMPORTANT: Assumes that the reaction rates have been precomputed at the operating point !! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="973" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3989" bodyend="4161"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6930962f454f983b35c2a147c1092347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addSpeciesConcentration</definition>
        <argsstring>(const std::string &amp;sid, const std::string &amp;compartment, double initConcentration, bool hasOnlySubstanceUnits=false, bool boundaryCondition=false, const std::string &amp;substanceUnits=&quot;&quot;, bool forceRegenerate=true)</argsstring>
        <name>addSpeciesConcentration</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compartment</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initConcentration</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasOnlySubstanceUnits</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>boundaryCondition</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substanceUnits</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a species to the current model and set its concentration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compartment</parametername>
</parameternamelist>
<parameterdescription>
<para>the compartment of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initConcentration</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial concentration of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasOnlySubstanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the boolean value of the hasOnlySubstanceUnits attribute, indicating whether the species is to be used as an amount when encountered in formulas elsewhere in the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>the boolean value of the boundaryCondition attribute, indicating whether the species is a boundary species. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the substance unit of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="990" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5647" bodyend="5695"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3af3fb5238087c26851a244ee0dcff8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addSpeciesAmount</definition>
        <argsstring>(const std::string &amp;sid, const std::string &amp;compartment, double initAmount=0, bool hasOnlySubstanceUnits=false, bool boundaryCondition=false, const std::string &amp;substanceUnits=&quot;&quot;, bool forceRegenerate=true)</argsstring>
        <name>addSpeciesAmount</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compartment</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initAmount</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>hasOnlySubstanceUnits</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>boundaryCondition</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substanceUnits</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a species to the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compartment</parametername>
</parameternamelist>
<parameterdescription>
<para>the compartment of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initAmount</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial amount of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasOnlySubstanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the boolean value of the hasOnlySubstanceUnits attribute, indicating whether the species is to be used as an amount when encountered in formulas elsewhere in the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>the boolean value of the boundaryCondition attribute, indicating whether the species is a boundary species. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the substance unit of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1009" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5697" bodyend="5742"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2d24e223ee2a7b1c44a7b9d6db0d4b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeSpecies</definition>
        <argsstring>(const std::string &amp;sid, bool forceRegenerate=true)</argsstring>
        <name>removeSpecies</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1025" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5744" bodyend="5817"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3254de1bcafde8fb4aa28e4241fa7c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setBoundary</definition>
        <argsstring>(const std::string &amp;sid, bool boundaryCondition, bool forceRegenerate=true)</argsstring>
        <name>setBoundary</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>boundaryCondition</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the boundary condition of an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, the boundary condition for a species is false. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>boundary condition to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1039" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5820" bodyend="5834"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af0c85ad9ef78812bfbf31636683b4ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setHasOnlySubstanceUnits</definition>
        <argsstring>(const std::string &amp;sid, bool hasOnlySubstanceUnits, bool forceRegenerate=true)</argsstring>
        <name>setHasOnlySubstanceUnits</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasOnlySubstanceUnits</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the hasOnlySubstanceUnits attribute for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasOnlySubstanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of hasOnlySubstanceUnits attribute to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1052" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5837" bodyend="5851"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3e87e92d78163d57e36fd49c09676589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::getHasOnlySubstanceUnits</definition>
        <argsstring>(const std::string &amp;sid)</argsstring>
        <name>getHasOnlySubstanceUnits</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
<para>Get the hasOnlySubstanceUnits attribute for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1058" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5853" bodyend="5864"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8d8050a4d09992b395de75ff50f66b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setInitAmount</definition>
        <argsstring>(const std::string &amp;sid, double initAmount, bool forceRegenerate=true)</argsstring>
        <name>setInitAmount</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initAmount</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set initial amount for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial amount/concentration set before will be unset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initAmount</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial amount to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1071" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5867" bodyend="5891"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a968b5f01bf7fe6a76a860794130d15e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setInitConcentration</definition>
        <argsstring>(const std::string &amp;sid, double initConcentration, bool forceRegenerate=true)</argsstring>
        <name>setInitConcentration</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initConcentration</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set initial concentration for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial amount/concentration set before will be unset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initConcentration</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial concentration to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1085" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5893" bodyend="5923"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa4eff2424c186a5ba3a3d35cf91dce2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setConstant</definition>
        <argsstring>(const std::string &amp;sid, bool constant, bool forceRegenerate=true)</argsstring>
        <name>setConstant</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the constant attribute for an existing species/ parameter/ compartment By default, the constant attribute is false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species/ parameter/ compartment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constant</parametername>
</parameternamelist>
<parameterdescription>
<para>the constant attribute to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1100" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5925" bodyend="5948"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa2247347171d5d46c270e18bbeaac4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addReaction</definition>
        <argsstring>(const std::string &amp;sbmlRep, bool forceRegenerate=true)</argsstring>
        <name>addReaction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbmlRep</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1113" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5951" bodyend="5962"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a651d468cbbc04ad129e3fd8b94f71307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addReaction</definition>
        <argsstring>(const std::string &amp;rid, std::vector&lt; std::string &gt; reactants, std::vector&lt; std::string &gt; products, const std::string &amp;kineticLaw, bool forceRegenerate=true)</argsstring>
        <name>addReaction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>reactants</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>products</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>kineticLaw</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1132" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5964" bodyend="6042"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0d0a6d74578a9017244bae5a74b253e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeReaction</definition>
        <argsstring>(const std::string &amp;rid, bool deleteUnusedParameters=false, bool forceRegenerate=true)</argsstring>
        <name>removeReaction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deleteUnusedParameters</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove a reaction from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the reaction to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleteUnusedParameters;</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate whether to remove unused parameters from the model as well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1146" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6045" bodyend="6084"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a61d920026f1d614669007665c3aec5fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setReversible</definition>
        <argsstring>(const std::string &amp;rid, bool reversible, bool forceRegenerate=true)</argsstring>
        <name>setReversible</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reversible</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1159" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6142" bodyend="6157"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7424f3dc7d18d5697e66b0d19700aae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setKineticLaw</definition>
        <argsstring>(const std::string &amp;rid, const std::string &amp;kineticLaw, bool forceRegenerate=true)</argsstring>
        <name>setKineticLaw</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>kineticLaw</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1173" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6160" bodyend="6198"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3e0b8f15b7ab0042dcfd85c14fa207ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getKineticLaw</definition>
        <argsstring>(const std::string &amp;rid)</argsstring>
        <name>getKineticLaw</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <briefdescription>
<para>Get the kinetic law of an existing reaction in the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of reaction to be modified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1179" column="21" bodyfile="rrRoadRunner.cpp" bodystart="6201" bodyend="6229"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a68e98a5de63e4dc8418738290d4c762b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addParameter</definition>
        <argsstring>(const std::string &amp;pid, double value, bool forceRegenerate=true)</argsstring>
        <name>addParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a parameter to the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the parameter to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1193" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6232" bodyend="6249"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa22a0401fda4aa17a3118a833fdde286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeParameter</definition>
        <argsstring>(const std::string &amp;pid, bool forceRegenerate=true)</argsstring>
        <name>removeParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove a parameter from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the parameter to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1205" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6251" bodyend="6262"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7e475483794fc8b59d3b1b423607b2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addCompartment</definition>
        <argsstring>(const std::string &amp;cid, double initVolume, bool forceRegenerate=true)</argsstring>
        <name>addCompartment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initVolume</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a compartment to the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the compartment to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initVolume</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial volume of the compartment to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1219" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6265" bodyend="6280"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad3f2043bc6e645f5319119df37a9eadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeCompartment</definition>
        <argsstring>(const std::string &amp;cid, bool forceRegenerate=true)</argsstring>
        <name>removeCompartment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove a compartment from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the compartment to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1231" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6283" bodyend="6310"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8d7d526b65b7f4da57416eef928edc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addAssignmentRule</definition>
        <argsstring>(const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addAssignmentRule</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1245" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6358" bodyend="6376"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa3a9acbff059e9feb7789b730681c86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addRateRule</definition>
        <argsstring>(const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addRateRule</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1259" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6378" bodyend="6396"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adc65f44da5821758e912bd109fadfa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeRules</definition>
        <argsstring>(const std::string &amp;vid, bool useInitialValue=false, bool forceRegenerate=true)</argsstring>
        <name>removeRules</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useInitialValue</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove rules related to given variable from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of variable that rules assign formula to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useInitialValue</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate whether using initial value as current value when the assignment rule of a variable is removed otherwise, it will keep the value of assignment rule as current value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1275" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6399" bodyend="6516"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa27ba6eab817899a3fe14f4ad65527dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addInitialAssignment</definition>
        <argsstring>(const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addInitialAssignment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1289" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6518" bodyend="6552"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4a47d78c63af139f9cbe5aedab5e7b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeInitialAssignment</definition>
        <argsstring>(const std::string &amp;vid, bool forceRegenerate=true)</argsstring>
        <name>removeInitialAssignment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove initial assignment for a symbol from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the symbol </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1302" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6554" bodyend="6612"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a30b86079c416eb73b6f4da63ef6734af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addEvent</definition>
        <argsstring>(const std::string &amp;eid, bool useValuesFromTriggerTime, const std::string &amp;trigger, bool forceRegenerate=true)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useValuesFromTriggerTime</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1317" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6615" bodyend="6643"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aaaac271c2bcebe239646576d48592f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addTrigger</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;trigger, bool forceRegenerate=true)</argsstring>
        <name>addTrigger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1333" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6646" bodyend="6672"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0c10e1079ae0ae44f0e54b4f9b54c884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setPersistent</definition>
        <argsstring>(const std::string &amp;eid, bool persistent, bool forceRegenerate=true)</argsstring>
        <name>setPersistent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>persistent</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1346" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6674" bodyend="6697"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6731da1be25ebbe4ab0c7cddcbc8e97b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setTriggerInitialValue</definition>
        <argsstring>(const std::string &amp;eid, bool initValue, bool forceRegenerate=true)</argsstring>
        <name>setTriggerInitialValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initValue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1359" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6699" bodyend="6723"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab2cd3d8f9ca1b79014357b5445ee9bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addPriority</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;priority, bool forceRegenerate=true)</argsstring>
        <name>addPriority</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1373" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6726" bodyend="6750"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa65de948a2fbc7287c31b33cf676ced6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addDelay</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;delay, bool forceRegenerate=true)</argsstring>
        <name>addDelay</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1387" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6753" bodyend="6773"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab1f82e576456f8c7ad94c30f1480a8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addEventAssignment</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addEventAssignment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1402" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6776" bodyend="6820"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6f5bbcfeff4758a5e91c15e16c880641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeEventAssignments</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;vid, bool forceRegenerate=true)</argsstring>
        <name>removeEventAssignments</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove event assignments for given variable from an existing event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the vairable of the event assignments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1417" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6823" bodyend="6843"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad5e6fc77db2c058d9d165a37c56ce700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeEvent</definition>
        <argsstring>(const std::string &amp;eid, bool forceRegenerate=true)</argsstring>
        <name>removeEvent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove an event from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the event to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1429" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6846" bodyend="6855"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4e75cb4bdcd03300133aef022f53b34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::validateCurrentSBML</definition>
        <argsstring>()</argsstring>
        <name>validateCurrentSBML</name>
        <briefdescription>
<para>Validate the current SBML. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1434" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6857" bodyend="6868"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a018f17c09b36e42f052989a57fc5b2a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::mcaSteadyState</definition>
        <argsstring>()</argsstring>
        <name>mcaSteadyState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1439" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1570" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af310e01ec241bc2b19a46629087024d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::steadyState</definition>
        <argsstring>(Dictionary *dict=0)</argsstring>
        <name>steadyState</name>
        <param>
          <type><ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>dict</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute the steady state of the model, returns the sum of squares of the solution. </para>
        </briefdescription>
        <detaileddescription>
<para>The steady state solver and whatever options it needs may be specified via the given dictionary. For a list of all available steady state solvers, <simplesect kind="see"><para><ref refid="classrr_1_1SteadyStateSolverFactory" kindref="compound">SteadyStateSolverFactory</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dict</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a dictionary which has the steady state options. May be NULL, in this case the existing options are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1452" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1589" bodyend="1673"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af49d6134c7a2e1728e32ee9182ed152d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::steadyStateNamedArray</definition>
        <argsstring>(const Dictionary *dict=0)</argsstring>
        <name>steadyStateNamedArray</name>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>dict</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Like <ref refid="classrr_1_1RoadRunner_1af310e01ec241bc2b19a46629087024d0" kindref="member">steadyState</ref> but returns a named array of the steady state values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1458" column="26" bodyfile="rrRoadRunner.cpp" bodystart="1676" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af51f2c52092490f993e790ae4ece8fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
        <definition>std::vector&lt; SelectionRecord &gt; &amp; rr::RoadRunner::getSteadyStateSelections</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateSelections</name>
        <briefdescription>
<para>returns the current set of steady state selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1463" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3249" bodyend="3251"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a166d905000777fc76767f6625df12bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateSelections</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;steadyStateSelections)</argsstring>
        <name>setSteadyStateSelections</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>steadyStateSelections</declname>
        </param>
        <briefdescription>
<para>parses the given list of strings and generates selections records which will be used for the steady state selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1469" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4785" bodyend="4792"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5113f4906344694a60663dc57531bf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateSelections</definition>
        <argsstring>(const std::vector&lt; rr::SelectionRecord &gt; &amp;steadyStateSelections)</argsstring>
        <name>setSteadyStateSelections</name>
        <param>
          <type>const std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
          <declname>steadyStateSelections</declname>
        </param>
        <briefdescription>
<para>makes a copy of an existing list of selection records. </para>
        </briefdescription>
        <detaileddescription>
<para>These will be saved and used for selection values in <ref refid="classrr_1_1RoadRunner_1ab365ab17ad44a2e96e215e76d440f779" kindref="member">getSteadyStateValues()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1476" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4794" bodyend="4796"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab365ab17ad44a2e96e215e76d440f779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getSteadyStateValues</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateValues</name>
        <briefdescription>
<para>Performs a steady state calculation (evolves the system to a steady state), then calculates and returns the set of values specifed by the steady state selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1484" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3253" bodyend="3268"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1062bc78d3b41301fa97dc5f2167baa2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getSteadyStateSelectionStrings</definition>
        <argsstring>() const</argsstring>
        <name>getSteadyStateSelectionStrings</name>
        <briefdescription>
<para>Returns a std::vector of the steady state selection strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1489" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3270" bodyend="3278"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aae721d16b518ee9ca9b9b8dfe0e18ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>ls::DoubleMatrix rr::RoadRunner::getSteadyStateValuesNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateValuesNamedArray</name>
        <briefdescription>
<para>Like <ref refid="classrr_1_1RoadRunner_1ab365ab17ad44a2e96e215e76d440f779" kindref="member">getSteadyStateValues</ref> but returns a named array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1494" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3280" bodyend="3298"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0e944d337b8d9204092df7056e1d2b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::regenerateModel</definition>
        <argsstring>(bool forceRegenerate=true, bool reset=false)</argsstring>
        <name>regenerateModel</name>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>regenerate a model, this recompiles the internal runtime model. </para>
        </briefdescription>
        <detaileddescription>
<para>This would be used after a series of addSpecies, addReaction calls and the model is then ready to be compiled into executable form. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1501" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6879" bodyend="6927"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af8d2ff8ebf2c85f918cc2888ac68f479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setBoundarySpeciesByIndex</definition>
        <argsstring>(const int &amp;index, const double &amp;value)</argsstring>
        <name>setBoundarySpeciesByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1511" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3479" bodyend="3489"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0cbcdf248d716058325e50adf9239d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfIndependentSpecies</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfIndependentSpecies</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1516" column="13" bodyfile="rrRoadRunner.cpp" bodystart="3193" bodyend="3204"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a78708a8b3088ada0b5d7b2630a24904e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfDependentSpecies</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfDependentSpecies</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1521" column="13" bodyfile="rrRoadRunner.cpp" bodystart="3177" bodyend="3190"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a744ddb0d6ee6b750e11d752685a29797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getGlobalParameterIds</definition>
        <argsstring>()</argsstring>
        <name>getGlobalParameterIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
<para>use ExecutableModel::getGlobalParameterIds </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1527" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5109" bodyend="5117"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4d2c6e653ebbfdebfe9708ee6b99eacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getBoundarySpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1532" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5119" bodyend="5127"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a64b828272c3f6429b72d38e39cfcc3c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getAssignmentRuleIds</definition>
        <argsstring>()</argsstring>
        <name>getAssignmentRuleIds</name>
        <briefdescription>
<para>Get the Ids of the elements assigned by assignment rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1537" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5129" bodyend="5136"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aba310cd6f953aa82908c2006219270e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRateRuleIds</definition>
        <argsstring>()</argsstring>
        <name>getRateRuleIds</name>
        <briefdescription>
<para>Get the Ids of the elements assigned by rate rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1542" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5138" bodyend="5145"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3702f25236b2aead62907f1982ec2ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getInitialAssignmentIds</definition>
        <argsstring>()</argsstring>
        <name>getInitialAssignmentIds</name>
        <briefdescription>
<para>Get the Ids of the elements with an initial assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1547" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5147" bodyend="5154"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6d3c6c4f7d7e1a318ccda22b8c4dc540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getBoundarySpeciesConcentrationIds</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesConcentrationIds</name>
        <briefdescription>
<para>Gets the ids for all boundary species concentrations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1552" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5156" bodyend="5164"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afc7498e1fe7098233c87f4427e74509b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getBoundarySpeciesByIndex</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getBoundarySpeciesByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1557" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3492" bodyend="3502"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a241c4374d564427ef61df52862136574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getGlobalParameterByIndex</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getGlobalParameterByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
<para>use <ref refid="classrr_1_1ExecutableModel_1af598ac63c984d7101b0d026dd217a822" kindref="member">ExecutableModel::getGlobalParameterValues</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1563" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3767" bodyend="3795"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1b5525fc1a0ada03bb75f78f77c9bbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setGlobalParameterByName</definition>
        <argsstring>(const std::string &amp;param, double value)</argsstring>
        <name>setGlobalParameterByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the parameter with id </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>ciaran welsh </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1569" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3732" bodyend="3746"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af376e9fce37cc7b50cea8e8642eafb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getGlobalParameterByName</definition>
        <argsstring>(const std::string &amp;param)</argsstring>
        <name>getGlobalParameterByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>get the value of global parameter with id </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>ciaran welsh </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1576" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3748" bodyend="3764"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abdb0de6271ba9e054316d739cb9da1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getConservedMoietyValues</definition>
        <argsstring>()</argsstring>
        <name>getConservedMoietyValues</name>
        <briefdescription>
<para>Returns the sum of each conserved cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>MTK, JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1586" column="21" bodyfile="rrRoadRunner.cpp" bodystart="1412" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad352e9290b7827a2d780a3cc33be194d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getConservedMoietyIds</definition>
        <argsstring>()</argsstring>
        <name>getConservedMoietyIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1588" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5166" bodyend="5169"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0aeef3b4db855e2cd6e901372c9082f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfReactions</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfReactions</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1595" column="13" bodyfile="rrRoadRunner.cpp" bodystart="3398" bodyend="3403"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9284f10d515b8ef441473b5c14f5920e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getReactionRate</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getReactionRate</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1600" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3406" bodyend="3418"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a67736588f72a8fb4f429368716acda93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getRateOfChange</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getRateOfChange</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1605" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3421" bodyend="3433"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a900fe6274335e44e7633e9e60695ed14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRateOfChangeIds</definition>
        <argsstring>()</argsstring>
        <name>getRateOfChangeIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1610" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5073" bodyend="5097"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2f26307521e9930a85ed5c44bae67cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfCompartments</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfCompartments</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1615" column="13" bodyfile="rrRoadRunner.cpp" bodystart="3437" bodyend="3442"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a01dbe5358bd652891be6209260523cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setCompartmentByIndex</definition>
        <argsstring>(const int &amp;index, const double &amp;value)</argsstring>
        <name>setCompartmentByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1620" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3445" bodyend="3455"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a14b51ebe111fd7292dbca21a2749125b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getCompartmentByIndex</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getCompartmentByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1625" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3457" bodyend="3469"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3175df12d85de114996361b468c2c38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getCompartmentIds</definition>
        <argsstring>()</argsstring>
        <name>getCompartmentIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1630" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5099" bodyend="5107"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a54a9d80927c998e0981a2deac0671758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfBoundarySpecies</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfBoundarySpecies</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1635" column="13" bodyfile="rrRoadRunner.cpp" bodystart="3471" bodyend="3476"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a42a995530149829e8deda1a18419a864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setBoundarySpeciesConcentrations</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;values)</argsstring>
        <name>setBoundarySpeciesConcentrations</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1640" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3693" bodyend="3701"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abc64866144a2a728af78010c1d8badb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setBoundarySpeciesAmounts</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;values)</argsstring>
        <name>setBoundarySpeciesAmounts</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1645" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3705" bodyend="3713"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af2467ad14443e89ac9a1ed98481093c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfFloatingSpecies</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfFloatingSpecies</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1650" column="13" bodyfile="rrRoadRunner.cpp" bodystart="3550" bodyend="3555"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6b228e88494e9a1c5615c81889358df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getFloatingSpeciesByIndex</definition>
        <argsstring>(int index)</argsstring>
        <name>getFloatingSpeciesByIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1655" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3588" bodyend="3599"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad68d81c08a570f120db08c8e5ca735e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setFloatingSpeciesByIndex</definition>
        <argsstring>(int index, double value)</argsstring>
        <name>setFloatingSpeciesByIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1660" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3574" bodyend="3585"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8c771da043718ef6a2ebf2a72cde498b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getFloatingSpeciesConcentrationsV</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesConcentrationsV</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1665" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3602" bodyend="3613"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4151d7c08054661f86265e36cdef51ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getFloatingSpeciesAmountsV</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesAmountsV</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1670" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3616" bodyend="3627"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a08b51ec16a7cd7d13bf2df7628adf471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getBoundarySpeciesConcentrationsV</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesConcentrationsV</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1675" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3665" bodyend="3676"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae69dfa3779123d7d1b1da495477bcdd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getBoundarySpeciesAmountsV</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesAmountsV</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1680" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3678" bodyend="3689"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9f58d69e9b0d77e7a141c3cbab08cd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getFloatingSpeciesInitialConcentrations</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesInitialConcentrations</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1685" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3630" bodyend="3639"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5e1dcd14759e468e510a298f61b267de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setFloatingSpeciesConcentrations</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;values)</argsstring>
        <name>setFloatingSpeciesConcentrations</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1690" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3655" bodyend="3663"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a08176e93872548591ce96b2f9c20dc74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setFloatingSpeciesInitialConcentrationByIndex</definition>
        <argsstring>(const int &amp;index, const double &amp;value)</argsstring>
        <name>setFloatingSpeciesInitialConcentrationByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1695" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3559" bodyend="3571"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3c85d3178f85ec302f1dd8f13fb87aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setFloatingSpeciesInitialConcentrations</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;values)</argsstring>
        <name>setFloatingSpeciesInitialConcentrations</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1701" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3642" bodyend="3652"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2df3e839e9faa56b6fb1b50f64aedfb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getFloatingSpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1706" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5171" bodyend="5179"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4d160ec4bffd82338fbd6d7c367418f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getFloatingSpeciesInitialConditionIds</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesInitialConditionIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1711" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5191" bodyend="5199"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af23fe6ec9b4ca66c07e14db3dad23462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::getNumberOfGlobalParameters</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfGlobalParameters</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1716" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3717" bodyend="3722"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa90f680c2d8e3c1dbd67c90de015338c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setGlobalParameterByIndex</definition>
        <argsstring>(const int index, const double value)</argsstring>
        <name>setGlobalParameterByIndex</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1721" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3724" bodyend="3730"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1104cc3634e461f963a8682cbb6e0bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getGlobalParameterValues</definition>
        <argsstring>()</argsstring>
        <name>getGlobalParameterValues</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
<para>use <ref refid="classrr_1_1ExecutableModel_1af598ac63c984d7101b0d026dd217a822" kindref="member">ExecutableModel::getGlobalParameterValues</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1728" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3798" bodyend="3823"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad3f4b6ef217424cb9b12c798dfd1129c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::evalModel</definition>
        <argsstring>()</argsstring>
        <name>evalModel</name>
        <briefdescription>
<para>Updates the model based on all recent changes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1733" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1908" bodyend="1913"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1d4371619e6e4e7a31ad721c75718c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getReactionRates</definition>
        <argsstring>()</argsstring>
        <name>getReactionRates</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
<para>use <ref refid="classrr_1_1ExecutableModel_1a37c53cc370ff236657272f5596fd27ff" kindref="member">ExecutableModel::getReactionRates</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1740" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4504" bodyend="4514"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae8b19594ecf70d1995fc30e63c9a0826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getReactionIds</definition>
        <argsstring>()</argsstring>
        <name>getReactionIds</name>
        <briefdescription>
<para>Alias for this function on the child model object. </para>
        </briefdescription>
        <detaileddescription>
<para>returns a list of reaction ids obtained from <ref refid="classrr_1_1ExecutableModel_1aeb911dc90408981370c78149680d9027" kindref="member">ExecutableModel::getReactionId</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1747" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5211" bodyend="5219"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a22136f7f0ea6f72e6c8fce6de2dc93e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getParamPromotedSBML</definition>
        <argsstring>(const std::string &amp;sArg)</argsstring>
        <name>getParamPromotedSBML</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sArg</declname>
        </param>
        <briefdescription>
<para>Given an sbml document or path to an sbml document, this method moves all the local parameters to global parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="123" column="28" bodyfile="rrRoadRunner.cpp" bodystart="1094" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a862621117012d7e294d7628fed11f82b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRegisteredIntegratorNames</definition>
        <argsstring>()</argsstring>
        <name>getRegisteredIntegratorNames</name>
        <briefdescription>
<para>Return a std::vector of the names of all registered integrators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="212" column="28" bodyfile="rrRoadRunner.cpp" bodystart="864" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4064f1dba1c7342c6e81987bfc61d2f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRegisteredSteadyStateSolverNames</definition>
        <argsstring>()</argsstring>
        <name>getRegisteredSteadyStateSolverNames</name>
        <briefdescription>
<para>Return a std::vector of the names of all registered <ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="217" column="28" bodyfile="rrRoadRunner.cpp" bodystart="872" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1acc731ff7a1fecb361366460e2dc0cdbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRegisteredSensitivitySolverNames</definition>
        <argsstring>()</argsstring>
        <name>getRegisteredSensitivitySolverNames</name>
        <briefdescription>
<para>Return a std::vector of the names of all registered sensitivity solvers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="222" column="28" bodyfile="rrRoadRunner.cpp" bodystart="880" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ace9c4f3cde41235114838e6b4368f3c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::registerSolvers</definition>
        <argsstring>()</argsstring>
        <name>registerSolvers</name>
        <briefdescription>
<para>Ensures all integrators and steady state solvers are registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="264" column="21" bodyfile="rrRoadRunner.cpp" bodystart="977" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a99dbe4b81831a8b7d5b53077027f465a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getExtendedVersionInfo</definition>
        <argsstring>()</argsstring>
        <name>getExtendedVersionInfo</name>
        <briefdescription>
<para>getVersion plus info about dependent libs versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="877" column="28" bodyfile="rrRoadRunner.cpp" bodystart="715" bodyend="721"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a869c9a08c8ec66645d9910c08a52d41a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::fixDependentSpeciesValues</definition>
        <argsstring>(int except, double *ref)</argsstring>
        <name>fixDependentSpeciesValues</name>
        <param>
          <type>int</type>
          <declname>except</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1793" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1777" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2abbc28f0781c4d0355c94405303749f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::initLLVM</definition>
        <argsstring>()</argsstring>
        <name>initLLVM</name>
        <briefdescription>
<para>calls llvm initialization routines in a thread safe way </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>The main program should call this function to initialize the native target corresponding to the host. This is useful for JIT applications to ensure that the target gets linked in correctly. It is legal for a client to make multiple calls to this function.</para>
<para>The main program should call this function to initialize the native target assembly (asm) printer.</para>
<para>The main program should call this function to initialize the native target assembly (asm) parser.</para>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1798" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1791" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0c49373f5b4da7d9bd23c278022b6429" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::createDefaultSteadyStateSelectionList</definition>
        <argsstring>()</argsstring>
        <name>createDefaultSteadyStateSelectionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1800" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3230" bodyend="3247"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a51c4d5d1cfd6e8c8177d2bc0d6356cf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::createDefaultTimeCourseSelectionList</definition>
        <argsstring>()</argsstring>
        <name>createDefaultTimeCourseSelectionList</name>
        <briefdescription>
<para>PRIVATE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1802" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1030" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7be498f9a0d78bd85530b10a1b650125" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSelectedValues</definition>
        <argsstring>(ls::DoubleMatrix &amp;results, int nRow, double currentTime)</argsstring>
        <name>getSelectedValues</name>
        <param>
          <type>ls::DoubleMatrix &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nRow</declname>
        </param>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>copies the current selection values into the n&apos;th row of the given matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1808" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1393" bodyend="1398"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae51454870dda3981349064eeb5469fc5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSelectedValues</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;results, double currentTime)</argsstring>
        <name>getSelectedValues</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>copies the current selection values into the given std::vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1814" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1400" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aafcbbfa263f8ca43ac0eda623b86a7b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::populateResult</definition>
        <argsstring>()</argsstring>
        <name>populateResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1816" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1554" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9c11a913c607be2ec0aaee76e81bef07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getNthSelectedOutput</definition>
        <argsstring>(size_t index, double currentTime)</argsstring>
        <name>getNthSelectedOutput</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1819" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1372" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad7c60d7ae5c8b92b1c4a1490f1d9d929" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::isParameterUsed</definition>
        <argsstring>(const std::string &amp;sid)</argsstring>
        <name>isParameterUsed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1821" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6086" bodyend="6139"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2937cdfb17c33ce04dc3184b066bb942" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getAllVariables</definition>
        <argsstring>(const libsbml::ASTNode *node, std::set&lt; std::string &gt; &amp;ids)</argsstring>
        <name>getAllVariables</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1823" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7123" bodyend="7131"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0b5a3f0d39365ceef41514fabd1c90d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getTimeRowIndex</definition>
        <argsstring>()</argsstring>
        <name>getTimeRowIndex</name>
        <briefdescription>
<para>Get the row index of the time variable in the output array (returns -1 if time is not selected) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1826" column="13" bodyfile="rrRoadRunner.cpp" bodystart="1382" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1cecf2554210e549f7a379001a57066c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getVariableValue</definition>
        <argsstring>(const VariableType variableType, const int variableIndex)</argsstring>
        <name>getVariableValue</name>
        <param>
          <type>const VariableType</type>
          <declname>variableType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>variableIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1832" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3206" bodyend="3228"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af7bf954facc34a728c55c151a82b4513" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::LibStructural *</type>
        <definition>ls::LibStructural * rr::RoadRunner::getLibStruct</definition>
        <argsstring>()</argsstring>
        <name>getLibStruct</name>
        <briefdescription>
<para>the LibStruct is normally null, only created on demand here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1838" column="27" bodyfile="rrRoadRunner.cpp" bodystart="724" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6fef677633e62e8c9cc9a124e4aa4968" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::createDefaultSelectionLists</definition>
        <argsstring>()</argsstring>
        <name>createDefaultSelectionLists</name>
        <briefdescription>
<para>If the specified integrator does not exist, create it, and point the integrator pointer to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1846" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1486" bodyend="1505"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8f04709a840ba7ea344db95b3db486c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::createTimeCourseSelectionList</definition>
        <argsstring>()</argsstring>
        <name>createTimeCourseSelectionList</name>
        <briefdescription>
<para>creates a selection list from the amounts / conc / variables ivars of the SimulationOptions struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1852" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1074" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a123438e90579635b6fd21fec8f11d83d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &gt;</type>
        <definition>std::vector&lt; SelectionRecord &gt; rr::RoadRunner::getSelectionList</definition>
        <argsstring>()</argsstring>
        <name>getSelectionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1854" column="21" bodyfile="rrRoadRunner.cpp" bodystart="667" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae32c3f10a636667166a3547b211bb6ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::applySimulateOptions</definition>
        <argsstring>()</argsstring>
        <name>applySimulateOptions</name>
        <briefdescription>
<para>The simulateOptions may be changed at any time. </para>
        </briefdescription>
        <detaileddescription>
<para>This updates the integrators just before they are used with the potentially changed options. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1861" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5242" bodyend="5258"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab0091e3fd01aa0d2051ab5136832da68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; rr::RoadRunner::getEigenValues</definition>
        <argsstring>(JacobianMode mode)</argsstring>
        <name>getEigenValues</name>
        <param>
          <type>JacobianMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1868" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2315" bodyend="2325"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a27cbba124047718be497467c183a7ab6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getEigenValuesNamedArray</definition>
        <argsstring>(JacobianMode mode)</argsstring>
        <name>getEigenValuesNamedArray</name>
        <param>
          <type>JacobianMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1870" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2337" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa7c8c79214cdf3a420a3c6a05cd01360" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::checkID</definition>
        <argsstring>(const std::string &amp;functionName, const std::string &amp;sid)</argsstring>
        <name>checkID</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>functionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1875" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6871" bodyend="6876"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a78a345b13c9b8f6c1297988bb6df5384" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::parseSpecies</definition>
        <argsstring>(const std::string &amp;species, double *stoichiometry, char **sid)</argsstring>
        <name>parseSpecies</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>species</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>stoichiometry</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1880" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6930" bodyend="6938"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adbfc8696409d5a806aee2e09c3cfa575" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeVariable</definition>
        <argsstring>(const std::string &amp;sid)</argsstring>
        <name>removeVariable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1885" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6940" bodyend="7121"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae21c2b6e8bcedc335d90c5e141f6e655" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::hasVariable</definition>
        <argsstring>(const libsbml::ASTNode *node, const std::string &amp;sid)</argsstring>
        <name>hasVariable</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1890" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7133" bodyend="7147"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adb04ab9782b9025f5209c194b12f1d57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSpeciesIdsFromAST</definition>
        <argsstring>(const libsbml::ASTNode *node, std::vector&lt; std::string &gt; &amp;species)</argsstring>
        <name>getSpeciesIdsFromAST</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>species</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1895" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7150" bodyend="7157"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6ff8350406024a03f77f758516a28e11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSpeciesIdsFromAST</definition>
        <argsstring>(const libsbml::ASTNode *node, std::vector&lt; std::string &gt; &amp;species, std::vector&lt; std::string &gt; &amp;speciesNames)</argsstring>
        <name>getSpeciesIdsFromAST</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>species</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>speciesNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1897" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7159" bodyend="7171"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a010cf5633324667c3e3d8c83f005fe07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::checkGlobalParameters</definition>
        <argsstring>()</argsstring>
        <name>checkGlobalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1903" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7174" bodyend="7197"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a516972576c9b42e85387307db03f936c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::saveSelectionVector</definition>
        <argsstring>(std::ostream &amp;, std::vector&lt; SelectionRecord &gt; &amp;)</argsstring>
        <name>saveSelectionVector</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1905" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5472" bodyend="5480"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afb806cadbfb14bddc33ef82b2ea7bb43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::loadSelectionVector</definition>
        <argsstring>(std::istream &amp;, std::vector&lt; SelectionRecord &gt; &amp;)</argsstring>
        <name>loadSelectionVector</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>in</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1907" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5632" bodyend="5644"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The main <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> class is responsible for loading and simulating SBML models.</para>
<para>MemoryManagment: Any pointer returned by a get... method is owned by the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object and does NOT have to be deleted. </para>
    </detaileddescription>
    <location file="rrRoadRunner.h" line="59" column="22" bodyfile="rrRoadRunner.h" bodystart="59" bodyend="1908"/>
    <listofallmembers>
      <member refid="classrr_1_1RoadRunner_1a8d7d526b65b7f4da57416eef928edc6e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addAssignmentRule</name></member>
      <member refid="classrr_1_1RoadRunner_1a7e475483794fc8b59d3b1b423607b2f5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addCompartment</name></member>
      <member refid="classrr_1_1RoadRunner_1aa65de948a2fbc7287c31b33cf676ced6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addDelay</name></member>
      <member refid="classrr_1_1RoadRunner_1a30b86079c416eb73b6f4da63ef6734af" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addEvent</name></member>
      <member refid="classrr_1_1RoadRunner_1ab1f82e576456f8c7ad94c30f1480a8f2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addEventAssignment</name></member>
      <member refid="classrr_1_1RoadRunner_1aa27ba6eab817899a3fe14f4ad65527dc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addInitialAssignment</name></member>
      <member refid="classrr_1_1RoadRunner_1a68e98a5de63e4dc8418738290d4c762b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addParameter</name></member>
      <member refid="classrr_1_1RoadRunner_1ab2cd3d8f9ca1b79014357b5445ee9bbd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addPriority</name></member>
      <member refid="classrr_1_1RoadRunner_1aa3a9acbff059e9feb7789b730681c86d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addRateRule</name></member>
      <member refid="classrr_1_1RoadRunner_1aa2247347171d5d46c270e18bbeaac4b0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addReaction</name></member>
      <member refid="classrr_1_1RoadRunner_1a651d468cbbc04ad129e3fd8b94f71307" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addReaction</name></member>
      <member refid="classrr_1_1RoadRunner_1a3af3fb5238087c26851a244ee0dcff8f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addSpeciesAmount</name></member>
      <member refid="classrr_1_1RoadRunner_1a6930962f454f983b35c2a147c1092347" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addSpeciesConcentration</name></member>
      <member refid="classrr_1_1RoadRunner_1aaaac271c2bcebe239646576d48592f01" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addTrigger</name></member>
      <member refid="classrr_1_1RoadRunner_1ae32c3f10a636667166a3547b211bb6ac" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>applySimulateOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a57f1463dafcc61a90c3122a8fb37b08d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>changeInitialConditions</name></member>
      <member refid="classrr_1_1RoadRunner_1a010cf5633324667c3e3d8c83f005fe07" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>checkGlobalParameters</name></member>
      <member refid="classrr_1_1RoadRunner_1aa7c8c79214cdf3a420a3c6a05cd01360" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>checkID</name></member>
      <member refid="classrr_1_1RoadRunner_1a6486934df5e346da4209a578f4eaea2b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>clearModel</name></member>
      <member refid="classrr_1_1RoadRunner_1a6fef677633e62e8c9cc9a124e4aa4968" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createDefaultSelectionLists</name></member>
      <member refid="classrr_1_1RoadRunner_1a0c49373f5b4da7d9bd23c278022b6429" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createDefaultSteadyStateSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1a51c4d5d1cfd6e8c8177d2bc0d6356cf4" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createDefaultTimeCourseSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1a422a0c1c50dfe1b6ae343e9313a005ee" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createSelection</name></member>
      <member refid="classrr_1_1RoadRunner_1a8f04709a840ba7ea344db95b3db486c3" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createTimeCourseSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1aab16c1bf7efe4d1076d3715bd4c1d6e0" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>dataVersionNumber</name></member>
      <member refid="classrr_1_1RoadRunner_1ad3f4b6ef217424cb9b12c798dfd1129c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>evalModel</name></member>
      <member refid="classrr_1_1RoadRunner_1a09cc39fcf1ae7a5046291a1b47d58d45" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>fileMagicNumber</name></member>
      <member refid="classrr_1_1RoadRunner_1a869c9a08c8ec66645d9910c08a52d41a" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>fixDependentSpeciesValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a2937cdfb17c33ce04dc3184b066bb942" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getAllVariables</name></member>
      <member refid="classrr_1_1RoadRunner_1a64b828272c3f6429b72d38e39cfcc3c3" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getAssignmentRuleIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a02467c06ea6325afa7536f29ec0c9f09" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesAmountsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1ae69dfa3779123d7d1b1da495477bcdd1" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesAmountsV</name></member>
      <member refid="classrr_1_1RoadRunner_1afc7498e1fe7098233c87f4427e74509b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a6d3c6c4f7d7e1a318ccda22b8c4dc540" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesConcentrationIds</name></member>
      <member refid="classrr_1_1RoadRunner_1ab13b18bcd87ed95a65b0f54412b22d53" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesConcentrationsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a08b51ec16a7cd7d13bf2df7628adf471" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesConcentrationsV</name></member>
      <member refid="classrr_1_1RoadRunner_1a4d2c6e653ebbfdebfe9708ee6b99eacc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCC</name></member>
      <member refid="classrr_1_1RoadRunner_1a14b51ebe111fd7292dbca21a2749125b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCompartmentByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a3175df12d85de114996361b468c2c38e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCompartmentIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a329f2009c2688bbedc906c21c4b8b3ef" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCompiler</name></member>
      <member refid="classrr_1_1RoadRunner_1ab2e1c9070010a6e372365102c4b4664c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservationMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1af69cf22ce68c8d5c4ab869fedefa16f9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservedMoietyAnalysis</name></member>
      <member refid="classrr_1_1RoadRunner_1ad352e9290b7827a2d780a3cc33be194d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservedMoietyIds</name></member>
      <member refid="classrr_1_1RoadRunner_1abdb0de6271ba9e054316d739cb9da1e9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservedMoietyValues</name></member>
      <member refid="classrr_1_1RoadRunner_1abd7ed519514ee77cfe64c5d4cab6fc3f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCurrentSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a284282cedaec1cc02059125532378cfe" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCurrentTime</name></member>
      <member refid="classrr_1_1RoadRunner_1a698b6a158299d3ba4a76f78a647f32a8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentFloatingSpeciesAmountsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1ac61b6d42fa24571e256af51f4b5f3859" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentFloatingSpeciesAmountsV</name></member>
      <member refid="classrr_1_1RoadRunner_1a5e941874b927f84ae9364a309f9ea74b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentFloatingSpeciesConcentrationsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a56c4c2dbf8dc303904b0b4b23ed81096" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentFloatingSpeciesConcentrationsV</name></member>
      <member refid="classrr_1_1RoadRunner_1ae1510bf8ed8a09c375605346c21eaefc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentFloatingSpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a8ab4bc9fd188058f67e84ac291d7eacd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentRatesOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1aed709485753c6718a1a861ae5eda1856" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentRatesOfChangeNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1add8f2cfb1a37ad4e352f43a9529a3035" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDiffStepSize</name></member>
      <member refid="classrr_1_1RoadRunner_1a4faad67b12aaf15212f7c57697556d61" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEE</name></member>
      <member refid="classrr_1_1RoadRunner_1a54d7fece5e6ac6fcba4d113f62aff1e4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEE</name></member>
      <member refid="classrr_1_1RoadRunner_1aea6a2de3cb5502f2924f6c874b848758" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEigenValueIds</name></member>
      <member refid="classrr_1_1RoadRunner_1ab0091e3fd01aa0d2051ab5136832da68" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEigenValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a27cbba124047718be497467c183a7ab6" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEigenValuesNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1ad9d66d24ede15b0c28db4093b782cd28" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExistingIntegratorNames</name></member>
      <member refid="classrr_1_1RoadRunner_1aa8b6f3e37b479867bc58c5ba7c40fb41" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExistingSensitivitySolverNames</name></member>
      <member refid="classrr_1_1RoadRunner_1aa0bc0322f7c8728205afe03628c136cd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExistingSteadyStateSolverNames</name></member>
      <member refid="classrr_1_1RoadRunner_1a6f87138b278b52031eba49422843a567" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExtendedStoichiometryMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a99dbe4b81831a8b7d5b53077027f465a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExtendedVersionInfo</name></member>
      <member refid="classrr_1_1RoadRunner_1a530082f417fdf1f947fcdf8c936ff074" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesAmountsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a4151d7c08054661f86265e36cdef51ff" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesAmountsV</name></member>
      <member refid="classrr_1_1RoadRunner_1a6b228e88494e9a1c5615c81889358df5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a2282dace1e13af6f074819684536c2d9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesConcentrationIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a449efe2b9a55e7c728c3a7ad47d0454e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesConcentrationsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a8c771da043718ef6a2ebf2a72cde498b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesConcentrationsV</name></member>
      <member refid="classrr_1_1RoadRunner_1a2df3e839e9faa56b6fb1b50f64aedfb6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a0bf792116912df16a5bffd637eb241c1" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesInitialConcentrationIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a9f58d69e9b0d77e7a141c3cbab08cd46" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesInitialConcentrations</name></member>
      <member refid="classrr_1_1RoadRunner_1a4d160ec4bffd82338fbd6d7c367418f0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesInitialConditionIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a5db663d82f5087b6d289ff9810256168" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFrequencyResponse</name></member>
      <member refid="classrr_1_1RoadRunner_1a08bb116b872c4f9f4d515745f2de7012" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullEigenValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a1b4939dd00d63dd4b73a0317b692b110" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullEigenValuesNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a8407626c7864621c3fd08781217b85b3" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullJacobian</name></member>
      <member refid="classrr_1_1RoadRunner_1a084f0b815a37adbe36636d5e8d465673" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullReorderedJacobian</name></member>
      <member refid="classrr_1_1RoadRunner_1a41cc42926d90928298b56d4aac722cd7" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullStoichiometryMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a241c4374d564427ef61df52862136574" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1af376e9fce37cc7b50cea8e8642eafb00" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterByName</name></member>
      <member refid="classrr_1_1RoadRunner_1a744ddb0d6ee6b750e11d752685a29797" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a1104cc3634e461f963a8682cbb6e0bbe" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a3e87e92d78163d57e36fd49c09676589" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getHasOnlySubstanceUnits</name></member>
      <member refid="classrr_1_1RoadRunner_1a8891806bc553fef5898f9e81751a9899" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a1379bc409a52fd7d43dc78abbdda77eb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentFloatingSpeciesAmountsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1aeef546a1279f26025bd97e6f574a5a38" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentFloatingSpeciesAmountsV</name></member>
      <member refid="classrr_1_1RoadRunner_1adb87f31990fb15986ae6f97ffc261933" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentFloatingSpeciesConcentrationsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a8664db2797f10dd0505898532c17d357" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentFloatingSpeciesConcentrationsV</name></member>
      <member refid="classrr_1_1RoadRunner_1a5008edbb3df7cd74abb87414638dea55" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentFloatingSpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a6c974443cc51485d9150c80dc5e730db" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentRatesOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1a856f9ed2a2abe44a1f91d679bd9f4d69" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentRatesOfChangeNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a3280d3b45ff394b0f507fb0a5983d582" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInfo</name></member>
      <member refid="classrr_1_1RoadRunner_1a3702f25236b2aead62907f1982ec2ac4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInitialAssignmentIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a4860f41d8552118f3c8c5d5fb6d999f6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInstanceCount</name></member>
      <member refid="classrr_1_1RoadRunner_1a6cc53f3668f94b3d88764e14b24bc87e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInstanceID</name></member>
      <member refid="classrr_1_1RoadRunner_1ac7ed0222daee67405616805b1bd02125" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIntegrator</name></member>
      <member refid="classrr_1_1RoadRunner_1a8acc349df7a67c32d696bb56952a069e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIntegratorByName</name></member>
      <member refid="classrr_1_1RoadRunner_1a3e0b8f15b7ab0042dcfd85c14fa207ca" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getKineticLaw</name></member>
      <member refid="classrr_1_1RoadRunner_1a24ba9e58efcfc856cb27c92f469fbdc6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getKMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a6b0be3f7470f1c52bb6965c9b4a4b662" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getL0Matrix</name></member>
      <member refid="classrr_1_1RoadRunner_1af7bf954facc34a728c55c151a82b4513" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getLibStruct</name></member>
      <member refid="classrr_1_1RoadRunner_1a0799a1330b5f488ac4ffd940b431e32a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getLinkMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1afa827d569de3c83dd286ac2aa25d1cf4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getModel</name></member>
      <member refid="classrr_1_1RoadRunner_1ad46f7fb56422a9220e9b02d5acc13d78" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getModelId</name></member>
      <member refid="classrr_1_1RoadRunner_1ac03b62cc39f62a61a556fe393e859e36" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getModelName</name></member>
      <member refid="classrr_1_1RoadRunner_1a8770cc21abd02ecd76e348a5d59971d0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNrMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a9c11a913c607be2ec0aaee76e81bef07" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNthSelectedOutput</name></member>
      <member refid="classrr_1_1RoadRunner_1a54a9d80927c998e0981a2deac0671758" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfBoundarySpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1a2f26307521e9930a85ed5c44bae67cfa" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfCompartments</name></member>
      <member refid="classrr_1_1RoadRunner_1a78708a8b3088ada0b5d7b2630a24904e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfDependentSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1af2467ad14443e89ac9a1ed98481093c3" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfFloatingSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1af23fe6ec9b4ca66c07e14db3dad23462" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfGlobalParameters</name></member>
      <member refid="classrr_1_1RoadRunner_1a0cbcdf248d716058325e50adf9239d4d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfIndependentSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1a0aeef3b4db855e2cd6e901372c9082f2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfReactions</name></member>
      <member refid="classrr_1_1RoadRunner_1abca853c2d24000857a1c0971b99ec004" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a22136f7f0ea6f72e6c8fce6de2dc93e2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getParamPromotedSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a67736588f72a8fb4f429368716acda93" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRateOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1a900fe6274335e44e7633e9e60695ed14" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRateOfChangeIds</name></member>
      <member refid="classrr_1_1RoadRunner_1aba310cd6f953aa82908c2006219270e6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRateRuleIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a129683b1d67a59066a0759983a9be38a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRatesOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1a228559aa22f87707bf0914e4e09654bf" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRatesOfChangeNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1ae8b19594ecf70d1995fc30e63c9a0826" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReactionIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a9284f10d515b8ef441473b5c14f5920e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReactionRate</name></member>
      <member refid="classrr_1_1RoadRunner_1a1d4371619e6e4e7a31ad721c75718c14" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReactionRates</name></member>
      <member refid="classrr_1_1RoadRunner_1a6927dede026cdbea282a7bdd504a1ebf" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedEigenValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a05fbd6d9b494008b255c945d486078f0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedEigenValuesNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a63002e13888d647221cec2fc5de559ab" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedJacobian</name></member>
      <member refid="classrr_1_1RoadRunner_1a53727bd9547815c2645505a2b0580368" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedStoichiometryMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a862621117012d7e294d7628fed11f82b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRegisteredIntegratorNames</name></member>
      <member refid="classrr_1_1RoadRunner_1acc731ff7a1fecb361366460e2dc0cdbe" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRegisteredSensitivitySolverNames</name></member>
      <member refid="classrr_1_1RoadRunner_1a4064f1dba1c7342c6e81987bfc61d2f7" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRegisteredSteadyStateSolverNames</name></member>
      <member refid="classrr_1_1RoadRunner_1ae154e3cc9560f4a5725f03cbe9bb3aa5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a56e53094e1e9be55fa0a7356e1526d2c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledConcentrationControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a511551ead0b6dcf50f161a0e6c8060d6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledElasticityMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a6a388eb7c0f64e215490fa606f458770" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledFloatingSpeciesElasticity</name></member>
      <member refid="classrr_1_1RoadRunner_1a8fab3bc1554a5a3cce0ee8fc7a2522a5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledFluxControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1ab5c1eda6c4babfbe69d46eaaa00e4b55" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectedValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a7be498f9a0d78bd85530b10a1b650125" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectedValues</name></member>
      <member refid="classrr_1_1RoadRunner_1ae51454870dda3981349064eeb5469fc5" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectedValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a123438e90579635b6fd21fec8f11d83d" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1a093f8d8cfe6959e2607eddccfd4a4989" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a51b5fe2a5b0d1b67120e61aa39f6c4da" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSensitivitySolver</name></member>
      <member refid="classrr_1_1RoadRunner_1a53e466cbc03508fc2f02e6cc957a3309" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSensitivitySolverByName</name></member>
      <member refid="classrr_1_1RoadRunner_1a1200e15aa2a3c0b8662e26f74f8320ae" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSimulateOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a12d2a06c5525aaf10c541d9cc91665ca" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSimulationData</name></member>
      <member refid="classrr_1_1RoadRunner_1adb04ab9782b9025f5209c194b12f1d57" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSpeciesIdsFromAST</name></member>
      <member refid="classrr_1_1RoadRunner_1a6ff8350406024a03f77f758516a28e11" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSpeciesIdsFromAST</name></member>
      <member refid="classrr_1_1RoadRunner_1af51f2c52092490f993e790ae4ece8fff" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a1062bc78d3b41301fa97dc5f2167baa2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSelectionStrings</name></member>
      <member refid="classrr_1_1RoadRunner_1aaaefc29aa1ff7f6fffdbcaa4425408cd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSolver</name></member>
      <member refid="classrr_1_1RoadRunner_1a588a2b17f736b4830f0327bf18bf455d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSolverByName</name></member>
      <member refid="classrr_1_1RoadRunner_1acae600eb92e9bd2a7739040e7148c0ae" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateThreshold</name></member>
      <member refid="classrr_1_1RoadRunner_1ab365ab17ad44a2e96e215e76d440f779" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateValues</name></member>
      <member refid="classrr_1_1RoadRunner_1aae721d16b518ee9ca9b9b8dfe0e18ec9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateValuesNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a64fd889ed2292a496bc06739e8fa206e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSupportedIdTypes</name></member>
      <member refid="classrr_1_1RoadRunner_1a0b5a3f0d39365ceef41514fabd1c90d5" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getTimeRowIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a7df50d5a0fa7265b62af24a2e996b6e0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getuCC</name></member>
      <member refid="classrr_1_1RoadRunner_1ad1a582f68475ad9e923dd23b12397d86" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getuEE</name></member>
      <member refid="classrr_1_1RoadRunner_1a6957a9119e32959e4bbd47107a22f8a5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getuEE</name></member>
      <member refid="classrr_1_1RoadRunner_1acbd395494bb482a6e571f848e825bf1d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledConcentrationControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1ae70640f21445afff8da22e8ee23921b0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledElasticityMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1afadf49f466a97f5fa4f1f1bdfcf1e3f5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledFluxControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a5fb2c2cc40a2badce7c4803917cba029" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledParameterElasticity</name></member>
      <member refid="classrr_1_1RoadRunner_1a5856b94d04fadfb190b407b126382503" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledSpeciesElasticity</name></member>
      <member refid="classrr_1_1RoadRunner_1aa030bd78fd18af9737b6798e246dd4cb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a1ffdbba3a4b35b4092bc743aad78ccdd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a1cecf2554210e549f7a379001a57066c" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getVariableValue</name></member>
      <member refid="classrr_1_1RoadRunner_1ae21c2b6e8bcedc335d90c5e141f6e655" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>hasVariable</name></member>
      <member refid="classrr_1_1RoadRunner_1a0045bee656601921b9f2ef88ab5b0599" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>impl</name></member>
      <member refid="classrr_1_1RoadRunner_1a2abbc28f0781c4d0355c94405303749f" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>initLLVM</name></member>
      <member refid="classrr_1_1RoadRunner_1a8ca66bd2ccdbe4e9fac1457d67884a69" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>integratorExists</name></member>
      <member refid="classrr_1_1RoadRunner_1a2d4f3df674f8f6500d87a584b4f365cd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>internalOneStep</name></member>
      <member refid="classrr_1_1RoadRunner_1aecea2dbffc17d0322b00e18f126058b5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>isModelLoaded</name></member>
      <member refid="classrr_1_1RoadRunner_1ad7c60d7ae5c8b92b1c4a1490f1d9d929" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>isParameterUsed</name></member>
      <member refid="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386ad752365597bec82910aae067d603df58" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>JACOBIAN_FULL</name></member>
      <member refid="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386a0b8d064264c228c12c32627d3916804f" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>JACOBIAN_REDUCED</name></member>
      <member refid="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>JacobianMode</name></member>
      <member refid="classrr_1_1RoadRunner_1a3c3d5f6711f1c17c495627e970378f7d" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>llvmInitialized</name></member>
      <member refid="classrr_1_1RoadRunner_1a9d1e7a6e9b2fff7561bd59d2e8475d6e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>load</name></member>
      <member refid="classrr_1_1RoadRunner_1afb806cadbfb14bddc33ef82b2ea7bb43" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>loadSelectionVector</name></member>
      <member refid="classrr_1_1RoadRunner_1a56030d98802a87d9aa960cbb7bb5f0c6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>loadState</name></member>
      <member refid="classrr_1_1RoadRunner_1a68f5a245b02936d4ed83dcfe9145bf83" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>loadStateS</name></member>
      <member refid="classrr_1_1RoadRunner_1aaa2b76b778006437b495a524b7ec94ec" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>makeIntegrator</name></member>
      <member refid="classrr_1_1RoadRunner_1accc767f44bdc41e29155e8a3ff6a4eb4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>makeSensitivitySolver</name></member>
      <member refid="classrr_1_1RoadRunner_1ad1c1bf612dfbc109788eb79450fadc75" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>makeSteadyStateSolver</name></member>
      <member refid="classrr_1_1RoadRunner_1a018f17c09b36e42f052989a57fc5b2a4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>mcaSteadyState</name></member>
      <member refid="classrr_1_1RoadRunner_1a27aedd28b2a2d5453200ca4a4a2bf4c0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>oneStep</name></member>
      <member refid="classrr_1_1RoadRunner_1aa12fab77f4edec82aa83d28c36045afe" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>operator=</name></member>
      <member refid="classrr_1_1RoadRunner_1a78a345b13c9b8f6c1297988bb6df5384" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>parseSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1aafcbbfa263f8ca43ac0eda623b86a7b9" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>populateResult</name></member>
      <member refid="classrr_1_1RoadRunner_1a0e944d337b8d9204092df7056e1d2b83" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>regenerateModel</name></member>
      <member refid="classrr_1_1RoadRunner_1ace9c4f3cde41235114838e6b4368f3c8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>registerSolvers</name></member>
      <member refid="classrr_1_1RoadRunner_1ad3f2043bc6e645f5319119df37a9eadb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeCompartment</name></member>
      <member refid="classrr_1_1RoadRunner_1ad5e6fc77db2c058d9d165a37c56ce700" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeEvent</name></member>
      <member refid="classrr_1_1RoadRunner_1a6f5bbcfeff4758a5e91c15e16c880641" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeEventAssignments</name></member>
      <member refid="classrr_1_1RoadRunner_1a4a47d78c63af139f9cbe5aedab5e7b3b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeInitialAssignment</name></member>
      <member refid="classrr_1_1RoadRunner_1aa22a0401fda4aa17a3118a833fdde286" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeParameter</name></member>
      <member refid="classrr_1_1RoadRunner_1a0d0a6d74578a9017244bae5a74b253e9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeReaction</name></member>
      <member refid="classrr_1_1RoadRunner_1adc65f44da5821758e912bd109fadfa1e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeRules</name></member>
      <member refid="classrr_1_1RoadRunner_1a2d24e223ee2a7b1c44a7b9d6db0d4b93" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1adbfc8696409d5a806aee2e09c3cfa575" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeVariable</name></member>
      <member refid="classrr_1_1RoadRunner_1ae4b0eaa39fd37737e5f5fd7f7741e06c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>reset</name></member>
      <member refid="classrr_1_1RoadRunner_1a807cbac5ca760b0f3ff033851cf5276b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>reset</name></member>
      <member refid="classrr_1_1RoadRunner_1a5d1d6591131764e8e7a6cdd6a9ae6ae8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>resetSelectionLists</name></member>
      <member refid="classrr_1_1RoadRunner_1a04a6fd481cfacc2510d5d113520143ef" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1ad66240360fee4ccad50097e4b4c8460b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1a3e326546550b3f4533dd7d6b3f2f4250" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1aa6518611d8ac7cd908dbf5704d129020" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1a516972576c9b42e85387307db03f936c" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>saveSelectionVector</name></member>
      <member refid="classrr_1_1RoadRunner_1ac982f0742233d5ad487064734c3b793c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>saveState</name></member>
      <member refid="classrr_1_1RoadRunner_1a3f30bcb94eeb86ac029b123f51214c94" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>saveStateS</name></member>
      <member refid="classrr_1_1RoadRunner_1ae645693f2c3652b951e106be544a09cd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>sensitivitySolverExists</name></member>
      <member refid="classrr_1_1RoadRunner_1a3254de1bcafde8fb4aa28e4241fa7c9c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setBoundary</name></member>
      <member refid="classrr_1_1RoadRunner_1abc64866144a2a728af78010c1d8badb2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setBoundarySpeciesAmounts</name></member>
      <member refid="classrr_1_1RoadRunner_1af8d2ff8ebf2c85f918cc2888ac68f479" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setBoundarySpeciesByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a42a995530149829e8deda1a18419a864" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setBoundarySpeciesConcentrations</name></member>
      <member refid="classrr_1_1RoadRunner_1a01dbe5358bd652891be6209260523cb6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setCompartmentByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a8372249ea83ce40f91b935b09791a920" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setCompiler</name></member>
      <member refid="classrr_1_1RoadRunner_1adbea6710dcab6c825573ce5c9b35dd57" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setConservedMoietyAnalysis</name></member>
      <member refid="classrr_1_1RoadRunner_1aa4eff2424c186a5ba3a3d35cf91dce2f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setConstant</name></member>
      <member refid="classrr_1_1RoadRunner_1ae5b37837542f842bd6ac6aef11875e97" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setDiffStepSize</name></member>
      <member refid="classrr_1_1RoadRunner_1ad68d81c08a570f120db08c8e5ca735e9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setFloatingSpeciesByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a5e1dcd14759e468e510a298f61b267de" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setFloatingSpeciesConcentrations</name></member>
      <member refid="classrr_1_1RoadRunner_1a08176e93872548591ce96b2f9c20dc74" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setFloatingSpeciesInitialConcentrationByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a3c85d3178f85ec302f1dd8f13fb87aa8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setFloatingSpeciesInitialConcentrations</name></member>
      <member refid="classrr_1_1RoadRunner_1aa90f680c2d8e3c1dbd67c90de015338c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setGlobalParameterByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a1b5525fc1a0ada03bb75f78f77c9bbbc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setGlobalParameterByName</name></member>
      <member refid="classrr_1_1RoadRunner_1af0c85ad9ef78812bfbf31636683b4ddb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setHasOnlySubstanceUnits</name></member>
      <member refid="classrr_1_1RoadRunner_1a8d8050a4d09992b395de75ff50f66b3f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setInitAmount</name></member>
      <member refid="classrr_1_1RoadRunner_1a968b5f01bf7fe6a76a860794130d15e8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setInitConcentration</name></member>
      <member refid="classrr_1_1RoadRunner_1a1400fd93277e9c4b85be1685a4c6ebb7" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setIntegrator</name></member>
      <member refid="classrr_1_1RoadRunner_1a7424f3dc7d18d5697e66b0d19700aae4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setKineticLaw</name></member>
      <member refid="classrr_1_1RoadRunner_1a5c63bb6592faf97451de620a6ab4d444" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setModelId</name></member>
      <member refid="classrr_1_1RoadRunner_1a946f9140f83ede43c2e5bc2192d8e052" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setModelName</name></member>
      <member refid="classrr_1_1RoadRunner_1a5e00a39a88bf7d36c165f4ca9fbb3674" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a0c10e1079ae0ae44f0e54b4f9b54c884" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setPersistent</name></member>
      <member refid="classrr_1_1RoadRunner_1a61d920026f1d614669007665c3aec5fb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setReversible</name></member>
      <member refid="classrr_1_1RoadRunner_1ae2638d52117ad68f9ca1dc7bff285bd6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a152430ddf10b8270698519bd4d1d0738" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1aa3581eec71bf1d7385d86bb6b2e247ce" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSensitivitySolver</name></member>
      <member refid="classrr_1_1RoadRunner_1aca42a09b3b1ce89330d42c48ddae21c2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSimulateOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a166d905000777fc76767f6625df12bcd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a5113f4906344694a60663dc57531bf30" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a8bfdd74d62dfebda90f01d183c8f4201" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateSolver</name></member>
      <member refid="classrr_1_1RoadRunner_1a64b81cdc2b84a6f28affd212ef474392" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateThreshold</name></member>
      <member refid="classrr_1_1RoadRunner_1a6731da1be25ebbe4ab0c7cddcbc8e97b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setTriggerInitialValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a2aeb31b55a8f049c27910cd00f90c868" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a377834f22edadb7706779ecca7c1eb4e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>simulate</name></member>
      <member refid="classrr_1_1RoadRunner_1ad3701c04d6317e96c2d2bb235b99d60b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>simulate</name></member>
      <member refid="classrr_1_1RoadRunner_1a3148beddf65c37bcdce6cfd2726c48ef" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>simulate</name></member>
      <member refid="classrr_1_1RoadRunner_1a4d337717ab4237e734f268c54d55cea6" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>solversRegistered</name></member>
      <member refid="classrr_1_1RoadRunner_1af310e01ec241bc2b19a46629087024d0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyState</name></member>
      <member refid="classrr_1_1RoadRunner_1af49d6134c7a2e1728e32ee9182ed152d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyStateNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a079cff347871871d192c2db5c02cbdf5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyStateSolverExists</name></member>
      <member refid="classrr_1_1RoadRunner_1a5b337a5d5625545db98bdcaf9ba71c7c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>timeSeriesSensitivities</name></member>
      <member refid="classrr_1_1RoadRunner_1a4e75cb4bdcd03300133aef022f53b34c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>validateCurrentSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>VariableType</name></member>
      <member refid="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a08535eb44df113e1d6f85f42726753bd" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>vtFlux</name></member>
      <member refid="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a4ae4e1e200c7a750c23c3a46db0c4296" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>vtSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1a102e7c27e29219ae56e48ffd607fd621" prot="public" virt="virtual"><scope>rr::RoadRunner</scope><name>~RoadRunner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
