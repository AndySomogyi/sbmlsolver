<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classrr_1_1RoadRunner" kind="class" language="C++" prot="public">
    <compoundname>rr::RoadRunner</compoundname>
    <includes refid="rrRoadRunner_8h" local="no">rrRoadRunner.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18" prot="private" static="no" strong="no">
        <type></type>
        <name>VariableType</name>
        <enumvalue id="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a4ae4e1e200c7a750c23c3a46db0c4296" prot="private">
          <name>vtSpecies</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a08535eb44df113e1d6f85f42726753bd" prot="private">
          <name>vtFlux</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1589" column="9" bodyfile="rrRoadRunner.h" bodystart="1590" bodyend="1592"/>
      </memberdef>
      <memberdef kind="enum" id="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386" prot="private" static="no" strong="no">
        <type></type>
        <name>JacobianMode</name>
        <enumvalue id="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386ad752365597bec82910aae067d603df58" prot="private">
          <name>JACOBIAN_FULL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386a0b8d064264c228c12c32627d3916804f" prot="private">
          <name>JACOBIAN_REDUCED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1626" column="9" bodyfile="rrRoadRunner.h" bodystart="1626" bodyend="1628"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1a0045bee656601921b9f2ef88ab5b0599" prot="private" static="no" mutable="no">
        <type>class <ref refid="classrr_1_1RoadRunnerImpl" kindref="compound">RoadRunnerImpl</ref> *</type>
        <definition>class RoadRunnerImpl* rr::RoadRunner::impl</definition>
        <argsstring></argsstring>
        <name>impl</name>
        <briefdescription>
<para>private implementation class, can only access if inside the implementation file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1636" column="30" bodyfile="rrRoadRunner.h" bodystart="1636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1a09cc39fcf1ae7a5046291a1b47d58d45" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rr::RoadRunner::fileMagicNumber</definition>
        <argsstring></argsstring>
        <name>fileMagicNumber</name>
        <initializer>= 0xAD6F52</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1670" column="19" bodyfile="rrRoadRunner.h" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrr_1_1RoadRunner_1aab16c1bf7efe4d1076d3715bd4c1d6e0" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int rr::RoadRunner::dataVersionNumber</definition>
        <argsstring></argsstring>
        <name>dataVersionNumber</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1671" column="19" bodyfile="rrRoadRunner.h" bodystart="1671" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a04a6fd481cfacc2510d5d113520143ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(unsigned int level=3, unsigned int version=2)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>unsigned int</type>
          <declname>level</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>version</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>create an empty <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object with given SBML level and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="54" column="9" bodyfile="rrRoadRunner.cpp" bodystart="492" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad66240360fee4ccad50097e4b4c8460b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(const std::string &amp;uriOrSBML, const Dictionary *options=0)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uriOrSBML</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>load an sbml document from anywhere. </para>
        </briefdescription>
        <detaileddescription>
<para>same arguments as load.</para>
<para>If options is not null, then the RoadRunner::computeAndAssignConservationLaws flag is set to whatever value is specified in the options struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uriOrSBML</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI, local path or sbml document contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>an options struct, if null, default values are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="67" column="9" bodyfile="rrRoadRunner.cpp" bodystart="519" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3e326546550b3f4533dd7d6b3f2f4250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(const std::string &amp;compiler, const std::string &amp;tempDir, const std::string &amp;supportCodeDir)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>compiler</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tempDir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>supportCodeDir</declname>
        </param>
        <briefdescription>
<para>All three of the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> options default to the empty string, in this case, the default values are used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compiler</parametername>
</parameternamelist>
<parameterdescription>
<para>If LLVM build is enabled, the compiler defaults to LLVM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tempDir</parametername>
</parameternamelist>
<parameterdescription>
<para>If the old external C compiler is used, this is the where the C files are written to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>supportCodeDir</parametername>
</parameternamelist>
<parameterdescription>
<para>If the old external C compiler is used, this is the location where roadrunner C include files are. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="79" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa6518611d8ac7cd908dbf5704d129020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RoadRunner</definition>
        <argsstring>(const RoadRunner &amp;rr)</argsstring>
        <name>RoadRunner</name>
        <param>
          <type>const <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para><ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> copy constructor Explicitly defined because of Python. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="86" column="9" bodyfile="rrRoadRunner.cpp" bodystart="574" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a102e7c27e29219ae56e48ffd607fd621" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>rr::RoadRunner::~RoadRunner</definition>
        <argsstring>()</argsstring>
        <name>~RoadRunner</name>
        <briefdescription>
<para>free any memory this class allocated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="91" column="17" bodyfile="rrRoadRunner.cpp" bodystart="619" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6cc53f3668f94b3d88764e14b24bc87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getInstanceID</definition>
        <argsstring>()</argsstring>
        <name>getInstanceID</name>
        <briefdescription>
<para>When there are multiple instances of <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref>, this is the instance id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="96" column="13" bodyfile="rrRoadRunner.cpp" bodystart="487" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4860f41d8552118f3c8c5d5fb6d999f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getInstanceCount</definition>
        <argsstring>()</argsstring>
        <name>getInstanceCount</name>
        <briefdescription>
<para>Number of currently running <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="101" column="13" bodyfile="rrRoadRunner.cpp" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2b7022cadd857fa4fb3cb24703da608a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getInfo</definition>
        <argsstring>()</argsstring>
        <name>getInfo</name>
        <briefdescription>
<para>information about the current state of this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="112" column="21" bodyfile="rrRoadRunner.cpp" bodystart="639" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a329f2009c2688bbedc906c21c4b8b3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classrr_1_1Compiler" kindref="compound">Compiler</ref> *</type>
        <definition>Compiler * rr::RoadRunner::getCompiler</definition>
        <argsstring>()</argsstring>
        <name>getCompiler</name>
        <briefdescription>
<para>The <ref refid="classrr_1_1Compiler" kindref="compound">Compiler</ref> that the ModelGenerator is using to compile / interpret sbml code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="117" column="24" bodyfile="rrRoadRunner.cpp" bodystart="713" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8372249ea83ce40f91b935b09791a920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setCompiler</definition>
        <argsstring>(const std::string &amp;compiler)</argsstring>
        <name>setCompiler</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>compiler</declname>
        </param>
        <briefdescription>
<para>Set the name of the externa compiler to use. </para>
        </briefdescription>
        <detaileddescription>
<para>Some ModelGenerators may have no use for this value.</para>
<para>An exception is raised if the string is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="125" column="14" bodyfile="rrRoadRunner.cpp" bodystart="719" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac7ed0222daee67405616805b1bd02125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> *</type>
        <definition>Integrator * rr::RoadRunner::getIntegrator</definition>
        <argsstring>()</argsstring>
        <name>getIntegrator</name>
        <briefdescription>
<para>get a pointer to the integrator which is currently being used to time evolve the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="131" column="20" bodyfile="rrRoadRunner.cpp" bodystart="4289" bodyend="4293"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8acc349df7a67c32d696bb56952a069e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> *</type>
        <definition>Integrator * rr::RoadRunner::getIntegratorByName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getIntegratorByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get an integrator by name without switching the current integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="136" column="20" bodyfile="rrRoadRunner.cpp" bodystart="4295" bodyend="4308"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9733b034ce4b31a0de369aeddbd46b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> *</type>
        <definition>Integrator * rr::RoadRunner::makeIntegrator</definition>
        <argsstring>(std::string name)</argsstring>
        <name>makeIntegrator</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Make an integrator for the given name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="141" column="20" bodyfile="rrRoadRunner.cpp" bodystart="4375" bodyend="4385"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aaaefc29aa1ff7f6fffdbcaa4425408cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SteadyStateSolver" kindref="compound">SteadyStateSolver</ref> *</type>
        <definition>SteadyStateSolver * rr::RoadRunner::getSteadyStateSolver</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateSolver</name>
        <briefdescription>
<para>get a pointer to the current steady state solver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="146" column="27" bodyfile="rrRoadRunner.cpp" bodystart="4310" bodyend="4313"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad9d66d24ede15b0c28db4093b782cd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getExistingIntegratorNames</definition>
        <argsstring>()</argsstring>
        <name>getExistingIntegratorNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="149" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4315" bodyend="4324"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac3ccb06871cfe662abd775801b25f835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setIntegrator</definition>
        <argsstring>(std::string name)</argsstring>
        <name>setIntegrator</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="169" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4352" bodyend="4373"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6255eb24622f4ff07f88585a689a6a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::integratorExists</definition>
        <argsstring>(std::string name)</argsstring>
        <name>integratorExists</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="171" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4388" bodyend="4399"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abac44c006635091660819ccbfd5a7cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateSolver</definition>
        <argsstring>(std::string name)</argsstring>
        <name>setSteadyStateSolver</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="173" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4401" bodyend="4424"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6b74d564136611063908de4a45652f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::steadyStateSolverExists</definition>
        <argsstring>(std::string name)</argsstring>
        <name>steadyStateSolverExists</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="175" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4427" bodyend="4438"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aecea2dbffc17d0322b00e18f126058b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::isModelLoaded</definition>
        <argsstring>()</argsstring>
        <name>isModelLoaded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="177" column="14" bodyfile="rrRoadRunner.cpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9519f489ada956e35bd0b65e44e96cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getModelName</definition>
        <argsstring>()</argsstring>
        <name>getModelName</name>
        <briefdescription>
<para>returns the model name if a model is loaded, empty string otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="182" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3037" bodyend="3040"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6486934df5e346da4209a578f4eaea2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::clearModel</definition>
        <argsstring>()</argsstring>
        <name>clearModel</name>
        <briefdescription>
<para>Clears the currently loaded model and all associated memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes jitted code and libStruct data <simplesect kind="return"><para>True if memory was freed, false if no model was loaded in the first place </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="190" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1162" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a27aedd28b2a2d5453200ca4a4a2bf4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::oneStep</definition>
        <argsstring>(double currentTime, double stepSize, bool reset=true)</argsstring>
        <name>oneStep</name>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Carry out a single integration step using a stepsize as indicated in the method call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para>starting time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>final time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>override current options. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="200" column="16" bodyfile="rrRoadRunner.cpp" bodystart="2049" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2d4f3df674f8f6500d87a584b4f365cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::internalOneStep</definition>
        <argsstring>(double currentTime, double stepSize, bool reset=true)</argsstring>
        <name>internalOneStep</name>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stepSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Carry out a single internal solver integration step. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para>starting time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>final time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>override current options. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="209" column="16" bodyfile="rrRoadRunner.cpp" bodystart="2071" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const ls::DoubleMatrix *</type>
        <definition>const DoubleMatrix * rr::RoadRunner::simulate</definition>
        <argsstring>(const Dictionary *options=0)</argsstring>
        <name>simulate</name>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Simulate the current SBML model. </para>
        </briefdescription>
        <detaileddescription>
<para>If options is null, then the current simulation settings (start time, end time, n steps) are used. If options is not null, then the current simulation settings are set to the values specified by options and they are used.</para>
<para>The options <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> may contain a large number of options, for a complete list of all available options for each integrator type, <simplesect kind="see"><para><ref refid="classrr_1_1IntegratorFactory" kindref="compound">IntegratorFactory</ref>, </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref>.</para>
</simplesect>
For example, to perform a simulation from time 0 to 10 with 1000 steps, using a stiff integtator, you would: <programlisting><codeline><highlight class="normal">RoadRunner<sp/>r<sp/>=<sp/>RoadRunner(&quot;someFile.xml&quot;);</highlight></codeline>
<codeline><highlight class="normal">BasicDictionary<sp/>opt;</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;start&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;duration&quot;,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;steps&quot;,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;stiff&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>DoubleMatrix<sp/>*result<sp/>=<sp/>r.simulate(&amp;opt);</highlight></codeline>
</programlisting></para>
<para>Similarly, if one wants to use a stochastic integrator, such as the Gillespie integrator, this is set via the &quot;integrator&quot; key, i.e. <programlisting><codeline><highlight class="normal">RoadRunner<sp/>r<sp/>=<sp/>RoadRunner(&quot;someFile.xml&quot;);</highlight></codeline>
<codeline><highlight class="normal">BasicDictionary<sp/>opt;</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;integrator&quot;,<sp/>&quot;gillespie&quot;);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;start&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;duration&quot;,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;steps&quot;,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;stiff&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">opt.setItem(&quot;seed&quot;,<sp/>12345);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>DoubleMatrix<sp/>*result<sp/>=<sp/>r.simulate(&amp;opt);</highlight></codeline>
</programlisting> Here, the &quot;integrator&quot; specifies the integrator to use. The &quot;stiff&quot; key is only used by the deterministic solvers, and it is safely ignored by the stochastic solvers. Also, the &quot;seed&quot; sets the random seed that the integrator uses. For more information about all of the avaialble options for each integrator,</para>
<para>If one wants to not store the result matrix in memory and instead write it to a file during simulation, one can set the output_file option. When output file is nonempty, <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">simulate()</ref> will write to its path once every Config::K_ROWS_PER_WRITE rows are generated and clear the matrix. So an empty result matrix is returned, and the last simulation results are not stored.</para>
<para><simplesect kind="see"><para>IntegratorFactory::getIntegratorOptions".</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>an</parametername>
</parameternamelist>
<parameterdescription>
<para>std::exception if any options are invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a borrowed reference to a DoubleMatrix object if successful. The matrix will be empty if output_file is specified and nonempty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="266" column="32" bodyfile="rrRoadRunner.cpp" bodystart="1712" bodyend="2046"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac982f0742233d5ad487064734c3b793c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::saveState</definition>
        <argsstring>(std::string filename, char opt=&apos;b&apos;)</argsstring>
        <name>saveState</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>char</type>
          <declname>opt</declname>
          <defval>&apos;b&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="274" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5218" bodyend="5413"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a38cbd1331c551f4b62b07a3886efd68a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::loadState</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>loadState</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="279" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5428" bodyend="5550"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a899aaac624f8b7c6aadee6beeb12bbdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ls::DoubleMatrix *</type>
        <definition>const DoubleMatrix * rr::RoadRunner::getSimulationData</definition>
        <argsstring>() const</argsstring>
        <name>getSimulationData</name>
        <briefdescription>
<para><ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> keeps a copy of the simulation data around until the next call to simulate. </para>
        </briefdescription>
        <detaileddescription>
<para>This matrix can be obtained here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="285" column="32" bodyfile="rrRoadRunner.cpp" bodystart="5182" bodyend="5185"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aca42a09b3b1ce89330d42c48ddae21c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSimulateOptions</definition>
        <argsstring>(const SimulateOptions &amp;settings)</argsstring>
        <name>setSimulateOptions</name>
        <param>
          <type>const <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> &amp;</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="291" column="14" bodyfile="rrRoadRunner.cpp" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1200e15aa2a3c0b8662e26f74f8320ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> &amp;</type>
        <definition>SimulateOptions &amp; rr::RoadRunner::getSimulateOptions</definition>
        <argsstring>()</argsstring>
        <name>getSimulateOptions</name>
        <briefdescription>
<para>get a reference to the <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> that were set either by setSimulateOptions or simulate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="297" column="25" bodyfile="rrRoadRunner.cpp" bodystart="734" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abca853c2d24000857a1c0971b99ec004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrr_1_1RoadRunnerOptions" kindref="compound">RoadRunnerOptions</ref> &amp;</type>
        <definition>RoadRunnerOptions &amp; rr::RoadRunner::getOptions</definition>
        <argsstring>()</argsstring>
        <name>getOptions</name>
        <briefdescription>
<para>Get a reference to the options that determine how this class should behave. </para>
        </briefdescription>
        <detaileddescription>
<para>These are general options. For options specific for loading or simulationg, <simplesect kind="see"><para><ref refid="classrr_1_1RoadRunner_1a1200e15aa2a3c0b8662e26f74f8320ae" kindref="member">getSimulateOptions</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="305" column="27" bodyfile="rrRoadRunner.cpp" bodystart="5177" bodyend="5180"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5e00a39a88bf7d36c165f4ca9fbb3674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setOptions</definition>
        <argsstring>(const RoadRunnerOptions &amp;)</argsstring>
        <name>setOptions</name>
        <param>
          <type>const <ref refid="structrr_1_1RoadRunnerOptions" kindref="compound">RoadRunnerOptions</ref> &amp;</type>
          <defname>opt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="308" column="14" bodyfile="rrRoadRunner.cpp" bodystart="629" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae422b8ad65ca1cabcb7bd88b8c1f7264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getSBML</definition>
        <argsstring>(int level=0, int version=0)</argsstring>
        <name>getSBML</name>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>get the originally loaded sbml document as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This may optionally up or downconvert the document to a different version, if the level and version arguments are non-zero.</para>
<para>If both arguments are zero, then the document is left alone and the </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="318" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4183" bodyend="4196"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aee591c512811f899a6d41799728173c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getCurrentSBML</definition>
        <argsstring>(int level=0, int version=0)</argsstring>
        <name>getCurrentSBML</name>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>version</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the SBML with the current model parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This is different than getSBML which returns the orginal SBML.</para>
<para>This may optionally up or downconvert the document to a different version, if the level and version arguments are non-zero.</para>
<para>If both arguments are zero, then the document is left alone and the original version is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="331" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4198" bodyend="4263"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae4b0eaa39fd37737e5f5fd7f7741e06c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Picks up default options from config. </para>
        </briefdescription>
        <detaileddescription>
<para>The current default is <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394add36248cdf4b1f588dd6fdd11855b012" kindref="member">SelectionRecord::TIME</ref> | <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394a2235d37b12b17d658b8f33a87712c806" kindref="member">SelectionRecord::RATE</ref> | <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394a6782153cdd565a17aef949662aa11a4a" kindref="member">SelectionRecord::FLOATING</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="339" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1179" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a807cbac5ca760b0f3ff033851cf5276b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::reset</definition>
        <argsstring>(int options)</argsstring>
        <name>reset</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>reset the model accordign to a bitfield specified by the <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394" kindref="member">SelectionRecord::SelectionType</ref> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Note, this would make more sense as an unsigned, however SWIG has issues mapping an enum to an unsigned, but seems to map enums just fine to an int.</para>
<para>For example, to reset the floating species, time and rate rule values: <programlisting><codeline><highlight class="normal">r.reset(SelectionRecord::TIME<sp/>|<sp/>SelectionRecord::RATE<sp/>|<sp/>SelectionRecord::FLOATING);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>a bitmask made from the SelectionRecord::SelectionTypes values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="355" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1189" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5d1d6591131764e8e7a6cdd6a9ae6ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::resetSelectionLists</definition>
        <argsstring>()</argsstring>
        <name>resetSelectionLists</name>
        <briefdescription>
<para>resets time course and steady state selection lists to defaults </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="360" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1212" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a57f1463dafcc61a90c3122a8fb37b08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::changeInitialConditions</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;ic)</argsstring>
        <name>changeInitialConditions</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>ic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="370" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4265" bodyend="4274"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afa827d569de3c83dd286ac2aa25d1cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> *</type>
        <definition>ExecutableModel * rr::RoadRunner::getModel</definition>
        <argsstring>()</argsstring>
        <name>getModel</name>
        <briefdescription>
<para>get a pointer to the <ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> owned by the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="376" column="25" bodyfile="rrRoadRunner.cpp" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9d1e7a6e9b2fff7561bd59d2e8475d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::load</definition>
        <argsstring>(const std::string &amp;uriOrSBML, const Dictionary *options=0)</argsstring>
        <name>load</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uriOrSBML</declname>
        </param>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>load an sbml document from anywhere. </para>
        </briefdescription>
        <detaileddescription>
<para>If options is not null, then the RoadRunner::computeAndAssignConservationLaws flag is set to whatever value is specified in the options struct.</para>
<para>WARNING, will no longer return a value in next version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uriOrSBML</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI, local path or sbml document contents. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>an options struct, if null, default values are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="389" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1073" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a422a0c1c50dfe1b6ae343e9313a005ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref></type>
        <definition>SelectionRecord rr::RoadRunner::createSelection</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>createSelection</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>create a selection record. </para>
        </briefdescription>
        <detaileddescription>
<para>This record can be used to select values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="400" column="29" bodyfile="rrRoadRunner.cpp" bodystart="4509" bodyend="4687"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a093f8d8cfe6959e2607eddccfd4a4989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
        <definition>std::vector&lt; rr::SelectionRecord &gt; &amp; rr::RoadRunner::getSelections</definition>
        <argsstring>()</argsstring>
        <name>getSelections</name>
        <briefdescription>
<para>Returns the currently selected columns that will be returned by calls to <ref refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" kindref="member">simulate()</ref> or simulateEx(,,). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="406" column="21" bodyfile="rrRoadRunner.cpp" bodystart="1230" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa030bd78fd18af9737b6798e246dd4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getValue</definition>
        <argsstring>(const std::string &amp;sel)</argsstring>
        <name>getValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
<para>Creates a new selection based on the selection string, and returns the value it queries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="412" column="16" bodyfile="rrRoadRunner.cpp" bodystart="4457" bodyend="4460"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1ffdbba3a4b35b4092bc743aad78ccdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getValue</definition>
        <argsstring>(const SelectionRecord &amp;record)</argsstring>
        <name>getValue</name>
        <param>
          <type>const <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &amp;</type>
          <declname>record</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="414" column="16" bodyfile="rrRoadRunner.cpp" bodystart="868" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae2638d52117ad68f9ca1dc7bff285bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSelections</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;selections)</argsstring>
        <name>setSelections</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="417" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a152430ddf10b8270698519bd4d1d0738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSelections</definition>
        <argsstring>(const std::vector&lt; rr::SelectionRecord &gt; &amp;selections)</argsstring>
        <name>setSelections</name>
        <param>
          <type>const std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
          <declname>selections</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="419" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4706" bodyend="4709"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9c98b4f3d57c4935b744d8cd831d4a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; rr::RoadRunner::getSelectedValues</definition>
        <argsstring>()</argsstring>
        <name>getSelectedValues</name>
        <briefdescription>
<para>returns the values selected with <ref refid="classrr_1_1SimulateOptions" kindref="compound">SimulateOptions</ref> for the current model time / timestep") </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="424" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4463" bodyend="4478"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8891806bc553fef5898f9e81751a9899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getIds</definition>
        <argsstring>(int types, std::list&lt; std::string &gt; &amp;ids)</argsstring>
        <name>getIds</name>
        <param>
          <type>int</type>
          <declname>types</declname>
        </param>
        <param>
          <type>std::list&lt; std::string &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>populates a given list with all the ids that this class can accept. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="429" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5004" bodyend="5024"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac713974ee639f493d9d8cdb1577233fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getIndependentFloatingSpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getIndependentFloatingSpeciesIds</name>
        <briefdescription>
<para>Gets the ids for all independent floating species. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM  Independent means (in this case) that the species is unique up to a conserved cycle, i.e. each conserved cycle counts for only one species. See Sauro, Systems Biology: Introduction to Pathway Modeling, 1st ed. pp. 60. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="439" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5026" bodyend="5029"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0b2d1c7cbaa21d37347dbdca33f4d479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getDependentFloatingSpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getDependentFloatingSpeciesIds</name>
        <briefdescription>
<para>Gets the ids for all dependent floating species. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM  See <ref refid="classrr_1_1RoadRunner_1ac713974ee639f493d9d8cdb1577233fe" kindref="member">getIndependentFloatingSpeciesIds</ref> for an explanation of independent vs. dependent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="447" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5031" bodyend="5034"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a13abd6f7d1bf72686f8637c154a73a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getFloatingSpeciesConcentrationIds</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesConcentrationIds</name>
        <briefdescription>
<para>Gets the ids for all floating species concentrations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="453" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5119" bodyend="5128"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a22758ccedea064c87ccc5fd0c533b32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getFloatingSpeciesInitialConcentrationIds</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesInitialConcentrationIds</name>
        <briefdescription>
<para>Gets the ids for all initial floating species concentrations. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classrr_1_1RoadRunner_1ac713974ee639f493d9d8cdb1577233fe" kindref="member">getIndependentFloatingSpeciesIds</ref> for an explanation of independent vs. dependent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="460" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5141" bodyend="5150"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a64fd889ed2292a496bc06739e8fa206e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getSupportedIdTypes</definition>
        <argsstring>()</argsstring>
        <name>getSupportedIdTypes</name>
        <briefdescription>
<para>returns a bit field of the ids that this class supports. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="465" column="13" bodyfile="rrRoadRunner.cpp" bodystart="5036" bodyend="5045"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2aeb31b55a8f049c27910cd00f90c868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setValue</definition>
        <argsstring>(const std::string &amp;id, double value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>sets the value coresponding to the given selection string </para>
        </briefdescription>
        <detaileddescription>
<para>raises an exception in the selection string is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="473" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4441" bodyend="4454"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8ce13b054d539a8d086d03bd7d16b1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getFloatingSpeciesAmountsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesAmountsNamedArray</name>
        <briefdescription>
<para>Returns the floating species amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="483" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2129" bodyend="2149"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab5172224c3a2be50cabb013d343d8234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getFloatingSpeciesConcentrationsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getFloatingSpeciesConcentrationsNamedArray</name>
        <briefdescription>
<para>Returns the floating species concentrations as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="489" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2151" bodyend="2171"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae7644ffca7f25ccf0c8e2289f8a8280e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getBoundarySpeciesAmountsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesAmountsNamedArray</name>
        <briefdescription>
<para>Returns the boundary species amounts as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="495" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3277" bodyend="3297"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa2672c793f21a6ee80da2d6afa3450c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getBoundarySpeciesConcentrationsNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesConcentrationsNamedArray</name>
        <briefdescription>
<para>Returns the boundary species concentrations as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="501" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3254" bodyend="3274"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a129683b1d67a59066a0759983a9be38a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getRatesOfChange</definition>
        <argsstring>()</argsstring>
        <name>getRatesOfChange</name>
        <briefdescription>
<para>Returns the rate of change of the floating species as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="507" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2173" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a11f1ef8cd1d25b7571fe107aa9a6e575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getRatesOfChangeNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getRatesOfChangeNamedArray</name>
        <briefdescription>
<para>Returns the rate of change of the floating species as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="513" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2212" bodyend="2250"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6c974443cc51485d9150c80dc5e730db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getIndependentRatesOfChange</definition>
        <argsstring>()</argsstring>
        <name>getIndependentRatesOfChange</name>
        <briefdescription>
<para>Returns the rate of change of the independent floating species as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="519" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2252" bodyend="2272"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abe1f53e8ec576b4fefbafa958625608e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getIndependentRatesOfChangeNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getIndependentRatesOfChangeNamedArray</name>
        <briefdescription>
<para>Returns the rate of change of the independent floating species as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="525" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2274" bodyend="2296"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8ab4bc9fd188058f67e84ac291d7eacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; rr::RoadRunner::getDependentRatesOfChange</definition>
        <argsstring>()</argsstring>
        <name>getDependentRatesOfChange</name>
        <briefdescription>
<para>Returns the rate of change of the dependent floating species as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="531" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2298" bodyend="2318"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7c865464a0662174b138b6518bfe9781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getDependentRatesOfChangeNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getDependentRatesOfChangeNamedArray</name>
        <briefdescription>
<para>Returns the rate of change of the dependent floating species as a named array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="537" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2320" bodyend="2342"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af51e91db7ddc73786511271278f6c096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getFullJacobian</definition>
        <argsstring>()</argsstring>
        <name>getFullJacobian</name>
        <briefdescription>
<para>compute the full Jacobian at the current operating point </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="542" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2344" bodyend="2533"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a050e99e35e27a60e795825fdeb58c21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getFullReorderedJacobian</definition>
        <argsstring>()</argsstring>
        <name>getFullReorderedJacobian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="544" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2535" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a25871dd31092c9529365fc00c4c59ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getReducedJacobian</definition>
        <argsstring>(double h=-1.0)</argsstring>
        <name>getReducedJacobian</name>
        <param>
          <type>double</type>
          <declname>h</declname>
          <defval>-1.0</defval>
        </param>
        <briefdescription>
<para>Compute the reduced Jacobian at the current operating point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The step sized used for central difference method. If negative, the default value from the config file is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="551" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2545" bodyend="2634"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab341242b18378b234c07e314d84af2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ls::Complex &gt;</type>
        <definition>std::vector&lt; ls::Complex &gt; rr::RoadRunner::getFullEigenValues</definition>
        <argsstring>()</argsstring>
        <name>getFullEigenValues</name>
        <briefdescription>
<para>Returns the eigenvalues of the full jacobian. </para>
        </briefdescription>
        <detaileddescription>
<para>If the eigenvalues are all real, this returns a N x 1 matrix, if complex, returns an N x 2 matrix where the first column is the real values and the second is the imaginary part. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="560" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2102" bodyend="2105"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7efcb153c5d8973d15170548fd69ae66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ls::Complex &gt;</type>
        <definition>std::vector&lt; ls::Complex &gt; rr::RoadRunner::getReducedEigenValues</definition>
        <argsstring>()</argsstring>
        <name>getReducedEigenValues</name>
        <briefdescription>
<para>Returns the eigenvalues of the reduced jacobian. </para>
        </briefdescription>
        <detaileddescription>
<para>If the eigenvalues are all real, this returns a N x 1 matrix, if complex, returns an N x 2 matrix where the first column is the real values and the second is the imaginary part. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="569" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2108" bodyend="2111"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a50ad54566b0da23695d6b4e96221b36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getLinkMatrix</definition>
        <argsstring>()</argsstring>
        <name>getLinkMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="572" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2636" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a764d53843d94cc402479515ebce056ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getNrMatrix</definition>
        <argsstring>()</argsstring>
        <name>getNrMatrix</name>
        <briefdescription>
<para>get the reduced stochiometry matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>If conservation conversion is enabled, this is the matrix that coresponds to the independent species.</para>
<para>A synonym for <ref refid="classrr_1_1RoadRunner_1aa82daa1f13e3384b9c20b18098f5841c" kindref="member">getReducedStoichiometryMatrix()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="580" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2655" bodyend="2667"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a17f97e936006a4892b963892c2fdb424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getKMatrix</definition>
        <argsstring>()</argsstring>
        <name>getKMatrix</name>
        <briefdescription>
<para>Returns the K matrix (right nullspace of Nr) The K matrix has the structure, [I K0]&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="587" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2669" bodyend="2681"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa82daa1f13e3384b9c20b18098f5841c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getReducedStoichiometryMatrix</definition>
        <argsstring>()</argsstring>
        <name>getReducedStoichiometryMatrix</name>
        <briefdescription>
<para>get the reduced stochiometry matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>If conservation conversion is enabled, this is the matrix that coresponds to the independent species.</para>
<para>A synonym for <ref refid="classrr_1_1RoadRunner_1a764d53843d94cc402479515ebce056ac" kindref="member">getNrMatrix()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="595" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2650" bodyend="2653"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4a2448b0c6518a3dd69573dc95523a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getFullStoichiometryMatrix</definition>
        <argsstring>()</argsstring>
        <name>getFullStoichiometryMatrix</name>
        <briefdescription>
<para>Get the stoichiometry matrix that coresponds to the full model, even it it was converted via conservation conversion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="601" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2684" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a274aee5c360566f0937a85cb40041675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getExtendedStoichiometryMatrix</definition>
        <argsstring>()</argsstring>
        <name>getExtendedStoichiometryMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="603" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2710" bodyend="2830"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4a5dc87749458fd1fd2ac471519199a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getL0Matrix</definition>
        <argsstring>()</argsstring>
        <name>getL0Matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="606" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2833" bodyend="2846"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6fa2cd47bfc3c40d74e775029dab6d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getConservationMatrix</definition>
        <argsstring>()</argsstring>
        <name>getConservationMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="609" column="26" bodyfile="rrRoadRunner.cpp" bodystart="2849" bodyend="2886"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1926e6503e60ebcc37ae339b597a25a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getUnscaledConcentrationControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getUnscaledConcentrationControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="610" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3988" bodyend="4037"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1ed7c5519b10fea5a9e19eaab5f1fda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getScaledConcentrationControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getScaledConcentrationControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="611" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4040" bodyend="4064"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae8f9e20c1586d0a95f538d5c1bf301f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getUnscaledFluxControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getUnscaledFluxControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="612" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4068" bodyend="4088"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abe4dde40c03d296f2ed45db095779c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getScaledFluxControlCoefficientMatrix</definition>
        <argsstring>()</argsstring>
        <name>getScaledFluxControlCoefficientMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="613" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4091" bodyend="4129"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab0dde69c8f297c32c1ac8e622ece4781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getEigenValueIds</definition>
        <argsstring>()</argsstring>
        <name>getEigenValueIds</name>
        <briefdescription>
<para>returns the list of floating species, but with a &quot;eigen(...)&quot; string wrapped around them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="620" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5163" bodyend="5170"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac755535bf3a1aedfbe9714bcacccc2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getUnscaledParameterElasticity</definition>
        <argsstring>(const string &amp;reactionName, const string &amp;parameterName)</argsstring>
        <name>getUnscaledParameterElasticity</name>
        <param>
          <type>const string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Returns the unscaled elasticity for a named reaction with respect to a named parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="626" column="16" bodyfile="rrRoadRunner.cpp" bodystart="4854" bodyend="4945"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a90917baf18e5449f3ac093a58f504d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>Matrix&lt; double &gt; rr::RoadRunner::getFrequencyResponse</definition>
        <argsstring>(double startFrequency, int numberOfDecades, int numberOfPoints, const std::string &amp;parameterName, const std::string &amp;variableName, bool useDB, bool useHz)</argsstring>
        <name>getFrequencyResponse</name>
        <param>
          <type>double</type>
          <declname>startFrequency</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numberOfDecades</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numberOfPoints</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>variableName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDB</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useHz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="630" column="26" bodyfile="rrRoadRunner.cpp" bodystart="4727" bodyend="4850"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adbea6710dcab6c825573ce5c9b35dd57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setConservedMoietyAnalysis</definition>
        <argsstring>(bool value)</argsstring>
        <name>setConservedMoietyAnalysis</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This method turns on / off the computation and adherence to conservation laws. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="638" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1473" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af69cf22ce68c8d5c4ab869fedefa16f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::getConservedMoietyAnalysis</definition>
        <argsstring>()</argsstring>
        <name>getConservedMoietyAnalysis</name>
        <briefdescription>
<para>is conservation analysis enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>This is set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="643" column="14" bodyfile="rrRoadRunner.cpp" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1add8f2cfb1a37ad4e352f43a9529a3035" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getDiffStepSize</definition>
        <argsstring>() const</argsstring>
        <name>getDiffStepSize</name>
        <briefdescription>
<para>Set the differential step size used in MCA routines like <ref refid="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" kindref="member">getCC</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="656" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1557" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae5b37837542f842bd6ac6aef11875e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setDiffStepSize</definition>
        <argsstring>(double val)</argsstring>
        <name>setDiffStepSize</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the differential step size used in MCA routines like <ref refid="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" kindref="member">getCC</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="662" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1564" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1acae600eb92e9bd2a7739040e7148c0ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getSteadyStateThreshold</definition>
        <argsstring>() const</argsstring>
        <name>getSteadyStateThreshold</name>
        <briefdescription>
<para>Get the steady state threshold used in getCC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM  In the MCA routines, <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> will keep trying to converge to a steady state until this threshold is met </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="670" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1571" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a64b81cdc2b84a6f28affd212ef474392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateThreshold</definition>
        <argsstring>(double val)</argsstring>
        <name>setSteadyStateThreshold</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the steady state threshold used in getCC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>JKM  In the MCA routines, <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> will keep trying to converge to a steady state until this threshold is met </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="678" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1578" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7df50d5a0fa7265b62af24a2e996b6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getuCC</definition>
        <argsstring>(const std::string &amp;variableName, const std::string &amp;parameterName)</argsstring>
        <name>getuCC</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variableName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get unscaled control coefficient with respect to a global parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>variableName must be either a reaction or floating species.</para>
<para>parameterName must be eithe a global parameter, boundary species, or conserved sum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="688" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3598" bodyend="3708"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getCC</definition>
        <argsstring>(const std::string &amp;variableName, const std::string &amp;parameterName)</argsstring>
        <name>getCC</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variableName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get scaled control coefficient with respect to a global parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>The variableName must be either a reaction id, or a floating species id.</para>
<para>The parameterName must be either a global parameter, boundary species, or conserved sum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="698" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3711" bodyend="3763"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad1a582f68475ad9e923dd23b12397d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getuEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName)</argsstring>
        <name>getuEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get unscaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="703" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6957a9119e32959e4bbd47107a22f8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getuEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName, bool computeSteadystate)</argsstring>
        <name>getuEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>computeSteadystate</declname>
        </param>
        <briefdescription>
<para>Get unscaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally the model is brought to steady state after the computation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="709" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4faad67b12aaf15212f7c57697556d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName)</argsstring>
        <name>getEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <briefdescription>
<para>Get scaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="715" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a54d7fece5e6ac6fcba4d113f62aff1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getEE</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;parameterName, bool computeSteadyState)</argsstring>
        <name>getEE</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameterName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>computeSteadyState</declname>
        </param>
        <briefdescription>
<para>Get scaled elasticity coefficient with respect to a global parameter or species. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally the model is brought to steady state after the computation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="721" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a60d096cd0738a337899ae6c6109c178e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getUnscaledElasticityMatrix</definition>
        <argsstring>()</argsstring>
        <name>getUnscaledElasticityMatrix</name>
        <briefdescription>
<para>Compute the unscaled species elasticity matrix at the current operating point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="727" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3898" bodyend="3918"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a43e88b9c81a97a115451b5331b84e603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getScaledElasticityMatrix</definition>
        <argsstring>()</argsstring>
        <name>getScaledElasticityMatrix</name>
        <briefdescription>
<para>Compute the unscaled elasticity matrix at the current operating point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="732" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3920" bodyend="3953"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6a388eb7c0f64e215490fa606f458770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getScaledFloatingSpeciesElasticity</definition>
        <argsstring>(const std::string &amp;reactionName, const std::string &amp;speciesName)</argsstring>
        <name>getScaledFloatingSpeciesElasticity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reactionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>speciesName</declname>
        </param>
        <briefdescription>
<para>Compute the scaled elasticity for a given reaction and given species. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="737" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3956" bodyend="3983"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5856b94d04fadfb190b407b126382503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getUnscaledSpeciesElasticity</definition>
        <argsstring>(int reactionId, int speciesIndex)</argsstring>
        <name>getUnscaledSpeciesElasticity</name>
        <param>
          <type>int</type>
          <declname>reactionId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>speciesIndex</declname>
        </param>
        <briefdescription>
<para>Get a single species elasticity value IMPORTANT: Assumes that the reaction rates have been precomputed at the operating point !! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="745" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3766" bodyend="3894"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac4b283ab73c62c17ad2b241f9389f868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addSpecies</definition>
        <argsstring>(const std::string &amp;sid, const std::string &amp;compartment, double initAmount=0, bool hasOnlySubstanceUnits=false, bool boundaryCondition=false, const std::string &amp;substanceUnits=&quot;&quot;, bool forceRegenerate=true)</argsstring>
        <name>addSpecies</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compartment</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initAmount</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>hasOnlySubstanceUnits</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>boundaryCondition</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substanceUnits</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a species to the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compartment</parametername>
</parameternamelist>
<parameterdescription>
<para>the compartment of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initAmount</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial amount of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the substance unit of the species to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="760" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5568" bodyend="5611"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2d24e223ee2a7b1c44a7b9d6db0d4b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeSpecies</definition>
        <argsstring>(const std::string &amp;sid, bool forceRegenerate=true)</argsstring>
        <name>removeSpecies</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="774" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5613" bodyend="5697"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3254de1bcafde8fb4aa28e4241fa7c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setBoundary</definition>
        <argsstring>(const std::string &amp;sid, bool boundaryCondition, bool forceRegenerate=true)</argsstring>
        <name>setBoundary</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>boundaryCondition</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the boundary condition of an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, the boundary condition for a species is false. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundaryCondition</parametername>
</parameternamelist>
<parameterdescription>
<para>boundary condition to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="788" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5700" bodyend="5715"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af0c85ad9ef78812bfbf31636683b4ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setHasOnlySubstanceUnits</definition>
        <argsstring>(const std::string &amp;sid, bool hasOnlySubstanceUnits, bool forceRegenerate=true)</argsstring>
        <name>setHasOnlySubstanceUnits</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasOnlySubstanceUnits</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the hasOnlySubstanceUnits attribute for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasOnlySubstanceUnits</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of hasOnlySubstanceUnits attribute to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="801" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5717" bodyend="5732"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8d8050a4d09992b395de75ff50f66b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setInitAmount</definition>
        <argsstring>(const std::string &amp;sid, double initAmount, bool forceRegenerate=true)</argsstring>
        <name>setInitAmount</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initAmount</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set initial amount for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial amount/concentration set before will be unset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initAmount</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial amount to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="815" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5734" bodyend="5760"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a968b5f01bf7fe6a76a860794130d15e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setInitConcentration</definition>
        <argsstring>(const std::string &amp;sid, double initConcentration, bool forceRegenerate=true)</argsstring>
        <name>setInitConcentration</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initConcentration</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set initial concentration for an existing species. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial amount/concentration set before will be unset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initConcentration</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial concentration to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="829" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5762" bodyend="5794"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa4eff2424c186a5ba3a3d35cf91dce2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setConstant</definition>
        <argsstring>(const std::string &amp;sid, bool constant, bool forceRegenerate=true)</argsstring>
        <name>setConstant</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the constant attribute for an existing species/ parameter/ compartment By default, the constant attribute is false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of a species/ parameter/ compartment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constant</parametername>
</parameternamelist>
<parameterdescription>
<para>the constant attribute to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="844" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5796" bodyend="5825"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa2247347171d5d46c270e18bbeaac4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addReaction</definition>
        <argsstring>(const std::string &amp;sbmlRep, bool forceRegenerate=true)</argsstring>
        <name>addReaction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbmlRep</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="858" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5828" bodyend="5838"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa9931b87b88224e2fa86cf298b79647e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addReaction</definition>
        <argsstring>(const std::string &amp;rid, std::vector&lt; string &gt; reactants, std::vector&lt; string &gt; products, const std::string &amp;kineticLaw, bool forceRegenerate=true)</argsstring>
        <name>addReaction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>std::vector&lt; string &gt;</type>
          <declname>reactants</declname>
        </param>
        <param>
          <type>std::vector&lt; string &gt;</type>
          <declname>products</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>kineticLaw</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="878" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0d0a6d74578a9017244bae5a74b253e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeReaction</definition>
        <argsstring>(const std::string &amp;rid, bool deleteUnusedParameters=false, bool forceRegenerate=true)</argsstring>
        <name>removeReaction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deleteUnusedParameters</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove a reaction from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the reaction to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="890" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5920" bodyend="5967"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a61d920026f1d614669007665c3aec5fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setReversible</definition>
        <argsstring>(const std::string &amp;rid, bool reversible, bool forceRegenerate=true)</argsstring>
        <name>setReversible</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reversible</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="903" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6039" bodyend="6055"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7424f3dc7d18d5697e66b0d19700aae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setKineticLaw</definition>
        <argsstring>(const std::string &amp;rid, const std::string &amp;kineticLaw, bool forceRegenerate=true)</argsstring>
        <name>setKineticLaw</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>kineticLaw</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="917" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6058" bodyend="6098"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3e0b8f15b7ab0042dcfd85c14fa207ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::RoadRunner::getKineticLaw</definition>
        <argsstring>(const std::string &amp;rid)</argsstring>
        <name>getKineticLaw</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rid</declname>
        </param>
        <briefdescription>
<para>Get the kinetic law of an existing reaction in the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of reaction to be modified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="923" column="21" bodyfile="rrRoadRunner.cpp" bodystart="6102" bodyend="6131"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a68e98a5de63e4dc8418738290d4c762b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addParameter</definition>
        <argsstring>(const std::string &amp;pid, double value, bool forceRegenerate=true)</argsstring>
        <name>addParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a parameter to the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the parameter to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the parameter to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="937" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6135" bodyend="6153"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa22a0401fda4aa17a3118a833fdde286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeParameter</definition>
        <argsstring>(const std::string &amp;pid, bool forceRegenerate=true)</argsstring>
        <name>removeParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove a parameter from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the parameter to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="949" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6155" bodyend="6167"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7e475483794fc8b59d3b1b423607b2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addCompartment</definition>
        <argsstring>(const std::string &amp;cid, double initVolume, bool forceRegenerate=true)</argsstring>
        <name>addCompartment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initVolume</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a compartment to the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the compartment to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initVolume</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial volume of the compartment to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="964" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6170" bodyend="6186"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad3f2043bc6e645f5319119df37a9eadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeCompartment</definition>
        <argsstring>(const std::string &amp;cid, bool forceRegenerate=true)</argsstring>
        <name>removeCompartment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove a compartment from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the compartment to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="976" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6189" bodyend="6220"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8d7d526b65b7f4da57416eef928edc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addAssignmentRule</definition>
        <argsstring>(const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addAssignmentRule</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="990" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6271" bodyend="6290"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa3a9acbff059e9feb7789b730681c86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addRateRule</definition>
        <argsstring>(const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addRateRule</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1004" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6292" bodyend="6311"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adc65f44da5821758e912bd109fadfa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeRules</definition>
        <argsstring>(const std::string &amp;vid, bool useInitialValue=false, bool forceRegenerate=true)</argsstring>
        <name>removeRules</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useInitialValue</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove rules related to given variable from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of variable that rules assign formula to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useInitialValue</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate whether using initial value as current value when the assignment rule of a variable is removed otherwise, it will keep the value of assignment rule as current value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1020" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6314" bodyend="6416"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa27ba6eab817899a3fe14f4ad65527dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addInitialAssignment</definition>
        <argsstring>(const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addInitialAssignment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1034" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6418" bodyend="6452"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4a47d78c63af139f9cbe5aedab5e7b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeInitialAssignment</definition>
        <argsstring>(const std::string &amp;vid, bool forceRegenerate=true)</argsstring>
        <name>removeInitialAssignment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove initial assignment for a symbol from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the symbol </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1047" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6454" bodyend="6521"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a30b86079c416eb73b6f4da63ef6734af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addEvent</definition>
        <argsstring>(const std::string &amp;eid, bool useValuesFromTriggerTime, const std::string &amp;trigger, bool forceRegenerate=true)</argsstring>
        <name>addEvent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useValuesFromTriggerTime</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1062" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6524" bodyend="6553"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aaaac271c2bcebe239646576d48592f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addTrigger</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;trigger, bool forceRegenerate=true)</argsstring>
        <name>addTrigger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1077" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6556" bodyend="6584"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0c10e1079ae0ae44f0e54b4f9b54c884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setPersistent</definition>
        <argsstring>(const std::string &amp;eid, bool persistent, bool forceRegenerate=true)</argsstring>
        <name>setPersistent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>persistent</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1090" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6586" bodyend="6610"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6731da1be25ebbe4ab0c7cddcbc8e97b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setTriggerInitialValue</definition>
        <argsstring>(const std::string &amp;eid, bool initValue, bool forceRegenerate=true)</argsstring>
        <name>setTriggerInitialValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initValue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1103" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6612" bodyend="6636"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab2cd3d8f9ca1b79014357b5445ee9bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addPriority</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;priority, bool forceRegenerate=true)</argsstring>
        <name>addPriority</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1117" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6639" bodyend="6664"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa65de948a2fbc7287c31b33cf676ced6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addDelay</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;delay, bool forceRegenerate=true)</argsstring>
        <name>addDelay</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delay</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1131" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6667" bodyend="6689"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab1f82e576456f8c7ad94c30f1480a8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::addEventAssignment</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;vid, const std::string &amp;formula, bool forceRegenerate=true)</argsstring>
        <name>addEventAssignment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>formula</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1147" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6692" bodyend="6734"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6f5bbcfeff4758a5e91c15e16c880641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeEventAssignments</definition>
        <argsstring>(const std::string &amp;eid, const std::string &amp;vid, bool forceRegenerate=true)</argsstring>
        <name>removeEventAssignments</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>vid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove event assignments for given variable from an existing event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the vairable of the event assignments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1161" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6737" bodyend="6756"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad5e6fc77db2c058d9d165a37c56ce700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeEvent</definition>
        <argsstring>(const std::string &amp;eid, bool forceRegenerate=true)</argsstring>
        <name>removeEvent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>eid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Remove an event from the current model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the event to be removed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forceRegenerate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean value to indicate if the model is regenerated after this function call default value is true to regenerate model after each call of editing function to save time for editing for multiple times, one could set this flag to true only in the last call of editing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1173" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6760" bodyend="6770"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4e75cb4bdcd03300133aef022f53b34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::validateCurrentSBML</definition>
        <argsstring>()</argsstring>
        <name>validateCurrentSBML</name>
        <briefdescription>
<para>Validate the current SBML. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1178" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6772" bodyend="6782"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a018f17c09b36e42f052989a57fc5b2a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::mcaSteadyState</definition>
        <argsstring>()</argsstring>
        <name>mcaSteadyState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1185" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1236" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6dca346fbb6e59eb73b0a16212df8165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::steadyState</definition>
        <argsstring>(const Dictionary *dict=0)</argsstring>
        <name>steadyState</name>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>dict</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compute the steady state of the model, returns the sum of squares of the solution. </para>
        </briefdescription>
        <detaileddescription>
<para>The steady state solver and whatever options it needs may be specified via the given dictionary. For a list of all available steady state solvers, <simplesect kind="see"><para><ref refid="classrr_1_1SteadyStateSolverFactory" kindref="compound">SteadyStateSolverFactory</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dict</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a dictionary which has the steady state options. May be NULL, in this case the existing options are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1198" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1258" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab5066eec084b15094027ec73861a2811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::steadyStateApproximate</definition>
        <argsstring>(const Dictionary *dict=0)</argsstring>
        <name>steadyStateApproximate</name>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>dict</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Appoximate the steady state of the model by checking the changes in time course simulation. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the sum of squares of the solution</para>
<para>Appoximation will use CVODE with variable step sizes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dict</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a dictionary which has the steady state options. May be NULL, in this case the existing options are used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1209" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1382" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae5600ee783e171506e2dc896d7732f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::steadyStateNamedArray</definition>
        <argsstring>(const Dictionary *dict=0)</argsstring>
        <name>steadyStateNamedArray</name>
        <param>
          <type>const <ref refid="classrr_1_1Dictionary" kindref="compound">Dictionary</ref> *</type>
          <declname>dict</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Like <ref refid="classrr_1_1RoadRunner_1a6dca346fbb6e59eb73b0a16212df8165" kindref="member">steadyState</ref> but returns a named array of the steady state values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1214" column="26" bodyfile="rrRoadRunner.cpp" bodystart="1464" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1adcebd8c406eaaf6ea065828830afd454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
        <definition>vector&lt; SelectionRecord &gt; &amp; rr::RoadRunner::getSteadyStateSelections</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateSelections</name>
        <briefdescription>
<para>returns the current set of steady state selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1219" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2975" bodyend="2978"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a166d905000777fc76767f6625df12bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateSelections</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;steadyStateSelections)</argsstring>
        <name>setSteadyStateSelections</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>steadyStateSelections</declname>
        </param>
        <briefdescription>
<para>parses the given list of strings and generates selections records which will be used for the steady state selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1225" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5113f4906344694a60663dc57531bf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setSteadyStateSelections</definition>
        <argsstring>(const std::vector&lt; rr::SelectionRecord &gt; &amp;steadyStateSelections)</argsstring>
        <name>setSteadyStateSelections</name>
        <param>
          <type>const std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">rr::SelectionRecord</ref> &gt; &amp;</type>
          <declname>steadyStateSelections</declname>
        </param>
        <briefdescription>
<para>makes a copy of an existing list of selection records. </para>
        </briefdescription>
        <detaileddescription>
<para>These will be saved and used for selection values in <ref refid="classrr_1_1RoadRunner_1aeffa5361c54d45cf24ce21b2cb0e2f29" kindref="member">getSteadyStateValues()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1232" column="14" bodyfile="rrRoadRunner.cpp" bodystart="4721" bodyend="4724"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aeffa5361c54d45cf24ce21b2cb0e2f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; rr::RoadRunner::getSteadyStateValues</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateValues</name>
        <briefdescription>
<para>Performs a steady state calculation (evolves the system to a steady state), then calculates and returns the set of values specifed by the steady state selections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1240" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2980" bodyend="2999"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1062bc78d3b41301fa97dc5f2167baa2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getSteadyStateSelectionStrings</definition>
        <argsstring>() const</argsstring>
        <name>getSteadyStateSelectionStrings</name>
        <briefdescription>
<para>Returns a vector of the steady state selection strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1245" column="21" bodyfile="rrRoadRunner.cpp" bodystart="3001" bodyend="3011"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a57d1eee2df9f8b9542a0c450be6097a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::DoubleMatrix</type>
        <definition>DoubleMatrix rr::RoadRunner::getSteadyStateValuesNamedArray</definition>
        <argsstring>()</argsstring>
        <name>getSteadyStateValuesNamedArray</name>
        <briefdescription>
<para>Like <ref refid="classrr_1_1RoadRunner_1aeffa5361c54d45cf24ce21b2cb0e2f29" kindref="member">getSteadyStateValues</ref> but returns a named array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1250" column="26" bodyfile="rrRoadRunner.cpp" bodystart="3013" bodyend="3035"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a98ea6d84450e10e723fbcabddae2e3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::regenerate</definition>
        <argsstring>(bool forceRegenerate=true, bool reset=false)</argsstring>
        <name>regenerate</name>
        <param>
          <type>bool</type>
          <declname>forceRegenerate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Regenerate this <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> instance&apos;s <ref refid="classrr_1_1ExecutableModel" kindref="compound">ExecutableModel</ref> based on the model in its SBMLDocument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1255" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6794" bodyend="6846"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af8d2ff8ebf2c85f918cc2888ac68f479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setBoundarySpeciesByIndex</definition>
        <argsstring>(const int &amp;index, const double &amp;value)</argsstring>
        <name>setBoundarySpeciesByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1267" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3220" bodyend="3235"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0cbcdf248d716058325e50adf9239d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getNumberOfIndependentSpecies</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfIndependentSpecies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1273" column="13" bodyfile="rrRoadRunner.cpp" bodystart="2909" bodyend="2924"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5344345156070f4bab82d9b81b7050de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getGlobalParameterIds</definition>
        <argsstring>()</argsstring>
        <name>getGlobalParameterIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1279" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5069" bodyend="5078"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afb363e6354cc06772219f3f59b591320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getBoundarySpeciesIds</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1285" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5080" bodyend="5089"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5acce894eb75998ed93daf3c71c2d4dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getBoundarySpeciesConcentrationIds</definition>
        <argsstring>()</argsstring>
        <name>getBoundarySpeciesConcentrationIds</name>
        <briefdescription>
<para>Gets the ids for all boundary species concentrations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>KC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1292" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5091" bodyend="5100"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afc7498e1fe7098233c87f4427e74509b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getBoundarySpeciesByIndex</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getBoundarySpeciesByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1298" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3238" bodyend="3251"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a241c4374d564427ef61df52862136574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getGlobalParameterByIndex</definition>
        <argsstring>(const int &amp;index)</argsstring>
        <name>getGlobalParameterByIndex</name>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1304" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3530" bodyend="3563"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1b5525fc1a0ada03bb75f78f77c9bbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setGlobalParameterByName</definition>
        <argsstring>(const std::string &amp;param, double value)</argsstring>
        <name>setGlobalParameterByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the parameter with id </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>ciaran welsh </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1310" column="14" bodyfile="rrRoadRunner.cpp" bodystart="3491" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af376e9fce37cc7b50cea8e8642eafb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getGlobalParameterByName</definition>
        <argsstring>(const std::string &amp;param)</argsstring>
        <name>getGlobalParameterByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>get the </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>ciaran welsh </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>of global parameter with id</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1317" column="16" bodyfile="rrRoadRunner.cpp" bodystart="3509" bodyend="3527"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a5df415a59e1d2ee85d252d3ed1dea700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; rr::RoadRunner::getConservedMoietyValues</definition>
        <argsstring>()</argsstring>
        <name>getConservedMoietyValues</name>
        <briefdescription>
<para>Returns the sum of each conserved cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>MTK, JKM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1329" column="21" bodyfile="rrRoadRunner.cpp" bodystart="1068" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a62d2ea867de2953d33298fe9d133e1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>vector&lt; string &gt; rr::RoadRunner::getConservedMoietyIds</definition>
        <argsstring>()</argsstring>
        <name>getConservedMoietyIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1331" column="21" bodyfile="rrRoadRunner.cpp" bodystart="5102" bodyend="5106"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae505b07023b0c397922690e3cba1c0e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(int getNumberOfReactions())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>int </type>
          <declname>getNumberOfReactions</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1339" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a88e9bd692bbf27f47b7c57dbf4fccd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(double getReactionRate(const int &amp;index))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>double </type>
          <declname>getReactionRate</declname>
          <array>const int &amp;index</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1345" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a86264b868b958f3cbd30002221df37b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(double getRateOfChange(const int &amp;index))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>double </type>
          <declname>getRateOfChange</declname>
          <array>const int &amp;index</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1351" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abe4e6847b1d556f82110facdb240cfc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; std::string &gt; getRateOfChangeIds())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; std::string &gt; </type>
          <declname>getRateOfChangeIds</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1357" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6dbbede3f190b665b27c7d2840c4f8a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(int getNumberOfCompartments())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>int </type>
          <declname>getNumberOfCompartments</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1368" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a75fc853441d03470bee3152b822ede4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setCompartmentByIndex(const int &amp;index, const double &amp;value))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setCompartmentByIndex</declname>
          <array>const int &amp;index, const double &amp;value</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1374" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9cace9c8bf06ef61294b21f4ffefff77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(double getCompartmentByIndex(const int &amp;index))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>double </type>
          <declname>getCompartmentByIndex</declname>
          <array>const int &amp;index</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1380" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8b68daba3117345bcac672db70b6f02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; std::string &gt; getCompartmentIds())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; std::string &gt; </type>
          <declname>getCompartmentIds</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1386" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a36acbf6b92783473a2f6d2b60d4467f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(int getNumberOfBoundarySpecies())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>int </type>
          <declname>getNumberOfBoundarySpecies</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1392" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9802dd9fc181dce30126da143336f2b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getBoundarySpeciesConcentrations())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getBoundarySpeciesConcentrations</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1398" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a267406ac3460bdcb9b816a71cdedf7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setBoundarySpeciesConcentrations(const std::vector&lt; double &gt; &amp;values))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setBoundarySpeciesConcentrations</declname>
          <array>const std::vector&lt; double &gt; &amp;values</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1404" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7144d86ae2eb84553b73e6943e300f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(int getNumberOfFloatingSpecies())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>int </type>
          <declname>getNumberOfFloatingSpecies</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1410" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6f822b89a755e7acdf9d643b34ae3a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(double getFloatingSpeciesByIndex(int index))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>double </type>
          <declname>getFloatingSpeciesByIndex</declname>
          <array>int index</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1416" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afcb185afd00edc72fd27f912cf018c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setFloatingSpeciesByIndex(int index, double value))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setFloatingSpeciesByIndex</declname>
          <array>int index, double value</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1422" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa9a32be46f851e915a92c23dda8c6075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getFloatingSpeciesConcentrationsV())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getFloatingSpeciesConcentrationsV</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1428" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9a25f86724294542212b019c1d8178ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getFloatingSpeciesAmountsV())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getFloatingSpeciesAmountsV</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1434" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ac26e9bcdbb6b51eafaa828b8a7c22dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getBoundarySpeciesConcentrationsV())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getBoundarySpeciesConcentrationsV</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1440" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9d8bad81e1317edf64f7c0c9ad934559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getBoundarySpeciesAmountsV())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getBoundarySpeciesAmountsV</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1446" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8ea25f1280229e12cb125e686a5ee7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getFloatingSpeciesInitialConcentrations())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getFloatingSpeciesInitialConcentrations</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1452" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afced5aec249a0095a9dd52fa3aee0427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setFloatingSpeciesConcentrations(const std::vector&lt; double &gt; &amp;values))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setFloatingSpeciesConcentrations</declname>
          <array>const std::vector&lt; double &gt; &amp;values</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1458" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aeaa763bad88b0f8a1bbbbf0ee916c9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setFloatingSpeciesInitialConcentrationByIndex(const int &amp;index, const double &amp;value))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setFloatingSpeciesInitialConcentrationByIndex</declname>
          <array>const int &amp;index, const double &amp;value</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1464" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1f365a99f1402a27f036d271031ab2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setFloatingSpeciesInitialConcentrations(const std::vector&lt; double &gt; &amp;values))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setFloatingSpeciesInitialConcentrations</declname>
          <array>const std::vector&lt; double &gt; &amp;values</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1471" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aef78bcf6e2f3a35ed0c9310d2cce0444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; std::string &gt; getFloatingSpeciesIds())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; std::string &gt; </type>
          <declname>getFloatingSpeciesIds</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1477" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a345940bcbd10e4dd1652d6531760d88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; std::string &gt; getFloatingSpeciesInitialConditionIds())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; std::string &gt; </type>
          <declname>getFloatingSpeciesInitialConditionIds</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1483" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a496b8467f4c7016889cb30a1ade762eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(size_t getNumberOfGlobalParameters())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>size_t </type>
          <declname>getNumberOfGlobalParameters</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1489" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1abb294ad0072e682120420736512ce03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(void setGlobalParameterByIndex(const int index, const double value))</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>void </type>
          <declname>setGlobalParameterByIndex</declname>
          <array>const int index, const double value</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1495" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aedaac7ddc2307044590f4e8810da6a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getGlobalParameterValues())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getGlobalParameterValues</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1502" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad3f4b6ef217424cb9b12c798dfd1129c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::evalModel</definition>
        <argsstring>()</argsstring>
        <name>evalModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1508" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1702" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aebcbfa2c066cbc09fc3e9acc1776ab20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(int getNumberOfDependentSpecies())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>int </type>
          <declname>getNumberOfDependentSpecies</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1514" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0684bcc378da80c4ec550e6141766d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; double &gt; getReactionRates())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; double &gt; </type>
          <declname>getReactionRates</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1521" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a3eb7c5f79022169b6ef9a83d8f56b44b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rr::RoadRunner::RR_DEPRECATED</definition>
        <argsstring>(std::vector&lt; std::string &gt; getReactionIds())</argsstring>
        <name>RR_DEPRECATED</name>
        <param>
          <type>std::vector&lt; std::string &gt; </type>
          <declname>getReactionIds</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1529" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a03d8db00d714b31251af8427e4bbac55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::setTempDir</definition>
        <argsstring>(const std::string &amp;folder)</argsstring>
        <name>setTempDir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>folder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1539" column="14" bodyfile="rrRoadRunner.cpp" bodystart="744" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a94654f4838ab67a3d167c63e6b592a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getTempDir</definition>
        <argsstring>()</argsstring>
        <name>getTempDir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1548" column="21" bodyfile="rrRoadRunner.cpp" bodystart="749" bodyend="752"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab04e0b440a74f7d49f55751b346f4212" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getParamPromotedSBML</definition>
        <argsstring>(const std::string &amp;sArg)</argsstring>
        <name>getParamPromotedSBML</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sArg</declname>
        </param>
        <briefdescription>
<para>Given an sbml document or path to an sbml document, this method moves all the local parameters to global parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="107" column="28" bodyfile="rrRoadRunner.cpp" bodystart="824" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a862621117012d7e294d7628fed11f82b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRegisteredIntegratorNames</definition>
        <argsstring>()</argsstring>
        <name>getRegisteredIntegratorNames</name>
        <briefdescription>
<para>Return a vector of the names of all registered integrators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="154" column="28" bodyfile="rrRoadRunner.cpp" bodystart="4326" bodyend="4333"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a4064f1dba1c7342c6e81987bfc61d2f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::RoadRunner::getRegisteredSteadyStateSolverNames</definition>
        <argsstring>()</argsstring>
        <name>getRegisteredSteadyStateSolverNames</name>
        <briefdescription>
<para>Return a vector of the names of all registered integrators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="159" column="28" bodyfile="rrRoadRunner.cpp" bodystart="4343" bodyend="4350"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6bc7b431bfe8c1ba10560357ddd72d61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::ensureSolversRegistered</definition>
        <argsstring>()</argsstring>
        <name>ensureSolversRegistered</name>
        <briefdescription>
<para>Ensures all integrators and steady state solvers are registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="164" column="21" bodyfile="rrRoadRunner.cpp" bodystart="4335" bodyend="4341"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afdb1fa322ff0f3d53e33e30558bbe478" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string rr::RoadRunner::getExtendedVersionInfo</definition>
        <argsstring>()</argsstring>
        <name>getExtendedVersionInfo</name>
        <briefdescription>
<para>getVersion plus info about dependent libs versions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="649" column="28" bodyfile="rrRoadRunner.cpp" bodystart="682" bodyend="688"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a869c9a08c8ec66645d9910c08a52d41a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::fixDependentSpeciesValues</definition>
        <argsstring>(int except, double *ref)</argsstring>
        <name>fixDependentSpeciesValues</name>
        <param>
          <type>int</type>
          <declname>except</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1559" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1590" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0c49373f5b4da7d9bd23c278022b6429" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::createDefaultSteadyStateSelectionList</definition>
        <argsstring>()</argsstring>
        <name>createDefaultSteadyStateSelectionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1562" column="16" bodyfile="rrRoadRunner.cpp" bodystart="2954" bodyend="2973"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a51c4d5d1cfd6e8c8177d2bc0d6356cf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::createDefaultTimeCourseSelectionList</definition>
        <argsstring>()</argsstring>
        <name>createDefaultTimeCourseSelectionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1563" column="16" bodyfile="rrRoadRunner.cpp" bodystart="754" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a7be498f9a0d78bd85530b10a1b650125" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSelectedValues</definition>
        <argsstring>(ls::DoubleMatrix &amp;results, int nRow, double currentTime)</argsstring>
        <name>getSelectedValues</name>
        <param>
          <type>ls::DoubleMatrix &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nRow</declname>
        </param>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>copies the current selection values into the n&apos;th row of the given matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1569" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae51454870dda3981349064eeb5469fc5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSelectedValues</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;results, double currentTime)</argsstring>
        <name>getSelectedValues</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>copies the current selection values into the given vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1575" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1054" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aafcbbfa263f8ca43ac0eda623b86a7b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::populateResult</definition>
        <argsstring>()</argsstring>
        <name>populateResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1577" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1217" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a9c11a913c607be2ec0aaee76e81bef07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getNthSelectedOutput</definition>
        <argsstring>(size_t index, double currentTime)</argsstring>
        <name>getNthSelectedOutput</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1580" column="16" bodyfile="rrRoadRunner.cpp" bodystart="1017" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ad7c60d7ae5c8b92b1c4a1490f1d9d929" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::isParameterUsed</definition>
        <argsstring>(const std::string &amp;sid)</argsstring>
        <name>isParameterUsed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1582" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5969" bodyend="6036"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2937cdfb17c33ce04dc3184b066bb942" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getAllVariables</definition>
        <argsstring>(const libsbml::ASTNode *node, std::set&lt; std::string &gt; &amp;ids)</argsstring>
        <name>getAllVariables</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1584" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7081" bodyend="7092"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a0b5a3f0d39365ceef41514fabd1c90d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::RoadRunner::getTimeRowIndex</definition>
        <argsstring>()</argsstring>
        <name>getTimeRowIndex</name>
        <briefdescription>
<para>Get the row index of the time variable in the output array (returns -1 if time is not selected) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1587" column="13" bodyfile="rrRoadRunner.cpp" bodystart="1031" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a1cecf2554210e549f7a379001a57066c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::RoadRunner::getVariableValue</definition>
        <argsstring>(const VariableType variableType, const int variableIndex)</argsstring>
        <name>getVariableValue</name>
        <param>
          <type>const VariableType</type>
          <declname>variableType</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>variableIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1594" column="16" bodyfile="rrRoadRunner.cpp" bodystart="2926" bodyend="2952"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1af7bf954facc34a728c55c151a82b4513" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ls::LibStructural *</type>
        <definition>ls::LibStructural * rr::RoadRunner::getLibStruct</definition>
        <argsstring>()</argsstring>
        <name>getLibStruct</name>
        <briefdescription>
<para>the LibStruct is normally null, only created on demand here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1600" column="27" bodyfile="rrRoadRunner.cpp" bodystart="692" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a6fef677633e62e8c9cc9a124e4aa4968" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::createDefaultSelectionLists</definition>
        <argsstring>()</argsstring>
        <name>createDefaultSelectionLists</name>
        <briefdescription>
<para>If the specified integrator does not exist, create it, and point the integrator pointer to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1608" column="14" bodyfile="rrRoadRunner.cpp" bodystart="1134" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a8f04709a840ba7ea344db95b3db486c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rr::RoadRunner::createTimeCourseSelectionList</definition>
        <argsstring>()</argsstring>
        <name>createTimeCourseSelectionList</name>
        <briefdescription>
<para>creates a selection list from the amounts / conc / variables ivars of the SimulationOptions struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1614" column="16" bodyfile="rrRoadRunner.cpp" bodystart="801" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a2b0b24adeeb8bcababb2301fb2c28364" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &gt;</type>
        <definition>vector&lt; SelectionRecord &gt; rr::RoadRunner::getSelectionList</definition>
        <argsstring>()</argsstring>
        <name>getSelectionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1616" column="21" bodyfile="rrRoadRunner.cpp" bodystart="634" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae32c3f10a636667166a3547b211bb6ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::applySimulateOptions</definition>
        <argsstring>()</argsstring>
        <name>applySimulateOptions</name>
        <briefdescription>
<para>The simulateOptions may be changed at any time. </para>
        </briefdescription>
        <detaileddescription>
<para>This updates the integrators just before they are used with the potentially changed options. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1623" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5187" bodyend="5206"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ab0091e3fd01aa0d2051ab5136832da68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; rr::RoadRunner::getEigenValues</definition>
        <argsstring>(JacobianMode mode)</argsstring>
        <name>getEigenValues</name>
        <param>
          <type>JacobianMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1630" column="21" bodyfile="rrRoadRunner.cpp" bodystart="2113" bodyend="2127"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aa7c8c79214cdf3a420a3c6a05cd01360" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::checkID</definition>
        <argsstring>(const std::string &amp;functionName, const std::string &amp;sid)</argsstring>
        <name>checkID</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>functionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1641" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6785" bodyend="6791"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1aff05d5316f9ad9d17af3799889a24e58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::parseSpecies</definition>
        <argsstring>(const string &amp;species, double *stoichiometry, char **sid)</argsstring>
        <name>parseSpecies</name>
        <param>
          <type>const string &amp;</type>
          <declname>species</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>stoichiometry</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1646" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6848" bodyend="6857"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1ae01a10cac306c4fe96085909c97fa1c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::removeVariable</definition>
        <argsstring>(const string &amp;sid)</argsstring>
        <name>removeVariable</name>
        <param>
          <type>const string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1651" column="14" bodyfile="rrRoadRunner.cpp" bodystart="6859" bodyend="7079"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a652699a2e4a3b5aa5fb78040712ccc78" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::RoadRunner::hasVariable</definition>
        <argsstring>(const libsbml::ASTNode *node, const string &amp;sid)</argsstring>
        <name>hasVariable</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1656" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7094" bodyend="7112"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1acdfc22ee5b4c4b962e60900567c5eeea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSpeciesIdsFromAST</definition>
        <argsstring>(const libsbml::ASTNode *node, std::vector&lt; string &gt; &amp;species)</argsstring>
        <name>getSpeciesIdsFromAST</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; string &gt; &amp;</type>
          <declname>species</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1661" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a07f34a299aa337bd74f6eb24ed8c7503" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::getSpeciesIdsFromAST</definition>
        <argsstring>(const libsbml::ASTNode *node, std::vector&lt; string &gt; &amp;species, std::vector&lt; string &gt; &amp;speciesNames)</argsstring>
        <name>getSpeciesIdsFromAST</name>
        <param>
          <type>const libsbml::ASTNode *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; string &gt; &amp;</type>
          <declname>species</declname>
        </param>
        <param>
          <type>std::vector&lt; string &gt; &amp;</type>
          <declname>speciesNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1662" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a010cf5633324667c3e3d8c83f005fe07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::checkGlobalParameters</definition>
        <argsstring>()</argsstring>
        <name>checkGlobalParameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1667" column="14" bodyfile="rrRoadRunner.cpp" bodystart="7143" bodyend="7171"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1a516972576c9b42e85387307db03f936c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::saveSelectionVector</definition>
        <argsstring>(std::ostream &amp;, std::vector&lt; SelectionRecord &gt; &amp;)</argsstring>
        <name>saveSelectionVector</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1668" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5415" bodyend="5425"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1RoadRunner_1afb806cadbfb14bddc33ef82b2ea7bb43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::RoadRunner::loadSelectionVector</definition>
        <argsstring>(std::istream &amp;, std::vector&lt; SelectionRecord &gt; &amp;)</argsstring>
        <name>loadSelectionVector</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>in</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classrr_1_1SelectionRecord" kindref="compound">SelectionRecord</ref> &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrRoadRunner.h" line="1669" column="14" bodyfile="rrRoadRunner.cpp" bodystart="5552" bodyend="5566"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The main <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> class is responsible for loading and simulating SBML models.</para>
<para>MemoryManagment: Any pointer returned by a get... method is owned by the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> object and does NOT have to be deleted. </para>
    </detaileddescription>
    <location file="rrRoadRunner.h" line="46" column="5" bodyfile="rrRoadRunner.h" bodystart="47" bodyend="1672"/>
    <listofallmembers>
      <member refid="classrr_1_1RoadRunner_1a8d7d526b65b7f4da57416eef928edc6e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addAssignmentRule</name></member>
      <member refid="classrr_1_1RoadRunner_1a7e475483794fc8b59d3b1b423607b2f5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addCompartment</name></member>
      <member refid="classrr_1_1RoadRunner_1aa65de948a2fbc7287c31b33cf676ced6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addDelay</name></member>
      <member refid="classrr_1_1RoadRunner_1a30b86079c416eb73b6f4da63ef6734af" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addEvent</name></member>
      <member refid="classrr_1_1RoadRunner_1ab1f82e576456f8c7ad94c30f1480a8f2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addEventAssignment</name></member>
      <member refid="classrr_1_1RoadRunner_1aa27ba6eab817899a3fe14f4ad65527dc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addInitialAssignment</name></member>
      <member refid="classrr_1_1RoadRunner_1a68e98a5de63e4dc8418738290d4c762b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addParameter</name></member>
      <member refid="classrr_1_1RoadRunner_1ab2cd3d8f9ca1b79014357b5445ee9bbd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addPriority</name></member>
      <member refid="classrr_1_1RoadRunner_1aa3a9acbff059e9feb7789b730681c86d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addRateRule</name></member>
      <member refid="classrr_1_1RoadRunner_1aa2247347171d5d46c270e18bbeaac4b0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addReaction</name></member>
      <member refid="classrr_1_1RoadRunner_1aa9931b87b88224e2fa86cf298b79647e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addReaction</name></member>
      <member refid="classrr_1_1RoadRunner_1ac4b283ab73c62c17ad2b241f9389f868" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1aaaac271c2bcebe239646576d48592f01" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>addTrigger</name></member>
      <member refid="classrr_1_1RoadRunner_1ae32c3f10a636667166a3547b211bb6ac" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>applySimulateOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a57f1463dafcc61a90c3122a8fb37b08d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>changeInitialConditions</name></member>
      <member refid="classrr_1_1RoadRunner_1a010cf5633324667c3e3d8c83f005fe07" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>checkGlobalParameters</name></member>
      <member refid="classrr_1_1RoadRunner_1aa7c8c79214cdf3a420a3c6a05cd01360" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>checkID</name></member>
      <member refid="classrr_1_1RoadRunner_1a6486934df5e346da4209a578f4eaea2b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>clearModel</name></member>
      <member refid="classrr_1_1RoadRunner_1a6fef677633e62e8c9cc9a124e4aa4968" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createDefaultSelectionLists</name></member>
      <member refid="classrr_1_1RoadRunner_1a0c49373f5b4da7d9bd23c278022b6429" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createDefaultSteadyStateSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1a51c4d5d1cfd6e8c8177d2bc0d6356cf4" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createDefaultTimeCourseSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1a422a0c1c50dfe1b6ae343e9313a005ee" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createSelection</name></member>
      <member refid="classrr_1_1RoadRunner_1a8f04709a840ba7ea344db95b3db486c3" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>createTimeCourseSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1aab16c1bf7efe4d1076d3715bd4c1d6e0" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>dataVersionNumber</name></member>
      <member refid="classrr_1_1RoadRunner_1a6bc7b431bfe8c1ba10560357ddd72d61" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>ensureSolversRegistered</name></member>
      <member refid="classrr_1_1RoadRunner_1ad3f4b6ef217424cb9b12c798dfd1129c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>evalModel</name></member>
      <member refid="classrr_1_1RoadRunner_1a09cc39fcf1ae7a5046291a1b47d58d45" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>fileMagicNumber</name></member>
      <member refid="classrr_1_1RoadRunner_1a869c9a08c8ec66645d9910c08a52d41a" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>fixDependentSpeciesValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a2937cdfb17c33ce04dc3184b066bb942" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getAllVariables</name></member>
      <member refid="classrr_1_1RoadRunner_1ae7644ffca7f25ccf0c8e2289f8a8280e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesAmountsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1afc7498e1fe7098233c87f4427e74509b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a5acce894eb75998ed93daf3c71c2d4dc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesConcentrationIds</name></member>
      <member refid="classrr_1_1RoadRunner_1aa2672c793f21a6ee80da2d6afa3450c0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesConcentrationsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1afb363e6354cc06772219f3f59b591320" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getBoundarySpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a3d2c1d4727f38714ce6575a70d789429" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCC</name></member>
      <member refid="classrr_1_1RoadRunner_1a329f2009c2688bbedc906c21c4b8b3ef" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCompiler</name></member>
      <member refid="classrr_1_1RoadRunner_1a6fa2cd47bfc3c40d74e775029dab6d4e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservationMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1af69cf22ce68c8d5c4ab869fedefa16f9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservedMoietyAnalysis</name></member>
      <member refid="classrr_1_1RoadRunner_1a62d2ea867de2953d33298fe9d133e1ae" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservedMoietyIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a5df415a59e1d2ee85d252d3ed1dea700" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getConservedMoietyValues</name></member>
      <member refid="classrr_1_1RoadRunner_1aee591c512811f899a6d41799728173c5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getCurrentSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a0b2d1c7cbaa21d37347dbdca33f4d479" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentFloatingSpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a8ab4bc9fd188058f67e84ac291d7eacd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentRatesOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1a7c865464a0662174b138b6518bfe9781" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDependentRatesOfChangeNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1add8f2cfb1a37ad4e352f43a9529a3035" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getDiffStepSize</name></member>
      <member refid="classrr_1_1RoadRunner_1a4faad67b12aaf15212f7c57697556d61" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEE</name></member>
      <member refid="classrr_1_1RoadRunner_1a54d7fece5e6ac6fcba4d113f62aff1e4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEE</name></member>
      <member refid="classrr_1_1RoadRunner_1ab0dde69c8f297c32c1ac8e622ece4781" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEigenValueIds</name></member>
      <member refid="classrr_1_1RoadRunner_1ab0091e3fd01aa0d2051ab5136832da68" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getEigenValues</name></member>
      <member refid="classrr_1_1RoadRunner_1ad9d66d24ede15b0c28db4093b782cd28" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExistingIntegratorNames</name></member>
      <member refid="classrr_1_1RoadRunner_1a274aee5c360566f0937a85cb40041675" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExtendedStoichiometryMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1afdb1fa322ff0f3d53e33e30558bbe478" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getExtendedVersionInfo</name></member>
      <member refid="classrr_1_1RoadRunner_1a8ce13b054d539a8d086d03bd7d16b1df" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesAmountsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a13abd6f7d1bf72686f8637c154a73a58" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesConcentrationIds</name></member>
      <member refid="classrr_1_1RoadRunner_1ab5172224c3a2be50cabb013d343d8234" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesConcentrationsNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a22758ccedea064c87ccc5fd0c533b32f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFloatingSpeciesInitialConcentrationIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a90917baf18e5449f3ac093a58f504d00" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFrequencyResponse</name></member>
      <member refid="classrr_1_1RoadRunner_1ab341242b18378b234c07e314d84af2e2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullEigenValues</name></member>
      <member refid="classrr_1_1RoadRunner_1af51e91db7ddc73786511271278f6c096" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullJacobian</name></member>
      <member refid="classrr_1_1RoadRunner_1a050e99e35e27a60e795825fdeb58c21d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullReorderedJacobian</name></member>
      <member refid="classrr_1_1RoadRunner_1a4a2448b0c6518a3dd69573dc95523a59" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getFullStoichiometryMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a241c4374d564427ef61df52862136574" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1af376e9fce37cc7b50cea8e8642eafb00" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterByName</name></member>
      <member refid="classrr_1_1RoadRunner_1a5344345156070f4bab82d9b81b7050de" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getGlobalParameterIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a8891806bc553fef5898f9e81751a9899" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIds</name></member>
      <member refid="classrr_1_1RoadRunner_1ac713974ee639f493d9d8cdb1577233fe" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentFloatingSpeciesIds</name></member>
      <member refid="classrr_1_1RoadRunner_1a6c974443cc51485d9150c80dc5e730db" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentRatesOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1abe1f53e8ec576b4fefbafa958625608e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIndependentRatesOfChangeNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a2b7022cadd857fa4fb3cb24703da608a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInfo</name></member>
      <member refid="classrr_1_1RoadRunner_1a4860f41d8552118f3c8c5d5fb6d999f6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInstanceCount</name></member>
      <member refid="classrr_1_1RoadRunner_1a6cc53f3668f94b3d88764e14b24bc87e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getInstanceID</name></member>
      <member refid="classrr_1_1RoadRunner_1ac7ed0222daee67405616805b1bd02125" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIntegrator</name></member>
      <member refid="classrr_1_1RoadRunner_1a8acc349df7a67c32d696bb56952a069e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getIntegratorByName</name></member>
      <member refid="classrr_1_1RoadRunner_1a3e0b8f15b7ab0042dcfd85c14fa207ca" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getKineticLaw</name></member>
      <member refid="classrr_1_1RoadRunner_1a17f97e936006a4892b963892c2fdb424" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getKMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a4a5dc87749458fd1fd2ac471519199a6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getL0Matrix</name></member>
      <member refid="classrr_1_1RoadRunner_1af7bf954facc34a728c55c151a82b4513" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getLibStruct</name></member>
      <member refid="classrr_1_1RoadRunner_1a50ad54566b0da23695d6b4e96221b36a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getLinkMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1afa827d569de3c83dd286ac2aa25d1cf4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getModel</name></member>
      <member refid="classrr_1_1RoadRunner_1a9519f489ada956e35bd0b65e44e96cdd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getModelName</name></member>
      <member refid="classrr_1_1RoadRunner_1a764d53843d94cc402479515ebce056ac" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNrMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a9c11a913c607be2ec0aaee76e81bef07" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNthSelectedOutput</name></member>
      <member refid="classrr_1_1RoadRunner_1a0cbcdf248d716058325e50adf9239d4d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getNumberOfIndependentSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1abca853c2d24000857a1c0971b99ec004" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1ab04e0b440a74f7d49f55751b346f4212" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getParamPromotedSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a129683b1d67a59066a0759983a9be38a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRatesOfChange</name></member>
      <member refid="classrr_1_1RoadRunner_1a11f1ef8cd1d25b7571fe107aa9a6e575" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRatesOfChangeNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a7efcb153c5d8973d15170548fd69ae66" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedEigenValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a25871dd31092c9529365fc00c4c59ef0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedJacobian</name></member>
      <member refid="classrr_1_1RoadRunner_1aa82daa1f13e3384b9c20b18098f5841c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getReducedStoichiometryMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a862621117012d7e294d7628fed11f82b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRegisteredIntegratorNames</name></member>
      <member refid="classrr_1_1RoadRunner_1a4064f1dba1c7342c6e81987bfc61d2f7" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getRegisteredSteadyStateSolverNames</name></member>
      <member refid="classrr_1_1RoadRunner_1ae422b8ad65ca1cabcb7bd88b8c1f7264" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a1ed7c5519b10fea5a9e19eaab5f1fda7" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledConcentrationControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a43e88b9c81a97a115451b5331b84e603" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledElasticityMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a6a388eb7c0f64e215490fa606f458770" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledFloatingSpeciesElasticity</name></member>
      <member refid="classrr_1_1RoadRunner_1abe4dde40c03d296f2ed45db095779c28" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getScaledFluxControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a9c98b4f3d57c4935b744d8cd831d4a61" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectedValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a7be498f9a0d78bd85530b10a1b650125" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectedValues</name></member>
      <member refid="classrr_1_1RoadRunner_1ae51454870dda3981349064eeb5469fc5" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectedValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a2b0b24adeeb8bcababb2301fb2c28364" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelectionList</name></member>
      <member refid="classrr_1_1RoadRunner_1a093f8d8cfe6959e2607eddccfd4a4989" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a1200e15aa2a3c0b8662e26f74f8320ae" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSimulateOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a899aaac624f8b7c6aadee6beeb12bbdb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSimulationData</name></member>
      <member refid="classrr_1_1RoadRunner_1acdfc22ee5b4c4b962e60900567c5eeea" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSpeciesIdsFromAST</name></member>
      <member refid="classrr_1_1RoadRunner_1a07f34a299aa337bd74f6eb24ed8c7503" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSpeciesIdsFromAST</name></member>
      <member refid="classrr_1_1RoadRunner_1adcebd8c406eaaf6ea065828830afd454" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a1062bc78d3b41301fa97dc5f2167baa2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSelectionStrings</name></member>
      <member refid="classrr_1_1RoadRunner_1aaaefc29aa1ff7f6fffdbcaa4425408cd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateSolver</name></member>
      <member refid="classrr_1_1RoadRunner_1acae600eb92e9bd2a7739040e7148c0ae" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateThreshold</name></member>
      <member refid="classrr_1_1RoadRunner_1aeffa5361c54d45cf24ce21b2cb0e2f29" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateValues</name></member>
      <member refid="classrr_1_1RoadRunner_1a57d1eee2df9f8b9542a0c450be6097a4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSteadyStateValuesNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a64fd889ed2292a496bc06739e8fa206e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getSupportedIdTypes</name></member>
      <member refid="classrr_1_1RoadRunner_1a94654f4838ab67a3d167c63e6b592a6d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getTempDir</name></member>
      <member refid="classrr_1_1RoadRunner_1a0b5a3f0d39365ceef41514fabd1c90d5" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getTimeRowIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a7df50d5a0fa7265b62af24a2e996b6e0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getuCC</name></member>
      <member refid="classrr_1_1RoadRunner_1ad1a582f68475ad9e923dd23b12397d86" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getuEE</name></member>
      <member refid="classrr_1_1RoadRunner_1a6957a9119e32959e4bbd47107a22f8a5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getuEE</name></member>
      <member refid="classrr_1_1RoadRunner_1a1926e6503e60ebcc37ae339b597a25a3" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledConcentrationControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1a60d096cd0738a337899ae6c6109c178e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledElasticityMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1ae8f9e20c1586d0a95f538d5c1bf301f2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledFluxControlCoefficientMatrix</name></member>
      <member refid="classrr_1_1RoadRunner_1ac755535bf3a1aedfbe9714bcacccc2e3" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledParameterElasticity</name></member>
      <member refid="classrr_1_1RoadRunner_1a5856b94d04fadfb190b407b126382503" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getUnscaledSpeciesElasticity</name></member>
      <member refid="classrr_1_1RoadRunner_1aa030bd78fd18af9737b6798e246dd4cb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a1ffdbba3a4b35b4092bc743aad78ccdd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a1cecf2554210e549f7a379001a57066c" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>getVariableValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a652699a2e4a3b5aa5fb78040712ccc78" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>hasVariable</name></member>
      <member refid="classrr_1_1RoadRunner_1a0045bee656601921b9f2ef88ab5b0599" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>impl</name></member>
      <member refid="classrr_1_1RoadRunner_1a6255eb24622f4ff07f88585a689a6a7e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>integratorExists</name></member>
      <member refid="classrr_1_1RoadRunner_1a2d4f3df674f8f6500d87a584b4f365cd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>internalOneStep</name></member>
      <member refid="classrr_1_1RoadRunner_1aecea2dbffc17d0322b00e18f126058b5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>isModelLoaded</name></member>
      <member refid="classrr_1_1RoadRunner_1ad7c60d7ae5c8b92b1c4a1490f1d9d929" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>isParameterUsed</name></member>
      <member refid="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386ad752365597bec82910aae067d603df58" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>JACOBIAN_FULL</name></member>
      <member refid="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386a0b8d064264c228c12c32627d3916804f" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>JACOBIAN_REDUCED</name></member>
      <member refid="classrr_1_1RoadRunner_1ac5a7719aaa9fea6e11db2b194f88c386" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>JacobianMode</name></member>
      <member refid="classrr_1_1RoadRunner_1a9d1e7a6e9b2fff7561bd59d2e8475d6e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>load</name></member>
      <member refid="classrr_1_1RoadRunner_1afb806cadbfb14bddc33ef82b2ea7bb43" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>loadSelectionVector</name></member>
      <member refid="classrr_1_1RoadRunner_1a38cbd1331c551f4b62b07a3886efd68a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>loadState</name></member>
      <member refid="classrr_1_1RoadRunner_1a9733b034ce4b31a0de369aeddbd46b5e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>makeIntegrator</name></member>
      <member refid="classrr_1_1RoadRunner_1a018f17c09b36e42f052989a57fc5b2a4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>mcaSteadyState</name></member>
      <member refid="classrr_1_1RoadRunner_1a27aedd28b2a2d5453200ca4a4a2bf4c0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>oneStep</name></member>
      <member refid="classrr_1_1RoadRunner_1aff05d5316f9ad9d17af3799889a24e58" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>parseSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1aafcbbfa263f8ca43ac0eda623b86a7b9" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>populateResult</name></member>
      <member refid="classrr_1_1RoadRunner_1a98ea6d84450e10e723fbcabddae2e3c8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>regenerate</name></member>
      <member refid="classrr_1_1RoadRunner_1ad3f2043bc6e645f5319119df37a9eadb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeCompartment</name></member>
      <member refid="classrr_1_1RoadRunner_1ad5e6fc77db2c058d9d165a37c56ce700" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeEvent</name></member>
      <member refid="classrr_1_1RoadRunner_1a6f5bbcfeff4758a5e91c15e16c880641" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeEventAssignments</name></member>
      <member refid="classrr_1_1RoadRunner_1a4a47d78c63af139f9cbe5aedab5e7b3b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeInitialAssignment</name></member>
      <member refid="classrr_1_1RoadRunner_1aa22a0401fda4aa17a3118a833fdde286" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeParameter</name></member>
      <member refid="classrr_1_1RoadRunner_1a0d0a6d74578a9017244bae5a74b253e9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeReaction</name></member>
      <member refid="classrr_1_1RoadRunner_1adc65f44da5821758e912bd109fadfa1e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeRules</name></member>
      <member refid="classrr_1_1RoadRunner_1a2d24e223ee2a7b1c44a7b9d6db0d4b93" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1ae01a10cac306c4fe96085909c97fa1c8" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>removeVariable</name></member>
      <member refid="classrr_1_1RoadRunner_1ae4b0eaa39fd37737e5f5fd7f7741e06c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>reset</name></member>
      <member refid="classrr_1_1RoadRunner_1a807cbac5ca760b0f3ff033851cf5276b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>reset</name></member>
      <member refid="classrr_1_1RoadRunner_1a5d1d6591131764e8e7a6cdd6a9ae6ae8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>resetSelectionLists</name></member>
      <member refid="classrr_1_1RoadRunner_1a04a6fd481cfacc2510d5d113520143ef" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1ad66240360fee4ccad50097e4b4c8460b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1a3e326546550b3f4533dd7d6b3f2f4250" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1aa6518611d8ac7cd908dbf5704d129020" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RoadRunner</name></member>
      <member refid="classrr_1_1RoadRunner_1ae505b07023b0c397922690e3cba1c0e9" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a88e9bd692bbf27f47b7c57dbf4fccd3b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a86264b868b958f3cbd30002221df37b5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1abe4e6847b1d556f82110facdb240cfc0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a6dbbede3f190b665b27c7d2840c4f8a4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a75fc853441d03470bee3152b822ede4d" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a9cace9c8bf06ef61294b21f4ffefff77" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a8b68daba3117345bcac672db70b6f02a" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a36acbf6b92783473a2f6d2b60d4467f5" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a9802dd9fc181dce30126da143336f2b8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a267406ac3460bdcb9b816a71cdedf7d8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a7144d86ae2eb84553b73e6943e300f03" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a6f822b89a755e7acdf9d643b34ae3a08" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1afcb185afd00edc72fd27f912cf018c5c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1aa9a32be46f851e915a92c23dda8c6075" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a9a25f86724294542212b019c1d8178ab" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1ac26e9bcdbb6b51eafaa828b8a7c22dff" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a9d8bad81e1317edf64f7c0c9ad934559" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a8ea25f1280229e12cb125e686a5ee7f3" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1afced5aec249a0095a9dd52fa3aee0427" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1aeaa763bad88b0f8a1bbbbf0ee916c9cc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a1f365a99f1402a27f036d271031ab2c0" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1aef78bcf6e2f3a35ed0c9310d2cce0444" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a345940bcbd10e4dd1652d6531760d88e" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a496b8467f4c7016889cb30a1ade762eb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1abb294ad0072e682120420736512ce03b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1aedaac7ddc2307044590f4e8810da6a66" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1aebcbfa2c066cbc09fc3e9acc1776ab20" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a0684bcc378da80c4ec550e6141766d6c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a3eb7c5f79022169b6ef9a83d8f56b44b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>RR_DEPRECATED</name></member>
      <member refid="classrr_1_1RoadRunner_1a516972576c9b42e85387307db03f936c" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>saveSelectionVector</name></member>
      <member refid="classrr_1_1RoadRunner_1ac982f0742233d5ad487064734c3b793c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>saveState</name></member>
      <member refid="classrr_1_1RoadRunner_1a3254de1bcafde8fb4aa28e4241fa7c9c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setBoundary</name></member>
      <member refid="classrr_1_1RoadRunner_1af8d2ff8ebf2c85f918cc2888ac68f479" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setBoundarySpeciesByIndex</name></member>
      <member refid="classrr_1_1RoadRunner_1a8372249ea83ce40f91b935b09791a920" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setCompiler</name></member>
      <member refid="classrr_1_1RoadRunner_1adbea6710dcab6c825573ce5c9b35dd57" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setConservedMoietyAnalysis</name></member>
      <member refid="classrr_1_1RoadRunner_1aa4eff2424c186a5ba3a3d35cf91dce2f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setConstant</name></member>
      <member refid="classrr_1_1RoadRunner_1ae5b37837542f842bd6ac6aef11875e97" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setDiffStepSize</name></member>
      <member refid="classrr_1_1RoadRunner_1a1b5525fc1a0ada03bb75f78f77c9bbbc" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setGlobalParameterByName</name></member>
      <member refid="classrr_1_1RoadRunner_1af0c85ad9ef78812bfbf31636683b4ddb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setHasOnlySubstanceUnits</name></member>
      <member refid="classrr_1_1RoadRunner_1a8d8050a4d09992b395de75ff50f66b3f" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setInitAmount</name></member>
      <member refid="classrr_1_1RoadRunner_1a968b5f01bf7fe6a76a860794130d15e8" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setInitConcentration</name></member>
      <member refid="classrr_1_1RoadRunner_1ac3ccb06871cfe662abd775801b25f835" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setIntegrator</name></member>
      <member refid="classrr_1_1RoadRunner_1a7424f3dc7d18d5697e66b0d19700aae4" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setKineticLaw</name></member>
      <member refid="classrr_1_1RoadRunner_1a5e00a39a88bf7d36c165f4ca9fbb3674" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a0c10e1079ae0ae44f0e54b4f9b54c884" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setPersistent</name></member>
      <member refid="classrr_1_1RoadRunner_1a61d920026f1d614669007665c3aec5fb" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setReversible</name></member>
      <member refid="classrr_1_1RoadRunner_1ae2638d52117ad68f9ca1dc7bff285bd6" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a152430ddf10b8270698519bd4d1d0738" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1aca42a09b3b1ce89330d42c48ddae21c2" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSimulateOptions</name></member>
      <member refid="classrr_1_1RoadRunner_1a166d905000777fc76767f6625df12bcd" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1a5113f4906344694a60663dc57531bf30" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateSelections</name></member>
      <member refid="classrr_1_1RoadRunner_1abac44c006635091660819ccbfd5a7cff" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateSolver</name></member>
      <member refid="classrr_1_1RoadRunner_1a64b81cdc2b84a6f28affd212ef474392" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setSteadyStateThreshold</name></member>
      <member refid="classrr_1_1RoadRunner_1a03d8db00d714b31251af8427e4bbac55" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setTempDir</name></member>
      <member refid="classrr_1_1RoadRunner_1a6731da1be25ebbe4ab0c7cddcbc8e97b" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setTriggerInitialValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a2aeb31b55a8f049c27910cd00f90c868" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>setValue</name></member>
      <member refid="classrr_1_1RoadRunner_1a0843eb317d47d28a27929d326d4f1f88" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>simulate</name></member>
      <member refid="classrr_1_1RoadRunner_1a6dca346fbb6e59eb73b0a16212df8165" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyState</name></member>
      <member refid="classrr_1_1RoadRunner_1ab5066eec084b15094027ec73861a2811" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyStateApproximate</name></member>
      <member refid="classrr_1_1RoadRunner_1ae5600ee783e171506e2dc896d7732f40" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyStateNamedArray</name></member>
      <member refid="classrr_1_1RoadRunner_1a6b74d564136611063908de4a45652f67" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>steadyStateSolverExists</name></member>
      <member refid="classrr_1_1RoadRunner_1a4e75cb4bdcd03300133aef022f53b34c" prot="public" virt="non-virtual"><scope>rr::RoadRunner</scope><name>validateCurrentSBML</name></member>
      <member refid="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>VariableType</name></member>
      <member refid="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a08535eb44df113e1d6f85f42726753bd" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>vtFlux</name></member>
      <member refid="classrr_1_1RoadRunner_1a4aa1f5f3293e00f6b2405400414edd18a4ae4e1e200c7a750c23c3a46db0c4296" prot="private" virt="non-virtual"><scope>rr::RoadRunner</scope><name>vtSpecies</name></member>
      <member refid="classrr_1_1RoadRunner_1a102e7c27e29219ae56e48ffd607fd621" prot="public" virt="virtual"><scope>rr::RoadRunner</scope><name>~RoadRunner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
