<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrr_1_1Config" kind="class" language="C++" prot="public">
    <compoundname>rr::Config</compoundname>
    <includes refid="rrConfig_8h" local="no">rrConfig.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" prot="public" static="no" strong="no">
        <type></type>
        <name>Keys</name>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a008f3c1e8cf4803a4e028a109c5baa62" prot="public">
          <name>LOADSBMLOPTIONS_CONSERVED_MOIETIES</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>perform conservation analysis. </para>
          </briefdescription>
          <detaileddescription>
<para>This causes a re-ordering of the species, so results generated with this flag enabled can not be compared index wise to results generated otherwise.</para>
<para>currently only implemented with the C code generating model </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aff2d0d4e16f9d40d8998a2387d45964a" prot="public">
          <name>LOADSBMLOPTIONS_RECOMPILE</name>
          <briefdescription>
<para>Should the model be recompiled? The LLVM ModelGenerator maintins a hash table of currently running models. </para>
          </briefdescription>
          <detaileddescription>
<para>If this flag is NOT set, then the generator will look to see if there is already a running instance of the given model and use the generated code from that one.</para>
<para>If only a single instance of a model is run, there is no need to cache the models, and this can safetly be enabled, realizing some performance gains. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a4fbe11de557045ebc0cd573f15064aae" prot="public">
          <name>LOADSBMLOPTIONS_READ_ONLY</name>
          <briefdescription>
<para>If this is set, then a read-only model is generated. </para>
          </briefdescription>
          <detaileddescription>
<para>A read-only model can be simulated, but no code is generated to set model values, i.e. parameters, amounts, values, etc...</para>
<para>It takes a finite amount of time to generate the model value setting functions, and if they are not needed, one may see some performance gains, especially in very large models. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a949debdf732c321298b9002083532a6e" prot="public">
          <name>LOADSBMLOPTIONS_MUTABLE_INITIAL_CONDITIONS</name>
          <briefdescription>
<para>Generate accessor functions to allow changing of initial conditions. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a413677ed7cc8b08008c9e2d5e453490d" prot="public">
          <name>LOADSBMLOPTIONS_OPTIMIZE_GVN</name>
          <briefdescription>
<para>GVN - This pass performs global value numbering and redundant load elimination cotemporaneously. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a7a2a7f8bfeeb111d7210b54a62a00791" prot="public">
          <name>LOADSBMLOPTIONS_OPTIMIZE_CFG_SIMPLIFICATION</name>
          <briefdescription>
<para>CFGSimplification - Merge basic blocks, eliminate unreachable blocks, simplify terminator instructions, etc... </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a1e2ad37c11aae10f88ed1d1b2aa27266" prot="public">
          <name>LOADSBMLOPTIONS_OPTIMIZE_INSTRUCTION_COMBINING</name>
          <briefdescription>
<para>InstructionCombining - Combine instructions to form fewer, simple instructions. </para>
          </briefdescription>
          <detaileddescription>
<para>This pass does not modify the CFG, and has a tendency to make instructions dead, so a subsequent DCE pass is useful. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a43e324984558dd0f7074ea895b6b53c5" prot="public">
          <name>LOADSBMLOPTIONS_OPTIMIZE_DEAD_INST_ELIMINATION</name>
          <briefdescription>
<para>DeadInstElimination - This pass quickly removes trivially dead instructions without modifying the CFG of the function. </para>
          </briefdescription>
          <detaileddescription>
<para>It is a BasicBlockPass, so it runs efficiently when queued next to other BasicBlockPass&apos;s. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a575c208952a322880e85c5bdad991bbd" prot="public">
          <name>LOADSBMLOPTIONS_OPTIMIZE_DEAD_CODE_ELIMINATION</name>
          <briefdescription>
<para>DeadCodeElimination - This pass is more powerful than DeadInstElimination, because it is worklist driven that can potentially revisit instructions when their other instructions become dead, to eliminate chains of dead computations. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053adcb86a4f8afac5df2bc241d336fd1862" prot="public">
          <name>LOADSBMLOPTIONS_OPTIMIZE_INSTRUCTION_SIMPLIFIER</name>
          <briefdescription>
<para>InstructionSimplifier - Remove redundant instructions. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053afdd1febe10f963a5260a5baead2c94f9" prot="public">
          <name>LOADSBMLOPTIONS_USE_MCJIT</name>
          <briefdescription>
<para>Use the LLVM MCJIT JIT engine. </para>
          </briefdescription>
          <detaileddescription>
<para>Defaults to false.</para>
<para>The MCJIT is the new LLVM JIT engine, it is not as well tested as the original JIT engine. Does NOT work on LLVM 3.1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae5bc2b4a1d1183c5a941d65368f81ff5" prot="public">
          <name>SIMULATEOPTIONS_STEPS</name>
          <briefdescription>
<para>The number of steps at which the output is sampled. </para>
          </briefdescription>
          <detaileddescription>
<para>The samples are evenly spaced. When a simulation system calculates the data points to record, it will typically divide the duration by the number of time steps. Thus, for X steps, the output will have X+1 data rows. see <ref refid="classrr_1_1SimulateOptions_1a20008b16d84ef52a564648671d0c544b" kindref="member">SimulateOptions::steps</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aac781f4e67d50493b57896166839aabf" prot="public">
          <name>SIMULATEOPTIONS_DURATION</name>
          <briefdescription>
<para>see <ref refid="classrr_1_1SimulateOptions_1a6917a73a48307d38643923182b28b0c4" kindref="member">SimulateOptions::duration</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a7c765d39c39d0550c170fce10099664f" prot="public">
          <name>SIMULATEOPTIONS_ABSOLUTE</name>
          <briefdescription>
<para>see SimulateOptions::absolute </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a048be3a9dac65ffeb9a85e89abd26229" prot="public">
          <name>SIMULATEOPTIONS_RELATIVE</name>
          <briefdescription>
<para>see SimulateOptions::relative </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a38f882c1ea3fc2c5844d1c80bfdbbbd4" prot="public">
          <name>SIMULATEOPTIONS_STRUCTURED_RESULT</name>
          <briefdescription>
<para>see SimulateOptions::STRUCTURED_RESULT </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a27968dd97e68c82d7773b4ac5b695823" prot="public">
          <name>SIMULATEOPTIONS_STIFF</name>
          <briefdescription>
<para>Is the model a stiff system? setting this to stiff causes <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> to load a stiff solver which could potentially be extremly slow see SimulateOptions::STIFF. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a65faed9584635abaaf631baa90ff342f" prot="public">
          <name>SIMULATEOPTIONS_MULTI_STEP</name>
          <briefdescription>
<para>The MULTI_STEP option tells the solver to take a series of internal steps and then return the solution at the point reached by that step. </para>
          </briefdescription>
          <detaileddescription>
<para>In simulate, this option will likely be slower than normal mode, but may be useful to monitor solutions as they are integrated.</para>
<para>This is intended to be used in combination with the <ref refid="classrr_1_1IntegratorListener" kindref="compound">IntegratorListener</ref>. It this option is set, and there is a <ref refid="classrr_1_1IntegratorListener" kindref="compound">IntegratorListener</ref> set, RoadRunner::integrate will run the integrator in a series of internal steps, and the listner will by notified at each step.</para>
<para>Highly Experimental!!! see SimulateOptions::MULTI_STEP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a68f2e9ea81eb79e0d138a3834ab2b33b" prot="public">
          <name>SIMULATEOPTIONS_DETERMINISTIC_VARIABLE_STEP</name>
          <briefdescription>
<para>Do variable time step integration when using a deterministic integrator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a50309d6c373f32953b6956760f800e23" prot="public">
          <name>SIMULATEOPTIONS_STOCHASTIC_VARIABLE_STEP</name>
          <briefdescription>
<para>Do variable time step integration when using stochastic integrators. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053af04f063962a4036311b2e11f07519c7c" prot="public">
          <name>SIMULATEOPTIONS_INTEGRATOR</name>
          <briefdescription>
<para>Default integrator to use, currently supports a std::string of &quot;CVODE&quot; or &quot;Gillespie&quot;, default is &quot;CVODE&quot;. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0d32622a3edeabd8cb3b36a310a073e7" prot="public">
          <name>SIMULATEOPTIONS_INITIAL_TIMESTEP</name>
          <briefdescription>
<para>A user specified initial time step. </para>
          </briefdescription>
          <detaileddescription>
<para>If this is &lt;= 0, the integrator will attempt to determine a safe initial time stpe.</para>
<para>Note, for each number of steps given to <ref refid="classrr_1_1RoadRunner_1a5a079f580436e4bd0fccdc54a597d003" kindref="member">RoadRunner::simulate</ref> or <ref refid="classrr_1_1RoadRunner_1a27aedd28b2a2d5453200ca4a4a2bf4c0" kindref="member">RoadRunner::oneStep</ref>, the internal integrator may take many many steps to reach one of the external time steps. This value specifies an initial value for the internal integrator time step. see SimulateOptions::initialTimeStep </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aa4e33c84e600b5f29620af10fa601425" prot="public">
          <name>SIMULATEOPTIONS_MINIMUM_TIMESTEP</name>
          <briefdescription>
<para>Specfify The Minimum Time Step That The Internal <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> Will Use. </para>
          </briefdescription>
          <detaileddescription>
<para>Uses <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> Estimated Value If &lt;= 0. see SimulateOptions::minumumTimeStep </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a571e2ca6736089faed9659cc2301968d" prot="public">
          <name>SIMULATEOPTIONS_MAXIMUM_TIMESTEP</name>
          <briefdescription>
<para>Specify The Maximum Time Step Size That The Internaal <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> Will Use. </para>
          </briefdescription>
          <detaileddescription>
<para>Uses <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> Estimated Value If &lt;= 0. see SimulateOptions::maximumTimeStep </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a195516f962434b4aeb314ae39d2a2814" prot="public">
          <name>SIMULATEOPTIONS_MAXIMUM_NUM_STEPS</name>
          <briefdescription>
<para>Specify The Maximum Number Of Steps The Internal <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> Will Use Before Reaching The User Specified Time Span. </para>
          </briefdescription>
          <detaileddescription>
<para>Uses The <ref refid="classrr_1_1Integrator" kindref="compound">Integrator</ref> Default Value If &lt;= 0. see SimulateOptions::maximumNumSteps </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a2ac32a86236319b70d5078dddd44f23b" prot="public">
          <name>ROADRUNNER_DISABLE_WARNINGS</name>
          <briefdescription>
<para>Disable SBML conserved moiety warnings. </para>
          </briefdescription>
          <detaileddescription>
<para>this disables warnings based on the following bitfields:</para>
<para>ROADRUNNER_DISABLE_WARNINGS_STEADYSTATE: disable the warning in <ref refid="classrr_1_1RoadRunner_1af310e01ec241bc2b19a46629087024d0" kindref="member">RoadRunner::steadyState</ref> about possible singular jacobian.</para>
<para>ROADRUNNER_DISABLE_WARNINGS_CONSERVED_MOIETY: disable the conserved moieties warning if enabled when loading a sbml document. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae4eee9ff55c8ff33111fd63dd4427d18" prot="public">
          <name>ROADRUNNER_DISABLE_PYTHON_DYNAMIC_PROPERTIES</name>
          <briefdescription>
<para><ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> by default dynamically generates accessor properties for all sbml symbol names on the model object when it is retrieved in Python. </para>
          </briefdescription>
          <detaileddescription>
<para>This feature is very nice for interactive use, but can slow things down. If this feature is not needed, it can be disabled here. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a043cd743124d745fe19797e0992d4078" prot="public">
          <name>SBML_APPLICABLEVALIDATORS</name>
          <briefdescription>
<para>a hex value consisting of a combination of the following values: </para>
          </briefdescription>
          <detaileddescription>
<para>IdCheckON 0x01 IdCheckOFF 0xfe SBMLCheckON 0x02 SBMLCheckOFF 0xfd SBOCheckON 0x04 SBOCheckOFF 0xfb MathCheckON 0x08 MathCheckOFF 0xf7 UnitsCheckON 0x10 UnitsCheckOFF 0xef OverdeterCheckON 0x20 OverdeterCheckOFF 0xdf PracticeCheckON 0x40 PracticeCheckOFF 0xbf AllChecksON 0x7f</para>
<para>The default value is AllChecksON &amp; UnitsCheckOFF </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae778bfdbfb15c7391f52a3363c01c41c" prot="public">
          <name>ROADRUNNER_JACOBIAN_STEP_SIZE</name>
          <briefdescription>
<para>default step size for Jabobian finite differece calculations </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aae6c195ec9c3e6568341c4f226fe391f" prot="public">
          <name>MODEL_RESET</name>
          <briefdescription>
<para>A bitfield (unsigned integer) consisting of the values in <ref refid="classrr_1_1SelectionRecord_1a898963ab24a6ba614913715c981d8394" kindref="member">SelectionRecord::SelectionType</ref>. </para>
          </briefdescription>
          <detaileddescription>
<para>This value determines which values of the model are reset to their origin SBML specified values.</para>
<para>Current valid values can be a combination of:</para>
<para>SelectionRecord::SelectionType::TIME, SelectionRecord::SelectionType::RATE, SelectionRecord::SelectionType::BOUNDARY, SelectionRecord::SelectionType::FLOATING, SelectionRecord::SelectionType::GLOBAL_PARAMETER, SelectionRecord::SelectionType::CONSREVED_MOIETY, SelectionRecord::SelectionType::COMPARTMENT, SelectionRecord::SelectionType::ALL.</para>
<para>Note, if RATE is specified, this will cause all global parameters defined by rate rules to be reset, even if GLOBAL_PARAMETER is NOT specified.</para>
<para>The default value is TIME | RATE | FLOATING </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0c3075c04786354a026c56410edb47be" prot="public">
          <name>CVODE_MIN_ABSOLUTE</name>
          <briefdescription>
<para>The minumum absolute error that the CVODE integrator supports in order to to pass the sbml test suite using the default integtator. </para>
          </briefdescription>
          <detaileddescription>
<para>If a test suite config file is loaded, and the relative error is higher than CVODE_MIN_ABSOLUTE, it should be lowered to CVODE_MIN_ABSOLUTE. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a4fba6c43b4d137bab9f42ee9c4cb1e6b" prot="public">
          <name>CVODE_MIN_RELATIVE</name>
          <briefdescription>
<para>The minumum relative error that the CVODE integrator supports in order to to pass the sbml test suite using the default integtator. </para>
          </briefdescription>
          <detaileddescription>
<para>If a test suite config file is loaded, and the relative error is higher than CVODE_MIN_RELATIVE, it should be lowered to CVODE_MIN_RELATIVE. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a2380bee401835d67027fcf0b6fca3c20" prot="public">
          <name>SIMULATEOPTIONS_COPY_RESULT</name>
          <briefdescription>
<para>make a copy of the simulation result in Python. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a4686986010864b67984769a014f60676" prot="public">
          <name>STEADYSTATE_PRESIMULATION</name>
          <briefdescription>
<para>Flag for starting steady state analysis with simulation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae1c4eb4d8956fd74282f7244b699b22d" prot="public">
          <name>STEADYSTATE_PRESIMULATION_MAX_STEPS</name>
          <briefdescription>
<para>Maximum number of steps that can be taken for presimulation before steady state analysis. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a211de9124bd3db79a3752c58f14f7b51" prot="public">
          <name>STEADYSTATE_PRESIMULATION_TIME</name>
          <briefdescription>
<para>End time for presimulation steady state analysis. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053adf2850a7abf4024849642d512f2d175e" prot="public">
          <name>STEADYSTATE_APPROX</name>
          <briefdescription>
<para>Flag for using steady state approximation routine when steady state solver fails. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0f93ab971ed7c5d9dfdd092e96244052" prot="public">
          <name>STEADYSTATE_APPROX_TOL</name>
          <briefdescription>
<para>Tolerance for steady state approximation routine. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a918423c8152c2de247f32b9634e63a27" prot="public">
          <name>STEADYSTATE_APPROX_MAX_STEPS</name>
          <briefdescription>
<para>Maximum number of steps that can be taken for steady state approximation routine. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a9e7868b91c7f6f94da14d1b8797b7829" prot="public">
          <name>STEADYSTATE_APPROX_TIME</name>
          <briefdescription>
<para>End time for steady state approximation routine. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ab00d49173c79792fd08c3fb5731f018d" prot="public">
          <name>STEADYSTATE_RELATIVE</name>
          <briefdescription>
<para>Specifies the relative tolerance. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a2d28b310561d790f8814ae1ae871bb64" prot="public">
          <name>STEADYSTATE_MAXIMUM_NUM_STEPS</name>
          <briefdescription>
<para>Maximum number of steps for steady state solvers. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae91fd0851ea18a519556f71376c57164" prot="public">
          <name>STEADYSTATE_MINIMUM_DAMPING</name>
          <briefdescription>
<para>Minimum damping factor for steady state solvers. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a568a6ea36735903f07f255e965205b50" prot="public">
          <name>STEADYSTATE_BROYDEN</name>
          <briefdescription>
<para>Switches on Broyden method. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ad2d3f863115b60f11279d413b4bc2baa" prot="public">
          <name>STEADYSTATE_LINEARITY</name>
          <briefdescription>
<para>Specifies linearity of the problem. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a3d5469371f6dc9aa2402d5e075b64f92" prot="public">
          <name>ROADRUNNER_JACOBIAN_MODE</name>
          <briefdescription>
<para>Determines the mode that the <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> Jacobian calculations will be be performed in. </para>
          </briefdescription>
          <detaileddescription>
<para>The Jacobian can be calculated either with respect to amounts or concentrations. Default is concentrations.</para>
<para>This can be either ROADRUNNER_JACOBIAN_MODE_AMOUNTS or ROADRUNNER_JACOBIAN_MODE_CONCENTRATIONS. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aeed2c355140f97162b0a894e6c3c7710" prot="public">
          <name>TEMP_DIR_PATH</name>
          <briefdescription>
<para>Directory path where roadrunner should store temp files. </para>
          </briefdescription>
          <detaileddescription>
<para>If empty, the system specified temp dir is used. Paths may have enviormnent variables, i.e. ${HOME}/tmp</para>
<para>May have environment variables contained in the path. On Unix, a tilde as first character in the path is replaced with the path to user&apos;s home directory. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aebebe893536932bb96d066c77d56ea1f" prot="public">
          <name>LOGGER_LOG_FILE_PATH</name>
          <briefdescription>
<para>Path to where the logger should write a roadrunner log file. </para>
          </briefdescription>
          <detaileddescription>
<para>If no path is specified, the log file will be written as a &quot;roadrunner.log&quot; in the temp dir.</para>
<para>May have environment variables contained in the path. On Unix, a tilde as first character in the path is replaced with the path to user&apos;s home directory. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0777390cc6ead1e5864aa0e319fc4159" prot="public">
          <name>RANDOM_SEED</name>
          <briefdescription>
<para>Seed for random numbers, should be a integer. </para>
          </briefdescription>
          <detaileddescription>
<para>If this value is negative, then the system time is used for the random seed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a249947900871dcfadcd924323f12d70e" prot="public">
          <name>PYTHON_ENABLE_NAMED_MATRIX</name>
          <briefdescription>
<para>use new numpy arrays with row/column names experimental </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0f7d62516a750c56eddc353e14c5e421" prot="public">
          <name>LLVM_SYMBOL_CACHE</name>
          <briefdescription>
<para>cache llvm symbols durring sbml compilation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a5c55905b3039d205c2675cd8a5a3682c" prot="public">
          <name>OPTIMIZE_REACTION_RATE_SELECTION</name>
          <briefdescription>
<para>optimize reaction rate selection durring integration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a44487cb13e7c8fc0c850a064c88b22da" prot="public">
          <name>LOADSBMLOPTIONS_PERMISSIVE</name>
          <briefdescription>
<para>Relax SBML resrictions. </para>
          </briefdescription>
          <detaileddescription>
<para>Allows some idiosyncrasies of e.g. JDesigner that libSBML does not officially support. See: <ulink url="https://groups.google.com/forum/#!topic/sbml-discuss/u3NK14RUHvE">https://groups.google.com/forum/#!topic/sbml-discuss/u3NK14RUHvE</ulink></para>
<para>Specifics: allows use time in user-defined functions, allows use of booleans in scalars </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a132d11f5ad8d479acc917f91916a2060" prot="public">
          <name>MAX_OUTPUT_ROWS</name>
          <briefdescription>
<para>Set the maximum number of rows in the output matrix. </para>
          </briefdescription>
          <detaileddescription>
<para>When simulate is called with variable stepping and tight tolerances the resulting output matrix will be very large. This setting cuts off the computation after a certain number of rows are reached. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae344943000e085c6891d49ccd8286fa4" prot="public">
          <name>ALLOW_EVENTS_IN_STEADY_STATE_CALCULATIONS</name>
          <briefdescription>
<para>Enable or disable steady state calculations when a model contains events. </para>
          </briefdescription>
          <detaileddescription>
<para>If true, steady state calculations will be carried out irrespective of whether events are present or not.</para>
<para>If false, steady state calculations will not be carried out in the presence of events. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a5545245bf87ab5231571a43a2ae6260d" prot="public">
          <name>VALIDATION_IN_REGENERATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ada4ec1b0d4d8d54e580eddccc1f33efb" prot="public">
          <name>K_ROWS_PER_WRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae173224855af72a1643cb740c724f377" prot="public">
          <name>CONFIG_END</name>
          <briefdescription>
<para>Needs to be the last item in the enum, no mater how many other items are added, this is used internally to create a static array. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="67" column="5" bodyfile="rrConfig.h" bodystart="67" bodyend="543"/>
      </memberdef>
      <memberdef kind="enum" id="classrr_1_1Config_1a0e5ea8f108b8737a8d202e5fb4cb71ae" prot="public" static="no" strong="no">
        <type></type>
        <name>ROADRUNNER_DISABLE_WARNINGS_VALUES</name>
        <enumvalue id="classrr_1_1Config_1a0e5ea8f108b8737a8d202e5fb4cb71aead0c00bc63505c9f9497e634e1383c7fd" prot="public">
          <name>ROADRUNNER_DISABLE_WARNINGS_STEADYSTATE</name>
          <initializer>=  (0x1 &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1a0e5ea8f108b8737a8d202e5fb4cb71aead09bff7058b7510c61e92573f9c7c799" prot="public">
          <name>ROADRUNNER_DISABLE_WARNINGS_CONSERVED_MOIETY</name>
          <initializer>=  (0x1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="545" column="5" bodyfile="rrConfig.h" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="enum" id="classrr_1_1Config_1a4809c71e5ad3b128af6dbb0a4093c938" prot="public" static="no" strong="no">
        <type></type>
        <name>ROADRUNNER_JACOBIAN_MODE_VALUES</name>
        <enumvalue id="classrr_1_1Config_1a4809c71e5ad3b128af6dbb0a4093c938ade157842f89bea5f519dab49470b1b69" prot="public">
          <name>ROADRUNNER_JACOBIAN_MODE_AMOUNTS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classrr_1_1Config_1a4809c71e5ad3b128af6dbb0a4093c938a6c47b9be8ff264e00c8a397e73ce7d97" prot="public">
          <name>ROADRUNNER_JACOBIAN_MODE_CONCENTRATIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="552" column="5" bodyfile="rrConfig.h" bodystart="553" bodyend="556"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrr_1_1Config_1a0370467d1593491eac5e443ce0c03224" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::Config::getString</definition>
        <argsstring>(Keys)</argsstring>
        <name>getString</name>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
          <defname>key</defname>
        </param>
        <briefdescription>
<para>read the config value as a std::string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="561" column="24" bodyfile="rrConfig.cpp" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1a66454fca7b7357d5b3180d8589bacebf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rr::Config::getInt</definition>
        <argsstring>(Keys)</argsstring>
        <name>getInt</name>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
          <defname>key</defname>
        </param>
        <briefdescription>
<para>read the config value as an integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="566" column="16" bodyfile="rrConfig.cpp" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1afab929414e069aada94a305c3ca425ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Config::getBool</definition>
        <argsstring>(Keys)</argsstring>
        <name>getBool</name>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
          <defname>key</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="568" column="17" bodyfile="rrConfig.cpp" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1a6cf432148717f8bbadc861481340f3bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rr::Config::getDouble</definition>
        <argsstring>(Keys)</argsstring>
        <name>getDouble</name>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
          <defname>key</defname>
        </param>
        <briefdescription>
<para>read the config value as a double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="573" column="19" bodyfile="rrConfig.cpp" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1a4ee7359b58047946520f3f3a9c6de04c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rr::Config::getConfigFilePath</definition>
        <argsstring>()</argsstring>
        <name>getConfigFilePath</name>
        <briefdescription>
<para>If a config file was found in one of the above locations, its full path is returned here. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, if no file was found, an empty std::string is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="579" column="24" bodyfile="rrConfig.cpp" bodystart="303" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1af31cc9c1ef79cd00c6099930bd2aae9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Config::setValue</definition>
        <argsstring>(Keys, Setting value)</argsstring>
        <name>setValue</name>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
          <defname>key</defname>
        </param>
        <param>
          <type><ref refid="classrr_1_1Setting" kindref="compound">Setting</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the value of a config key. </para>
        </briefdescription>
        <detaileddescription>
<para>note, this value is only used in any new objects created after it has been set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="586" column="17" bodyfile="rrConfig.cpp" bodystart="364" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1a1acfbc8a6af061e54e4c6b2890ce4a88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Setting" kindref="compound">Setting</ref></type>
        <definition>Setting rr::Config::getValue</definition>
        <argsstring>(Keys)</argsstring>
        <name>getValue</name>
        <param>
          <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
          <defname>key</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="590" column="20" bodyfile="rrConfig.cpp" bodystart="418" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1ab5bc77a68b26edb749fb2a14336f4fd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Config::readConfigFile</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>readConfigFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Read all of the values stored in a configuration file and set all the keys to these values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="596" column="17" bodyfile="rrConfig.cpp" bodystart="380" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1aacae3161033c6c178aac93f7467afa3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Config::writeConfigFile</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>writeConfigFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>write the currently set configuration values to a config file. </para>
        </briefdescription>
        <detaileddescription>
<para>The contents of the file are cleared and the new values written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="602" column="17" bodyfile="rrConfig.cpp" bodystart="430" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1a947d20afae74fba1c1725c8fb2c71eba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" kindref="member">Keys</ref></type>
        <definition>Config::Keys rr::Config::stringToKey</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>stringToKey</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="604" column="17" bodyfile="rrConfig.cpp" bodystart="449" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Config_1a20e11f7bdb81efbd1e84011801b4a526" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; rr::Config::getKeyList</definition>
        <argsstring>()</argsstring>
        <name>getKeyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rrConfig.h" line="606" column="24" bodyfile="rrConfig.cpp" bodystart="267" bodyend="283"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>read or store default values. </para>
    </briefdescription>
    <detaileddescription>
<para>Many of <ref refid="classrr_1_1RoadRunner" kindref="compound">RoadRunner</ref> classes use a number of configuration parameters. Most of these can be set using the <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class. The values stored in the <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class only determine the default values of parameters.</para>
<para>The <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class will look in the following locations for the config file, and will load the values from the first config file it finds. If it does not find a config file in one of the following locations, a default set of configuration parameters are used. The search locations of the config file are:</para>
<para>#1: the ROADRUNNER_CONFIG environment variable</para>
<para>#2: try the user&apos;s home directory for roadrunner.conf, i.e.:</para>
<para>/Users/andy/roadrunner.conf</para>
<para>#3: try the user&apos;s home directory for .roadrunner.conf, i.e.:</para>
<para>/Users/andy/.roadrunner.conf</para>
<para>#4: try the same directory as the roadrunner shared library, this will be the same directory as the python _roadrunner.pyd python extension module, i.e.:</para>
<para>/Users/andy/local/lib/roadrunner.conf</para>
<para>#5: try one directory up from the where the shared library or program is at, i.e.:</para>
<para>/Users/andy/local/roadrunner.conf</para>
<para>The conf file is just a plain text file of where each line may be key / value std::pair separated by a :", i.e.</para>
<para>KEY_NAME : Value Any line that does not match this format is ignored, and keys that are not found are also ignored. Therefore, any line that does not start w* ith a word character is considered a comment.</para>
<para>All of the configuration managment functions are static method of the <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class, and all of the configuration keys are static attributes * of the <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class, these are documented in the Configuration Functions section.</para>
<para>As all of the <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class methods are static, one never instantiates the <ref refid="classrr_1_1Config" kindref="compound">Config</ref> class. </para>
    </detaileddescription>
    <location file="rrConfig.h" line="63" column="1" bodyfile="rrConfig.h" bodystart="64" bodyend="607"/>
    <listofallmembers>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae344943000e085c6891d49ccd8286fa4" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ALLOW_EVENTS_IN_STEADY_STATE_CALCULATIONS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae173224855af72a1643cb740c724f377" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>CONFIG_END</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0c3075c04786354a026c56410edb47be" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>CVODE_MIN_ABSOLUTE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a4fba6c43b4d137bab9f42ee9c4cb1e6b" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>CVODE_MIN_RELATIVE</name></member>
      <member refid="classrr_1_1Config_1afab929414e069aada94a305c3ca425ce" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getBool</name></member>
      <member refid="classrr_1_1Config_1a4ee7359b58047946520f3f3a9c6de04c" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getConfigFilePath</name></member>
      <member refid="classrr_1_1Config_1a6cf432148717f8bbadc861481340f3bd" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getDouble</name></member>
      <member refid="classrr_1_1Config_1a66454fca7b7357d5b3180d8589bacebf" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getInt</name></member>
      <member refid="classrr_1_1Config_1a20e11f7bdb81efbd1e84011801b4a526" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getKeyList</name></member>
      <member refid="classrr_1_1Config_1a0370467d1593491eac5e443ce0c03224" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getString</name></member>
      <member refid="classrr_1_1Config_1a1acfbc8a6af061e54e4c6b2890ce4a88" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>getValue</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ada4ec1b0d4d8d54e580eddccc1f33efb" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>K_ROWS_PER_WRITE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>Keys</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0f7d62516a750c56eddc353e14c5e421" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LLVM_SYMBOL_CACHE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a008f3c1e8cf4803a4e028a109c5baa62" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_CONSERVED_MOIETIES</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a949debdf732c321298b9002083532a6e" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_MUTABLE_INITIAL_CONDITIONS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a7a2a7f8bfeeb111d7210b54a62a00791" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_OPTIMIZE_CFG_SIMPLIFICATION</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a575c208952a322880e85c5bdad991bbd" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_OPTIMIZE_DEAD_CODE_ELIMINATION</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a43e324984558dd0f7074ea895b6b53c5" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_OPTIMIZE_DEAD_INST_ELIMINATION</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a413677ed7cc8b08008c9e2d5e453490d" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_OPTIMIZE_GVN</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a1e2ad37c11aae10f88ed1d1b2aa27266" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_OPTIMIZE_INSTRUCTION_COMBINING</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053adcb86a4f8afac5df2bc241d336fd1862" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_OPTIMIZE_INSTRUCTION_SIMPLIFIER</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a44487cb13e7c8fc0c850a064c88b22da" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_PERMISSIVE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a4fbe11de557045ebc0cd573f15064aae" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_READ_ONLY</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aff2d0d4e16f9d40d8998a2387d45964a" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_RECOMPILE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053afdd1febe10f963a5260a5baead2c94f9" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOADSBMLOPTIONS_USE_MCJIT</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aebebe893536932bb96d066c77d56ea1f" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>LOGGER_LOG_FILE_PATH</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a132d11f5ad8d479acc917f91916a2060" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>MAX_OUTPUT_ROWS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aae6c195ec9c3e6568341c4f226fe391f" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>MODEL_RESET</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a5c55905b3039d205c2675cd8a5a3682c" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>OPTIMIZE_REACTION_RATE_SELECTION</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a249947900871dcfadcd924323f12d70e" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>PYTHON_ENABLE_NAMED_MATRIX</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0777390cc6ead1e5864aa0e319fc4159" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>RANDOM_SEED</name></member>
      <member refid="classrr_1_1Config_1ab5bc77a68b26edb749fb2a14336f4fd5" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>readConfigFile</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae4eee9ff55c8ff33111fd63dd4427d18" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_DISABLE_PYTHON_DYNAMIC_PROPERTIES</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a2ac32a86236319b70d5078dddd44f23b" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_DISABLE_WARNINGS</name></member>
      <member refid="classrr_1_1Config_1a0e5ea8f108b8737a8d202e5fb4cb71aead09bff7058b7510c61e92573f9c7c799" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_DISABLE_WARNINGS_CONSERVED_MOIETY</name></member>
      <member refid="classrr_1_1Config_1a0e5ea8f108b8737a8d202e5fb4cb71aead0c00bc63505c9f9497e634e1383c7fd" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_DISABLE_WARNINGS_STEADYSTATE</name></member>
      <member refid="classrr_1_1Config_1a0e5ea8f108b8737a8d202e5fb4cb71ae" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_DISABLE_WARNINGS_VALUES</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a3d5469371f6dc9aa2402d5e075b64f92" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_JACOBIAN_MODE</name></member>
      <member refid="classrr_1_1Config_1a4809c71e5ad3b128af6dbb0a4093c938ade157842f89bea5f519dab49470b1b69" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_JACOBIAN_MODE_AMOUNTS</name></member>
      <member refid="classrr_1_1Config_1a4809c71e5ad3b128af6dbb0a4093c938a6c47b9be8ff264e00c8a397e73ce7d97" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_JACOBIAN_MODE_CONCENTRATIONS</name></member>
      <member refid="classrr_1_1Config_1a4809c71e5ad3b128af6dbb0a4093c938" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_JACOBIAN_MODE_VALUES</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae778bfdbfb15c7391f52a3363c01c41c" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>ROADRUNNER_JACOBIAN_STEP_SIZE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a043cd743124d745fe19797e0992d4078" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SBML_APPLICABLEVALIDATORS</name></member>
      <member refid="classrr_1_1Config_1af31cc9c1ef79cd00c6099930bd2aae9c" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>setValue</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a7c765d39c39d0550c170fce10099664f" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_ABSOLUTE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a2380bee401835d67027fcf0b6fca3c20" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_COPY_RESULT</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a68f2e9ea81eb79e0d138a3834ab2b33b" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_DETERMINISTIC_VARIABLE_STEP</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aac781f4e67d50493b57896166839aabf" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_DURATION</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0d32622a3edeabd8cb3b36a310a073e7" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_INITIAL_TIMESTEP</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053af04f063962a4036311b2e11f07519c7c" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_INTEGRATOR</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a195516f962434b4aeb314ae39d2a2814" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_MAXIMUM_NUM_STEPS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a571e2ca6736089faed9659cc2301968d" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_MAXIMUM_TIMESTEP</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aa4e33c84e600b5f29620af10fa601425" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_MINIMUM_TIMESTEP</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a65faed9584635abaaf631baa90ff342f" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_MULTI_STEP</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a048be3a9dac65ffeb9a85e89abd26229" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_RELATIVE</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae5bc2b4a1d1183c5a941d65368f81ff5" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_STEPS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a27968dd97e68c82d7773b4ac5b695823" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_STIFF</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a50309d6c373f32953b6956760f800e23" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_STOCHASTIC_VARIABLE_STEP</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a38f882c1ea3fc2c5844d1c80bfdbbbd4" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>SIMULATEOPTIONS_STRUCTURED_RESULT</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053adf2850a7abf4024849642d512f2d175e" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_APPROX</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a918423c8152c2de247f32b9634e63a27" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_APPROX_MAX_STEPS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a9e7868b91c7f6f94da14d1b8797b7829" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_APPROX_TIME</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a0f93ab971ed7c5d9dfdd092e96244052" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_APPROX_TOL</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a568a6ea36735903f07f255e965205b50" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_BROYDEN</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ad2d3f863115b60f11279d413b4bc2baa" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_LINEARITY</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a2d28b310561d790f8814ae1ae871bb64" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_MAXIMUM_NUM_STEPS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae91fd0851ea18a519556f71376c57164" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_MINIMUM_DAMPING</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a4686986010864b67984769a014f60676" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_PRESIMULATION</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ae1c4eb4d8956fd74282f7244b699b22d" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_PRESIMULATION_MAX_STEPS</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a211de9124bd3db79a3752c58f14f7b51" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_PRESIMULATION_TIME</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053ab00d49173c79792fd08c3fb5731f018d" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>STEADYSTATE_RELATIVE</name></member>
      <member refid="classrr_1_1Config_1a947d20afae74fba1c1725c8fb2c71eba" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>stringToKey</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053aeed2c355140f97162b0a894e6c3c7710" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>TEMP_DIR_PATH</name></member>
      <member refid="classrr_1_1Config_1aed7c550b9e34222675cd152c9154d053a5545245bf87ab5231571a43a2ae6260d" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>VALIDATION_IN_REGENERATION</name></member>
      <member refid="classrr_1_1Config_1aacae3161033c6c178aac93f7467afa3a" prot="public" virt="non-virtual"><scope>rr::Config</scope><name>writeConfigFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
