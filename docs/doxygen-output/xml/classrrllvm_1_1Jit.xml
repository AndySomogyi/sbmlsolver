<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classrrllvm_1_1Jit" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>rrllvm::Jit</compoundname>
    <derivedcompoundref refid="classrrllvm_1_1LLJit" prot="public" virt="non-virtual">rrllvm::LLJit</derivedcompoundref>
    <derivedcompoundref refid="classrrllvm_1_1MCJit" prot="public" virt="non-virtual">rrllvm::MCJit</derivedcompoundref>
    <includes refid="Jit_8h" local="no">Jit.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1aa71f25762a7483cc342a3674881c44d1" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; llvm::raw_svector_ostream &gt;</type>
        <definition>std::unique_ptr&lt;llvm::raw_svector_ostream&gt; rrllvm::Jit::compiledModuleBinaryStream</definition>
        <argsstring></argsstring>
        <name>compiledModuleBinaryStream</name>
        <qualifiedname>rrllvm::Jit::compiledModuleBinaryStream</qualifiedname>
        <briefdescription>
<para><ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> compiles the generated LLVM IR to this binary stream which is then used both for adding to the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> as a module and for saveState. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> is the only <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> that uses this. (Its bad interface design but works at least.). <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref> uses a caching mechanism which allows us to retrieve object files directly, foregoing the need for this variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="322" column="25" bodyfile="llvm/Jit.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1a1487ca6247ee86b6dab2020d4659d064" prot="public" static="no" mutable="no">
        <type>llvm::SmallVector&lt; char, 10 &gt;</type>
        <definition>llvm::SmallVector&lt;char, 10&gt; rrllvm::Jit::moduleBuffer</definition>
        <argsstring></argsstring>
        <name>moduleBuffer</name>
        <qualifiedname>rrllvm::Jit::moduleBuffer</qualifiedname>
        <briefdescription>
<para>The buffer used by compiledModuleBinaryStream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="327" column="27" bodyfile="llvm/Jit.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1a004af13f555d2c7fdaf088bd6f2c037c" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; llvm::LLVMContext &gt;</type>
        <definition>std::unique_ptr&lt;llvm::LLVMContext&gt; rrllvm::Jit::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <qualifiedname>rrllvm::Jit::context</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="347" column="25" bodyfile="llvm/Jit.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1a78943fba79d6b4aa5a3d2e19b60de8e7" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; llvm::Module &gt;</type>
        <definition>std::unique_ptr&lt;llvm::Module&gt; rrllvm::Jit::module</definition>
        <argsstring></argsstring>
        <name>module</name>
        <qualifiedname>rrllvm::Jit::module</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="348" column="25" bodyfile="llvm/Jit.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1a5bf6d8132e7cdc6fadd635d39ee3f0a3" prot="protected" static="no" mutable="no">
        <type>llvm::Module *</type>
        <definition>llvm::Module* rrllvm::Jit::moduleNonOwning</definition>
        <argsstring></argsstring>
        <name>moduleNonOwning</name>
        <qualifiedname>rrllvm::Jit::moduleNonOwning</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="349" column="22" bodyfile="llvm/Jit.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1a130a9033f5e553542db7dccbbc91dbe2" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; llvm::IRBuilder&lt;&gt; &gt;</type>
        <definition>std::unique_ptr&lt;llvm::IRBuilder&lt;&gt; &gt; rrllvm::Jit::builder</definition>
        <argsstring></argsstring>
        <name>builder</name>
        <qualifiedname>rrllvm::Jit::builder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="350" column="25" bodyfile="llvm/Jit.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Jit_1a3cd9de39bf57162c328bdaca2b0edede" prot="protected" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t rrllvm::Jit::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <qualifiedname>rrllvm::Jit::options</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="351" column="23" bodyfile="llvm/Jit.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1Jit_1af895c58cbe99d0e5dda02f689b80074d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::Jit::Jit</definition>
        <argsstring>(std::uint32_t options)</argsstring>
        <name>Jit</name>
        <qualifiedname>rrllvm::Jit::Jit</qualifiedname>
        <param>
          <type>std::uint32_t</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>instantiate a <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> object with some options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>LoadSBMLOptions::modelGeneratorOpt. The options are stored by bit masks and can be manipulated by either modifying LoadSBMLOptions or Config. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="144" column="18" bodyfile="llvm/Jit.cpp" bodystart="21" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1ac9bfb0045cd3a21ecd4b48d7fb4683f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::Jit::Jit</definition>
        <argsstring>()</argsstring>
        <name>Jit</name>
        <qualifiedname>rrllvm::Jit::Jit</qualifiedname>
        <briefdescription>
<para>default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>delegates to <ref refid="classrrllvm_1_1Jit_1af895c58cbe99d0e5dda02f689b80074d" kindref="member">Jit(std::uint32_t options)</ref>. The options argument is the default constructed from LoadSBMLOptions.modelGeneratorOpt. Note, that LoadSBMLOptions is influenced by the global Config. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="152" column="9" bodyfile="llvm/Jit.cpp" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a639f90099cf9faf011209586a9023a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::mapFunctionsToJitSymbols</definition>
        <argsstring>()=0</argsstring>
        <name>mapFunctionsToJitSymbols</name>
        <qualifiedname>rrllvm::Jit::mapFunctionsToJitSymbols</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1a996945de22420bc5951594d75d80a591">mapFunctionsToJitSymbols</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a91eae38be659b79c86b536fd06da7a85">mapFunctionsToJitSymbols</reimplementedby>
        <briefdescription>
<para>adds functions that are declared and defined in C++ to the jit engine. </para>
        </briefdescription>
        <detaileddescription>
<para>unlike most functions that are created directly in the llvm IR language these functions are just C++ i.e. tan, arccsh, quotient. In <ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> (llvm 6) these were &quot;mapped&quot; to sbml support functions in addGlobalMappings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="160" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a3b8ed0a6c863013898f33f7bb9be650d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual rrllvm::Jit::~Jit</definition>
        <argsstring>()=default</argsstring>
        <name>~Jit</name>
        <qualifiedname>rrllvm::Jit::~Jit</qualifiedname>
        <briefdescription>
<para>Add support for libsbml distrib functions. </para>
        </briefdescription>
        <detaileddescription>
<para>similar to <ref refid="classrrllvm_1_1Jit_1a639f90099cf9faf011209586a9023a66" kindref="member">Jit::mapFunctionsToJitSymbols</ref>, these are declared and defined in C++. Support for distrib in libsbml must be present for these functions to be jitted, but if distrib is not available there are no adverse consequences other than no being able to simulate models that depend on libsbml distrib.</para>
<para>defaulted virtual destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="174" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a71b51482a5d3ed6e773494138358e317" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::uint64_t</type>
        <definition>virtual std::uint64_t rrllvm::Jit::lookupFunctionAddress</definition>
        <argsstring>(const std::string &amp;name)=0</argsstring>
        <name>lookupFunctionAddress</name>
        <qualifiedname>rrllvm::Jit::lookupFunctionAddress</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1a7c19af88fe0dc1ad16bf809a78e4dec6">lookupFunctionAddress</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1ab595a7d72e4838dbbe2027130b4ecc3b">lookupFunctionAddress</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="198" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a1da020c67e709b9655807c6d7a8d8344" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::addObjectFile</definition>
        <argsstring>(rrOwningBinary owningObject)=0</argsstring>
        <name>addObjectFile</name>
        <qualifiedname>rrllvm::Jit::addObjectFile</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1ad38295e9143c288d11c0313686b66d11">addObjectFile</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1ac9d5a99c6f5a888d3d403995873ec3a4">addObjectFile</reimplementedby>
        <param>
          <type>rrOwningBinary</type>
          <declname>owningObject</declname>
        </param>
        <briefdescription>
<para>add an in-memory representation of an object file to the current jit module. </para>
        </briefdescription>
        <detaileddescription>
<para>the rrOwningBinary is a typedef&apos;d llvm::object::OwningBinary&lt;llvm::object::ObjectFile&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="205" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a0914537453011b9acd33baabe5585453" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::addObjectFile</definition>
        <argsstring>(std::unique_ptr&lt; llvm::object::ObjectFile &gt; objectFile)=0</argsstring>
        <name>addObjectFile</name>
        <qualifiedname>rrllvm::Jit::addObjectFile</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1af6987a4dfe7045ab102c27d943e9dd00">addObjectFile</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a1a86ef74cd562bd951bd3570cd823097">addObjectFile</reimplementedby>
        <param>
          <type>std::unique_ptr&lt; llvm::object::ObjectFile &gt;</type>
          <declname>objectFile</declname>
        </param>
        <briefdescription>
<para>add an in-memory representation of an object file to the current jit module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="210" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a33e40a54eb3ece2598f47e09c86b211e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::addObjectFile</definition>
        <argsstring>(std::unique_ptr&lt; llvm::MemoryBuffer &gt; obj)=0</argsstring>
        <name>addObjectFile</name>
        <qualifiedname>rrllvm::Jit::addObjectFile</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1ac6718157487c3ff6b8b7ab0bd8dc61cc">addObjectFile</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a54678279d720f8517a5c130a9c80e6f8">addObjectFile</reimplementedby>
        <param>
          <type>std::unique_ptr&lt; llvm::MemoryBuffer &gt;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>add an in-memory representation of an object file to the current jit module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="215" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1ad2784cc3b1431f2315d3c7b3b63759af" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::addModule</definition>
        <argsstring>(llvm::Module *M)=0</argsstring>
        <name>addModule</name>
        <qualifiedname>rrllvm::Jit::addModule</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1a3d4b7271b8af2f550a909c127b4ccf49">addModule</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a34a4ef86cfce934a493ed67fa8714dd3">addModule</reimplementedby>
        <param>
          <type>llvm::Module *</type>
          <declname>M</declname>
        </param>
        <briefdescription>
<para>add a module </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>directly to the jit engine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="220" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1add4b53cfec0eff51d41dc19d733914cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::addModule</definition>
        <argsstring>(std::unique_ptr&lt; llvm::Module &gt; M, std::unique_ptr&lt; llvm::LLVMContext &gt; ctx)=0</argsstring>
        <name>addModule</name>
        <qualifiedname>rrllvm::Jit::addModule</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1a896e1f6a4c0087c1cfec2271c018cdfd">addModule</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a4bc8ec62262063d3a2ad50fe68ee10c7">addModule</reimplementedby>
        <param>
          <type>std::unique_ptr&lt; llvm::Module &gt;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; llvm::LLVMContext &gt;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>add a module </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>and Context</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>to the current jit engine.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
the parameters M and cts are unique pointers and therefore must be moved, not copied into the module. An llvm ThreadSafeModule is created internalls, which steals the references. For this reason, any code to be added to the module must happen before the call to addModule. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="229" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1af1bd1151bcdb23b228581e378eff5be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void rrllvm::Jit::addModule</definition>
        <argsstring>()=0</argsstring>
        <name>addModule</name>
        <qualifiedname>rrllvm::Jit::addModule</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1a9996b44cdcaffab0ad6b5dba722bba68">addModule</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1ac2d4943094676d1cae9d39fa52618b1f">addModule</reimplementedby>
        <briefdescription>
<para>add the module and context which are member variables of the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> instance to the current <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> engine. </para>
        </briefdescription>
        <detaileddescription>
<para>similar to <ref refid="classrrllvm_1_1Jit_1add4b53cfec0eff51d41dc19d733914cc" kindref="member">addModule(std::unique_ptr&lt;llvm::Module&gt; M, std::unique_ptr&lt;llvm::LLVMContext&gt; ctx)</ref> the references are stolen by the call to construct a ThreadSafeModule which then takes ownership of the module and context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="238" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1aa12a437ad699812ffcb49839dbd74e4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const llvm::DataLayout &amp;</type>
        <definition>virtual const llvm::DataLayout &amp; rrllvm::Jit::getDataLayout</definition>
        <argsstring>() const =0</argsstring>
        <name>getDataLayout</name>
        <qualifiedname>rrllvm::Jit::getDataLayout</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1ab27afc739dd1466259b0b5168b3c89a2">getDataLayout</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a9a77adef72b42870b30e2c8fc0a6db58">getDataLayout</reimplementedby>
        <briefdescription>
<para>get the DataLayout currently in use in the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="243" column="40"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a38c60da63a6915853ee06bfc2de5e76c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; llvm::MemoryBuffer &gt;</type>
        <definition>virtual std::unique_ptr&lt; llvm::MemoryBuffer &gt; rrllvm::Jit::getCompiledModelFromCache</definition>
        <argsstring>(const std::string &amp;sbmlMD5)=0</argsstring>
        <name>getCompiledModelFromCache</name>
        <qualifiedname>rrllvm::Jit::getCompiledModelFromCache</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1ae81a46694d77eba74473d015b42e01f7">getCompiledModelFromCache</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a9b07118c9077e486bb5393cd7c536fb7">getCompiledModelFromCache</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbmlMD5</declname>
        </param>
        <briefdescription>
<para>lookup the sbml with the md5 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sbmlMD5</parametername>
</parameternamelist>
<parameterdescription>
<para>in the compiled object cache. If it is there, return a memory buffer containing it (which you can turn into an object file). Returns empty (null) unique_ptr if not found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>at present this only works with <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="251" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1ab4b10666cae29d7ee65d68f2e781b22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::Jit::transferObjectsToResources</definition>
        <argsstring>(std::shared_ptr&lt; rrllvm::ModelResources &gt; modelResources)</argsstring>
        <name>transferObjectsToResources</name>
        <qualifiedname>rrllvm::Jit::transferObjectsToResources</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a11a02de74df8e811b98172f36a878cd7">transferObjectsToResources</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrrllvm_1_1ModelResources" kindref="compound">rrllvm::ModelResources</ref> &gt;</type>
          <declname>modelResources</declname>
        </param>
        <briefdescription>
<para><emphasis>Moves</emphasis> objects over to <ref refid="classrrllvm_1_1ModelResources" kindref="compound">ModelResources</ref> ptr </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="256" column="22" bodyfile="llvm/Jit.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a126ca0f75646887926342ef4ee8ea034" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void rrllvm::Jit::mapLLVMGeneratedFunctionsToSymbols</definition>
        <argsstring>(ModelResources *modelResources, std::uint32_t options)</argsstring>
        <name>mapLLVMGeneratedFunctionsToSymbols</name>
        <qualifiedname>rrllvm::Jit::mapLLVMGeneratedFunctionsToSymbols</qualifiedname>
        <param>
          <type><ref refid="classrrllvm_1_1ModelResources" kindref="compound">ModelResources</ref> *</type>
          <declname>modelResources</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Map the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref>&apos;d functions that collectively represent a roadrunner compiled sbml model to symbols in. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modelResources</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
this must be called after a the main roadrunner module has been added to the <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> <ndash/> otherwise the lookup will fail. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="264" column="22" bodyfile="llvm/Jit.cpp" bodystart="86" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a92e5c8af5539c0e790328d66ed325d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>llvm::Module *</type>
        <definition>llvm::Module * rrllvm::Jit::getModuleNonOwning</definition>
        <argsstring>()</argsstring>
        <name>getModuleNonOwning</name>
        <qualifiedname>rrllvm::Jit::getModuleNonOwning</qualifiedname>
        <briefdescription>
<para>returns a non owning pointer to the llvm::Module instance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="269" column="30" bodyfile="llvm/Jit.cpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a1e2112dbdce27e06228eb49e5c8a3f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>llvm::LLVMContext *</type>
        <definition>llvm::LLVMContext * rrllvm::Jit::getContextNonOwning</definition>
        <argsstring>()</argsstring>
        <name>getContextNonOwning</name>
        <qualifiedname>rrllvm::Jit::getContextNonOwning</qualifiedname>
        <briefdescription>
<para>returns a non owning pointer to the llvm::LLVMContext instance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="274" column="35" bodyfile="llvm/Jit.cpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1afb8cf53b3bde8eaa539b14cc685cb200" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>llvm::IRBuilder *</type>
        <definition>llvm::IRBuilder * rrllvm::Jit::getBuilderNonOwning</definition>
        <argsstring>()</argsstring>
        <name>getBuilderNonOwning</name>
        <qualifiedname>rrllvm::Jit::getBuilderNonOwning</qualifiedname>
        <briefdescription>
<para>returns a non owning pointer to the llvm::LLVMContext instance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="279" column="18" bodyfile="llvm/Jit.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1ab316cce1cd3f402e678fb3534da19b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::Jit::emitToString</definition>
        <argsstring>()</argsstring>
        <name>emitToString</name>
        <qualifiedname>rrllvm::Jit::emitToString</qualifiedname>
        <briefdescription>
<para>Write the Jit::module in its current state to string as LLVM IR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="285" column="29" bodyfile="llvm/Jit.cpp" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a9e57b4ba546eb03eab6bc5e537da8d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::raw_svector_ostream &amp;</type>
        <definition>llvm::raw_svector_ostream &amp; rrllvm::Jit::getCompiledModuleStream</definition>
        <argsstring>()</argsstring>
        <name>getCompiledModuleStream</name>
        <qualifiedname>rrllvm::Jit::getCompiledModuleStream</qualifiedname>
        <briefdescription>
<para>get the stream that stores a compiled module as binary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="290" column="35"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a36e531717dce312189fd41dccf81140e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::Jit::getDefaultTargetTriple</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultTargetTriple</name>
        <qualifiedname>rrllvm::Jit::getDefaultTargetTriple</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="292" column="21" bodyfile="llvm/Jit.cpp" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a2010d675d46f131db29d7b43b07454b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::Jit::setModuleIdentifier</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>setModuleIdentifier</name>
        <qualifiedname>rrllvm::Jit::setModuleIdentifier</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="294" column="14" bodyfile="llvm/Jit.cpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a3c1a1cf489bb7c8a965a2dfbfabddeec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::Jit::mangleName</definition>
        <argsstring>(const std::string &amp;unmangledName) const</argsstring>
        <name>mangleName</name>
        <qualifiedname>rrllvm::Jit::mangleName</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1a88bb307456fc1c38e25cb031e604c430">mangleName</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1a4aa0be70cb4c32f5cfdc2d48e19e53f5">mangleName</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>unmangledName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="296" column="29" bodyfile="llvm/Jit.cpp" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a49579ba0e6ce122894ec6def38f8e140" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string rrllvm::Jit::getModuleAsString</definition>
        <argsstring>(std::string sbmlMD5)=0</argsstring>
        <name>getModuleAsString</name>
        <qualifiedname>rrllvm::Jit::getModuleAsString</qualifiedname>
        <reimplementedby refid="classrrllvm_1_1LLJit_1ab7a58cc6be141daf6141498dace4f837">getModuleAsString</reimplementedby>
        <reimplementedby refid="classrrllvm_1_1MCJit_1ac3b90702092cb6082b57ebea939b83ad">getModuleAsString</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>sbmlMD5</declname>
        </param>
        <briefdescription>
<para>get a binary string representation of the current module. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called after the module is added to the jit engine. Throws if string is empty.</para>
<para>This interface is moderate abuse of interface design <ndash/> the parameter sbmlMD5 is only required for the <ref refid="classrrllvm_1_1LLJit" kindref="compound">LLJit</ref> subclass, as it is used to query the object cache created by llvm. This is of course bad design but we are boxed by not being able to find a way to enable the same cache system with the old <ref refid="classrrllvm_1_1MCJit" kindref="compound">MCJit</ref> class.</para>
<para>Regardless of the bad design, it works, so lets not spend any more time on it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="312" column="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a7613abd146677cc3ee74bc9267ca5d1c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rrllvm::Jit::getProcessTriple</definition>
        <argsstring>() const</argsstring>
        <name>getProcessTriple</name>
        <qualifiedname>rrllvm::Jit::getProcessTriple</qualifiedname>
        <briefdescription>
<para><ref refid="classrrllvm_1_1Jit_1a7613abd146677cc3ee74bc9267ca5d1c" kindref="member">getProcessTriple()</ref> - Return an appropriate target triple for generating code to be loaded into the current process, e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>when using the JIT. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="333" column="21" bodyfile="llvm/Jit.cpp" bodystart="297" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1ae135808ab2a9ab0466cc1cc54715ad93" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const llvm::Target *</type>
        <definition>const llvm::Target * rrllvm::Jit::getDefaultTargetMachine</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultTargetMachine</name>
        <qualifiedname>rrllvm::Jit::getDefaultTargetMachine</qualifiedname>
        <briefdescription>
<para>use llvm calls to work out which TargetMachine is currently being used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="339" column="28" bodyfile="llvm/Jit.cpp" bodystart="306" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1aa25373cc3dc5ac1bd2f7c162a4e044df" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FnMap</type>
        <definition>FnMap rrllvm::Jit::externalFunctionSignatures</definition>
        <argsstring>() const</argsstring>
        <name>externalFunctionSignatures</name>
        <qualifiedname>rrllvm::Jit::externalFunctionSignatures</qualifiedname>
        <briefdescription>
<para>returns a mapping between function names and function signatures </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="344" column="15" bodyfile="llvm/Jit.cpp" bodystart="320" bodyend="395"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a8af5ef971aea611382882638acfcac12" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::Jit::createCLibraryFunction</definition>
        <argsstring>(llvm::LibFunc funcId, llvm::FunctionType *funcType)</argsstring>
        <name>createCLibraryFunction</name>
        <qualifiedname>rrllvm::Jit::createCLibraryFunction</qualifiedname>
        <param>
          <type>llvm::LibFunc</type>
          <declname>funcId</declname>
        </param>
        <param>
          <type>llvm::FunctionType *</type>
          <declname>funcType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Jit.h" line="369" column="14" bodyfile="llvm/Jit.cpp" bodystart="198" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Jit_1a1cca34a72a03589116a08b4f2309299a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::Jit::createCLibraryFunctions</definition>
        <argsstring>()</argsstring>
        <name>createCLibraryFunctions</name>
        <qualifiedname>rrllvm::Jit::createCLibraryFunctions</qualifiedname>
        <briefdescription>
<para>Pull a collection of functions from the standard C library into the developing LLVM IR Module. </para>
        </briefdescription>
        <detaileddescription>
<para>The interface for pulling in the C library functions (seems to) work for both llvm-6 and llvm-13. Therefore it is implemented in the superclass of all <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref>&apos;s. The following functions are declared:<itemizedlist>
<listitem><para>pow, fabs, acos, asin, atan, ceil, cos, cosh, exp, floor, log, log10, sin, sinh, tan, tanh, fmod <simplesect kind="see"><para><ref refid="classrrllvm_1_1Jit_1a639f90099cf9faf011209586a9023a66" kindref="member">Jit::mapFunctionsToJitSymbols</ref> </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>double pow(double x, double y);</para>
<para>double fabs(double x);</para>
<para>double acos(double x);</para>
<para>double asin(double x);</para>
<para>double atan(double x);</para>
<para>double ceil(double x);</para>
<para>double cos(double x);</para>
<para>double cosh(double x);</para>
<para>double exp(double x);</para>
<para>double floor(double x);</para>
<para>double log(double x);</para>
<para>double log10(double x);</para>
<para>double sin(double x);</para>
<para>double sinh(double x);</para>
<para>double tan(double x);</para>
<para>double tanh(double x);</para>
<para>double fmod(double x, double y);</para>
        </inbodydescription>
        <location file="llvm/Jit.h" line="380" column="14" bodyfile="llvm/Jit.cpp" bodystart="217" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>superclass of all <ref refid="classrrllvm_1_1Jit" kindref="compound">Jit</ref> types. </para>
    </briefdescription>
    <detaileddescription>
<para>Builds the machinery necessary to compile a sbml model on the fly to machine code. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>rrllvm::Jit</label>
        <link refid="classrrllvm_1_1Jit"/>
      </node>
      <node id="2">
        <label>rrllvm::LLJit</label>
        <link refid="classrrllvm_1_1LLJit"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>rrllvm::MCJit</label>
        <link refid="classrrllvm_1_1MCJit"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="llvm/Jit.h" line="135" column="5" bodyfile="llvm/Jit.h" bodystart="135" bodyend="383"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1Jit_1ad2784cc3b1431f2315d3c7b3b63759af" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>addModule</name></member>
      <member refid="classrrllvm_1_1Jit_1add4b53cfec0eff51d41dc19d733914cc" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>addModule</name></member>
      <member refid="classrrllvm_1_1Jit_1af1bd1151bcdb23b228581e378eff5be0" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>addModule</name></member>
      <member refid="classrrllvm_1_1Jit_1a1da020c67e709b9655807c6d7a8d8344" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>addObjectFile</name></member>
      <member refid="classrrllvm_1_1Jit_1a0914537453011b9acd33baabe5585453" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>addObjectFile</name></member>
      <member refid="classrrllvm_1_1Jit_1a33e40a54eb3ece2598f47e09c86b211e" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>addObjectFile</name></member>
      <member refid="classrrllvm_1_1Jit_1a130a9033f5e553542db7dccbbc91dbe2" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>builder</name></member>
      <member refid="classrrllvm_1_1Jit_1aa71f25762a7483cc342a3674881c44d1" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>compiledModuleBinaryStream</name></member>
      <member refid="classrrllvm_1_1Jit_1a004af13f555d2c7fdaf088bd6f2c037c" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>context</name></member>
      <member refid="classrrllvm_1_1Jit_1a8af5ef971aea611382882638acfcac12" prot="private" virt="non-virtual"><scope>rrllvm::Jit</scope><name>createCLibraryFunction</name></member>
      <member refid="classrrllvm_1_1Jit_1a1cca34a72a03589116a08b4f2309299a" prot="private" virt="non-virtual"><scope>rrllvm::Jit</scope><name>createCLibraryFunctions</name></member>
      <member refid="classrrllvm_1_1Jit_1ab316cce1cd3f402e678fb3534da19b3d" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>emitToString</name></member>
      <member refid="classrrllvm_1_1Jit_1aa25373cc3dc5ac1bd2f7c162a4e044df" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>externalFunctionSignatures</name></member>
      <member refid="classrrllvm_1_1Jit_1afb8cf53b3bde8eaa539b14cc685cb200" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>getBuilderNonOwning</name></member>
      <member refid="classrrllvm_1_1Jit_1a38c60da63a6915853ee06bfc2de5e76c" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>getCompiledModelFromCache</name></member>
      <member refid="classrrllvm_1_1Jit_1a9e57b4ba546eb03eab6bc5e537da8d88" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>getCompiledModuleStream</name></member>
      <member refid="classrrllvm_1_1Jit_1a1e2112dbdce27e06228eb49e5c8a3f47" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>getContextNonOwning</name></member>
      <member refid="classrrllvm_1_1Jit_1aa12a437ad699812ffcb49839dbd74e4e" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>getDataLayout</name></member>
      <member refid="classrrllvm_1_1Jit_1ae135808ab2a9ab0466cc1cc54715ad93" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>getDefaultTargetMachine</name></member>
      <member refid="classrrllvm_1_1Jit_1a36e531717dce312189fd41dccf81140e" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>getDefaultTargetTriple</name></member>
      <member refid="classrrllvm_1_1Jit_1a49579ba0e6ce122894ec6def38f8e140" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>getModuleAsString</name></member>
      <member refid="classrrllvm_1_1Jit_1a92e5c8af5539c0e790328d66ed325d26" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>getModuleNonOwning</name></member>
      <member refid="classrrllvm_1_1Jit_1a7613abd146677cc3ee74bc9267ca5d1c" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>getProcessTriple</name></member>
      <member refid="classrrllvm_1_1Jit_1af895c58cbe99d0e5dda02f689b80074d" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>Jit</name></member>
      <member refid="classrrllvm_1_1Jit_1ac9bfb0045cd3a21ecd4b48d7fb4683f8" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>Jit</name></member>
      <member refid="classrrllvm_1_1Jit_1a71b51482a5d3ed6e773494138358e317" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>lookupFunctionAddress</name></member>
      <member refid="classrrllvm_1_1Jit_1a3c1a1cf489bb7c8a965a2dfbfabddeec" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>mangleName</name></member>
      <member refid="classrrllvm_1_1Jit_1a639f90099cf9faf011209586a9023a66" prot="public" virt="pure-virtual"><scope>rrllvm::Jit</scope><name>mapFunctionsToJitSymbols</name></member>
      <member refid="classrrllvm_1_1Jit_1a126ca0f75646887926342ef4ee8ea034" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>mapLLVMGeneratedFunctionsToSymbols</name></member>
      <member refid="classrrllvm_1_1Jit_1a78943fba79d6b4aa5a3d2e19b60de8e7" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>module</name></member>
      <member refid="classrrllvm_1_1Jit_1a1487ca6247ee86b6dab2020d4659d064" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>moduleBuffer</name></member>
      <member refid="classrrllvm_1_1Jit_1a5bf6d8132e7cdc6fadd635d39ee3f0a3" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>moduleNonOwning</name></member>
      <member refid="classrrllvm_1_1Jit_1a3cd9de39bf57162c328bdaca2b0edede" prot="protected" virt="non-virtual"><scope>rrllvm::Jit</scope><name>options</name></member>
      <member refid="classrrllvm_1_1Jit_1a2010d675d46f131db29d7b43b07454b1" prot="public" virt="non-virtual"><scope>rrllvm::Jit</scope><name>setModuleIdentifier</name></member>
      <member refid="classrrllvm_1_1Jit_1ab4b10666cae29d7ee65d68f2e781b22f" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>transferObjectsToResources</name></member>
      <member refid="classrrllvm_1_1Jit_1a3b8ed0a6c863013898f33f7bb9be650d" prot="public" virt="virtual"><scope>rrllvm::Jit</scope><name>~Jit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
