<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classrrllvm_1_1SymbolForest" kind="class" language="C++" prot="public">
    <compoundname>rrllvm::SymbolForest</compoundname>
    <includes refid="SymbolForest_8h" local="no">SymbolForest.h</includes>
    <innerclass refid="classrrllvm_1_1SymbolForest_1_1ConstIterator" prot="public">rrllvm::SymbolForest::ConstIterator</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrrllvm_1_1SymbolForest_1aaedbda7bf450a9d891e86c0a8537b411" prot="public" static="no">
        <type>std::map&lt; std::string, const libsbml::ASTNode * &gt;</type>
        <definition>typedef std::map&lt;std::string, const libsbml::ASTNode*&gt; rrllvm::SymbolForest::Map</definition>
        <argsstring></argsstring>
        <name>Map</name>
        <qualifiedname>rrllvm::SymbolForest::Map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="39" column="22" bodyfile="llvm/SymbolForest.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrrllvm_1_1SymbolForest_1aa16c05c4a77925508cbdd22f66f8530f" prot="public" static="no">
        <type>std::map&lt; std::string, constlibsbml::ASTNode * &gt;::const_iterator</type>
        <definition>typedef std::map&lt;std::string,constlibsbml::ASTNode*&gt;::const_iterator rrllvm::SymbolForest::_const_iterator</definition>
        <argsstring></argsstring>
        <name>_const_iterator</name>
        <qualifiedname>rrllvm::SymbolForest::_const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="40" column="39" bodyfile="llvm/SymbolForest.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1SymbolForest_1a0ffc0753cae0d119ba9e2a785957c6af" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, const libsbml::ASTNode * &gt;</type>
        <definition>std::map&lt;std::string, const libsbml::ASTNode*&gt; rrllvm::SymbolForest::floatingSpecies</definition>
        <argsstring></argsstring>
        <name>floatingSpecies</name>
        <qualifiedname>rrllvm::SymbolForest::floatingSpecies</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="102" column="14" bodyfile="llvm/SymbolForest.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1SymbolForest_1a0aac11af419eb861cdb198437fc0a521" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, const libsbml::ASTNode * &gt;</type>
        <definition>std::map&lt;std::string, const libsbml::ASTNode*&gt; rrllvm::SymbolForest::boundarySpecies</definition>
        <argsstring></argsstring>
        <name>boundarySpecies</name>
        <qualifiedname>rrllvm::SymbolForest::boundarySpecies</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="103" column="14" bodyfile="llvm/SymbolForest.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1SymbolForest_1a4b928ea68f80e6363e55ee7910c43a5d" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, const libsbml::ASTNode * &gt;</type>
        <definition>std::map&lt;std::string, const libsbml::ASTNode*&gt; rrllvm::SymbolForest::compartments</definition>
        <argsstring></argsstring>
        <name>compartments</name>
        <qualifiedname>rrllvm::SymbolForest::compartments</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="104" column="14" bodyfile="llvm/SymbolForest.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1SymbolForest_1aff350a13c202ca5133292e6e0c503491" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, const libsbml::ASTNode * &gt;</type>
        <definition>std::map&lt;std::string, const libsbml::ASTNode*&gt; rrllvm::SymbolForest::globalParameters</definition>
        <argsstring></argsstring>
        <name>globalParameters</name>
        <qualifiedname>rrllvm::SymbolForest::globalParameters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="105" column="14" bodyfile="llvm/SymbolForest.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1SymbolForest_1ab8bf5cd765af1482339a0f1e3aba4d39" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, const libsbml::ASTNode * &gt;</type>
        <definition>std::map&lt;std::string, const libsbml::ASTNode*&gt; rrllvm::SymbolForest::speciesReferences</definition>
        <argsstring></argsstring>
        <name>speciesReferences</name>
        <qualifiedname>rrllvm::SymbolForest::speciesReferences</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="106" column="14" bodyfile="llvm/SymbolForest.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1SymbolForest_1a8bec91650e6f31dc40df092b7dee91d6" prot="private" static="no" mutable="no">
        <type><ref refid="classrrllvm_1_1SymbolForest_1_1ConstIterator" kindref="compound">ConstIterator</ref></type>
        <definition>ConstIterator rrllvm::SymbolForest::_end</definition>
        <argsstring></argsstring>
        <name>_end</name>
        <qualifiedname>rrllvm::SymbolForest::_end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="150" column="19" bodyfile="llvm/SymbolForest.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1SymbolForest_1a4b99a270969d9dfc5051ab0291e5724b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrrllvm_1_1SymbolForest_1_1ConstIterator" kindref="compound">ConstIterator</ref></type>
        <definition>const ConstIterator rrllvm::SymbolForest::find</definition>
        <argsstring>(const std::map&lt; std::string, const libsbml::ASTNode * &gt;::key_type &amp;x) const</argsstring>
        <name>find</name>
        <qualifiedname>rrllvm::SymbolForest::find</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, const libsbml::ASTNode * &gt;::key_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>find and end are designed to work identically to the std::map::find. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the resulting iterator is not iteratable, it is only suitable for comparing with end() and getting the value out of it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="114" column="25" bodyfile="llvm/SymbolForest.h" bodystart="114" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1SymbolForest_1a1a82639e3c11ff8680538328ca4f5329" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrrllvm_1_1SymbolForest_1_1ConstIterator" kindref="compound">ConstIterator</ref> &amp;</type>
        <definition>const ConstIterator &amp; rrllvm::SymbolForest::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>rrllvm::SymbolForest::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/SymbolForest.h" line="144" column="25" bodyfile="llvm/SymbolForest.h" bodystart="144" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Similar to a symbol table, except instead of a name / value, we have a name / tree, where the tree is the root of an ASTNode tree. </para>
    </briefdescription>
    <detaileddescription>
<para>The rationality behind this will be covered in the paper, but briefly its required because we are dealing with a declarative language in which the rules can be defined in any order.</para>
<para>This class does not own anything, it just has const pointers to a set of ASTNodes which are owned either by the sbml model, or some containing class.</para>
<para>This class basically stores the name / value of all the re-write rules (assigment or initial assigment). </para>
    </detaileddescription>
    <location file="llvm/SymbolForest.h" line="36" column="1" bodyfile="llvm/SymbolForest.h" bodystart="37" bodyend="152"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1SymbolForest_1aa16c05c4a77925508cbdd22f66f8530f" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>_const_iterator</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1a8bec91650e6f31dc40df092b7dee91d6" prot="private" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>_end</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1a0aac11af419eb861cdb198437fc0a521" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>boundarySpecies</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1a4b928ea68f80e6363e55ee7910c43a5d" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>compartments</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1a1a82639e3c11ff8680538328ca4f5329" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>end</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1a4b99a270969d9dfc5051ab0291e5724b" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>find</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1a0ffc0753cae0d119ba9e2a785957c6af" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>floatingSpecies</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1aff350a13c202ca5133292e6e0c503491" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>globalParameters</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1aaedbda7bf450a9d891e86c0a8537b411" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>Map</name></member>
      <member refid="classrrllvm_1_1SymbolForest_1ab8bf5cd765af1482339a0f1e3aba4d39" prot="public" virt="non-virtual"><scope>rrllvm::SymbolForest</scope><name>speciesReferences</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
