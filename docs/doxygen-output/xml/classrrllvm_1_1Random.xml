<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrrllvm_1_1Random" kind="class" language="C++" prot="public">
    <compoundname>rrllvm::Random</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1Random_1a387019519efe43d4fba138881519818f" prot="public" static="no" mutable="no">
        <type>cxx11_ns::mt19937</type>
        <definition>cxx11_ns::mt19937 rrllvm::Random::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <briefdescription>
<para>RNG engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="101" column="23" bodyfile="llvm/Random.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrrllvm_1_1Random_1ae81c9be6dbe0f1d109ce4bf397a9ba8c" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t rrllvm::Random::randomSeed</definition>
        <argsstring></argsstring>
        <name>randomSeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="105" column="13" bodyfile="llvm/Random.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Random_1a7b6d7cd37bb46ffb1a318aa902bd5365" prot="private" static="no" mutable="no">
        <type>cxx11_ns::uniform_real&lt; double &gt;</type>
        <definition>cxx11_ns::uniform_real&lt;double&gt; rrllvm::Random::normalized_uniform_dist</definition>
        <argsstring></argsstring>
        <name>normalized_uniform_dist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="111" column="24" bodyfile="llvm/Random.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrrllvm_1_1Random_1aebd1ccf422f268198a10659974c128b0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int rrllvm::Random::mMaxTries</definition>
        <argsstring></argsstring>
        <name>mMaxTries</name>
        <briefdescription>
<para>The maximum number of tries to find a value inside a truncated range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="117" column="9" bodyfile="llvm/Random.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrrllvm_1_1Random_1a45e1c2cbc539b1b855989248d4af89a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::Random::Random</definition>
        <argsstring>(class ModelGeneratorContext &amp;ctx)</argsstring>
        <name>Random</name>
        <param>
          <type>class <ref refid="classrrllvm_1_1ModelGeneratorContext" kindref="compound">ModelGeneratorContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>creates a new <ref refid="classrrllvm_1_1Random" kindref="compound">Random</ref> object and adds the distrib as global mappings to the execution engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a921b6e5e3b55c17e8ccc59840ebb7e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::Random::Random</definition>
        <argsstring>(const Random &amp;other)</argsstring>
        <name>Random</name>
        <param>
          <type>const <ref refid="classrr_1_1Random" kindref="compound">Random</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor, copy the distributions but reset the RNG to what is specified by the config. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="30" column="5" bodyfile="llvm/Random.cpp" bodystart="131" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a897db0dcdeacdef5caac7087e4875616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrr_1_1Random" kindref="compound">Random</ref> &amp;</type>
        <definition>Random &amp; rrllvm::Random::operator=</definition>
        <argsstring>(const Random &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrr_1_1Random" kindref="compound">Random</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>assignment operator, copies the fields from the other object, but does not re-intialize them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="36" column="12" bodyfile="llvm/Random.cpp" bodystart="148" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a72e84ec8e83847899adfb999bbee6bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::Random::Random</definition>
        <argsstring>()</argsstring>
        <name>Random</name>
        <briefdescription>
<para>default ctor, this obviously does not add any mappings to a <ref refid="classrrllvm_1_1ModelGeneratorContext" kindref="compound">ModelGeneratorContext</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This would be used when a <ref refid="classrrllvm_1_1Random" kindref="compound">Random</ref> is created by itself, to use the attached RNG engine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a136a5f26c55a8160bc522d1a0cdab2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rrllvm::Random::~Random</definition>
        <argsstring>()</argsstring>
        <name>~Random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="45" column="5" bodyfile="llvm/Random.cpp" bodystart="761" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a71acc6461e87790ee45f7f5da635eb8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rrllvm::Random::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <briefdescription>
<para>return a normalized random number between 0 and 1 using the RNG engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="51" column="12" bodyfile="llvm/Random.cpp" bodystart="767" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1ad009ff45cd685be754370b668e99f6f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rrllvm::Random::getMaxTries</definition>
        <argsstring>() const</argsstring>
        <name>getMaxTries</name>
        <briefdescription>
<para>Returns the maximum number of tries to find a value inside a truncated range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="56" column="9" bodyfile="llvm/Random.cpp" bodystart="774" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1af329339a71a07a79969e35de5881a4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::Random::setMaxTries</definition>
        <argsstring>(int maxTries)</argsstring>
        <name>setMaxTries</name>
        <param>
          <type>int</type>
          <declname>maxTries</declname>
        </param>
        <briefdescription>
<para>Sets the maximum number of tries to find a value inside a truncated range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="61" column="10" bodyfile="llvm/Random.cpp" bodystart="779" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a5bfaae233b2805b56c2b9ac9c084c12d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rrllvm::Random::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <briefdescription>
<para>min random number. </para>
        </briefdescription>
        <detaileddescription>
<para>MSVC looks at this, but gcc stdlib assumes normalized dist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="77" column="12" bodyfile="llvm/Random.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a4cb7608f39fe6bf46935025168007e71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rrllvm::Random::max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <briefdescription>
<para>max random number. </para>
        </briefdescription>
        <detaileddescription>
<para>MSVC looks at this, but gcc stdlib assumes normalized dist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="82" column="12" bodyfile="llvm/Random.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1a5eab5fabaad44ed2245d63b03a3475eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rrllvm::Random::setRandomSeed</definition>
        <argsstring>(int64_t)</argsstring>
        <name>setRandomSeed</name>
        <param>
          <type>int64_t</type>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Try to hide the RNG, so we can use different RNGs in the future. </para>
        </briefdescription>
        <detaileddescription>
<para>set the seed used by the random number generator. This will by definition reset the RNG. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="90" column="10" bodyfile="llvm/Random.cpp" bodystart="784" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classrrllvm_1_1Random_1ada656438a7c126e74d0263fcbea6e058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t rrllvm::Random::getRandomSeed</definition>
        <argsstring>()</argsstring>
        <name>getRandomSeed</name>
        <briefdescription>
<para>Try to hide the RNG so we can used different RNGs in the future. </para>
        </briefdescription>
        <detaileddescription>
<para>get the seed used by the RNG. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="llvm/Random.h" line="96" column="13" bodyfile="llvm/Random.cpp" bodystart="797" bodyend="800"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="llvm/Random.h" line="17" column="1" bodyfile="llvm/Random.h" bodystart="18" bodyend="119"/>
    <listofallmembers>
      <member refid="classrrllvm_1_1Random_1a387019519efe43d4fba138881519818f" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>engine</name></member>
      <member refid="classrrllvm_1_1Random_1ad009ff45cd685be754370b668e99f6f2" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>getMaxTries</name></member>
      <member refid="classrrllvm_1_1Random_1ada656438a7c126e74d0263fcbea6e058" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>getRandomSeed</name></member>
      <member refid="classrrllvm_1_1Random_1a4cb7608f39fe6bf46935025168007e71" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>max</name></member>
      <member refid="classrrllvm_1_1Random_1a5bfaae233b2805b56c2b9ac9c084c12d" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>min</name></member>
      <member refid="classrrllvm_1_1Random_1aebd1ccf422f268198a10659974c128b0" prot="private" virt="non-virtual"><scope>rrllvm::Random</scope><name>mMaxTries</name></member>
      <member refid="classrrllvm_1_1Random_1a7b6d7cd37bb46ffb1a318aa902bd5365" prot="private" virt="non-virtual"><scope>rrllvm::Random</scope><name>normalized_uniform_dist</name></member>
      <member refid="classrrllvm_1_1Random_1a71acc6461e87790ee45f7f5da635eb8a" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>operator()</name></member>
      <member refid="classrrllvm_1_1Random_1a897db0dcdeacdef5caac7087e4875616" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>operator=</name></member>
      <member refid="classrrllvm_1_1Random_1a45e1c2cbc539b1b855989248d4af89a2" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>Random</name></member>
      <member refid="classrrllvm_1_1Random_1a921b6e5e3b55c17e8ccc59840ebb7e08" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>Random</name></member>
      <member refid="classrrllvm_1_1Random_1a72e84ec8e83847899adfb999bbee6bbe" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>Random</name></member>
      <member refid="classrrllvm_1_1Random_1ae81c9be6dbe0f1d109ce4bf397a9ba8c" prot="private" virt="non-virtual"><scope>rrllvm::Random</scope><name>randomSeed</name></member>
      <member refid="classrrllvm_1_1Random_1af329339a71a07a79969e35de5881a4d8" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>setMaxTries</name></member>
      <member refid="classrrllvm_1_1Random_1a5eab5fabaad44ed2245d63b03a3475eb" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>setRandomSeed</name></member>
      <member refid="classrrllvm_1_1Random_1a136a5f26c55a8160bc522d1a0cdab2e6" prot="public" virt="non-virtual"><scope>rrllvm::Random</scope><name>~Random</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
