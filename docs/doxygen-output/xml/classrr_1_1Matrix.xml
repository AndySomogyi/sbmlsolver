<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrr_1_1Matrix" kind="class" language="C++" prot="public">
    <compoundname>rr::Matrix</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ls::Matrix&lt; T &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrr_1_1Matrix_1ab29900c20cb7cd0627f1dd01d0b767e4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rr::Matrix&lt; T &gt;::Matrix</definition>
        <argsstring>(ls::Matrix&lt; T &gt; &amp;matrix)</argsstring>
        <name>Matrix</name>
        <param>
          <type>ls::Matrix&lt; T &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Constructor for creating a Matrix&lt;T&gt; from a ls::Matrix&lt;T&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="1" column="0" bodyfile="Matrix.h" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1acc820653bbfb9578443b2ea8ebdaac4e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rr::Matrix&lt; T &gt;::Matrix</definition>
        <argsstring>(ls::Matrix&lt; T &gt; *matrix)</argsstring>
        <name>Matrix</name>
        <param>
          <type>ls::Matrix&lt; T &gt; *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="1" column="0" bodyfile="Matrix.h" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1a15848a37cb50e749fb8f7f00ae0a6b22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix&lt; T &gt;::operator==</definition>
        <argsstring>(Matrix&lt; T &gt; &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Element-wise equality operator to compare a Matrix&lt;T&gt; with another Matrix&lt;T&gt; </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>to compare Matrix&lt;double&gt; use Matrix&lt;double&gt;::almostEqual </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="55" column="14" bodyfile="Matrix.h" bodystart="55" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1a4a1a8c0eada3c2c680cb5383fbd8e0e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix&lt; T &gt;::operator!=</definition>
        <argsstring>(Matrix&lt; T &gt; &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>inequality operators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="82" column="14" bodyfile="Matrix.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1ad2be619ba028bf0f0b5c229c13f64063" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix&lt; T &gt;::almostEquals</definition>
        <argsstring>(Matrix&lt; double &gt; &amp;other, const double &amp;tolerance)</argsstring>
        <name>almostEquals</name>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Element-wise compareison between this Matrix&lt;double&gt; with another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix&lt;double&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="90" column="14" bodyfile="Matrix.h" bodystart="90" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1a9cc83eb19abb5da6d8a7bea7bc89dc1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; rr::Matrix&lt; T &gt;::mult</definition>
        <argsstring>(Matrix&lt; T &gt; matrix)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="113" column="16" bodyfile="Matrix.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1a481abe78869b481e1b825734bb8a51a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rr::Matrix&lt; T &gt;::empty</definition>
        <argsstring>()</argsstring>
        <name>empty</name>
        <briefdescription>
<para>indicator method for empty <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if matrix is empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="122" column="14" bodyfile="Matrix.h" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1adaa546e9e056dbe943d43418653a123f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix&lt; T &gt;::sortRowsByLabels</definition>
        <argsstring>()</argsstring>
        <name>sortRowsByLabels</name>
        <briefdescription>
<para>Reorder <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref> rows such that row names are in alphabetical order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="132" column="14" bodyfile="Matrix.h" bodystart="132" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classrr_1_1Matrix_1af564bfd45b879ba4244021846cd1f4f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rr::Matrix&lt; T &gt;::sortColsByLabels</definition>
        <argsstring>()</argsstring>
        <name>sortColsByLabels</name>
        <briefdescription>
<para>Reorder <ref refid="classrr_1_1Matrix" kindref="compound">Matrix</ref> cols such that col names are in alphabetical order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="167" column="14" bodyfile="Matrix.h" bodystart="167" bodyend="197"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>rr::Matrix&lt; T &gt;</label>
        <link refid="classrr_1_1Matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ls::Matrix&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>rr::Matrix&lt; T &gt;</label>
        <link refid="classrr_1_1Matrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ls::Matrix&lt; T &gt;</label>
      </node>
    </collaborationgraph>
    <location file="Matrix.h" line="14" column="5" bodyfile="Matrix.h" bodystart="14" bodyend="198"/>
    <listofallmembers>
      <member refid="classrr_1_1Matrix_1ad2be619ba028bf0f0b5c229c13f64063" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>almostEquals</name></member>
      <member refid="classrr_1_1Matrix_1a481abe78869b481e1b825734bb8a51a2" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>empty</name></member>
      <member refid="classrr_1_1Matrix_1ab29900c20cb7cd0627f1dd01d0b767e4" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>Matrix</name></member>
      <member refid="classrr_1_1Matrix_1acc820653bbfb9578443b2ea8ebdaac4e" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>Matrix</name></member>
      <member refid="classrr_1_1Matrix_1a9cc83eb19abb5da6d8a7bea7bc89dc1b" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>mult</name></member>
      <member refid="classrr_1_1Matrix_1a4a1a8c0eada3c2c680cb5383fbd8e0e5" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>operator!=</name></member>
      <member refid="classrr_1_1Matrix_1a15848a37cb50e749fb8f7f00ae0a6b22" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>operator==</name></member>
      <member refid="classrr_1_1Matrix_1af564bfd45b879ba4244021846cd1f4f4" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>sortColsByLabels</name></member>
      <member refid="classrr_1_1Matrix_1adaa546e9e056dbe943d43418653a123f" prot="public" virt="non-virtual"><scope>rr::Matrix</scope><name>sortRowsByLabels</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
