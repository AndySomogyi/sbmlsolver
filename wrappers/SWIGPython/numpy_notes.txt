setting dtype attribute, getset.c:

    {"dtype",
        (getter)array_descr_get,
        (setter)array_descr_set,
        NULL, NULL},

matplotlb plots each column vector as a time series. 

/*
 * If the type is changed.
 * Also needing change: strides, itemsize
 *
 * Either itemsize is exactly the same or the array is single-segment
 * (contiguous or fortran) with compatibile dimensions The shape and strides
 * will be adjusted in that case as well.
 */
static int
array_descr_set(PyArrayObject *self, PyObject *arg)
{
    PyArray_Descr *newtype = NULL;
    npy_intp newdim;
    int i;
    char *msg = "new type not compatible with array.";

    if (arg == NULL) {
        PyErr_SetString(PyExc_AttributeError,
                "Cannot delete array dtype");
        return -1;
    }

    if (!(PyArray_DescrConverter(arg, &newtype)) ||
        newtype == NULL) {
        PyErr_SetString(PyExc_TypeError,
                "invalid data-type for array");
        return -1;
    }

    if (PyDataType_FLAGCHK(newtype, NPY_ITEM_HASOBJECT) ||
        PyDataType_FLAGCHK(newtype, NPY_ITEM_IS_POINTER) ||
        PyDataType_FLAGCHK(PyArray_DESCR(self), NPY_ITEM_HASOBJECT) ||
        PyDataType_FLAGCHK(PyArray_DESCR(self), NPY_ITEM_IS_POINTER)) {
        PyErr_SetString(PyExc_TypeError,
                "Cannot change data-type for object array.");
        Py_DECREF(newtype);
        return -1;
    }

    if (newtype->elsize == 0) {
        /* Allow a void view */
        if (newtype->type_num == NPY_VOID) {
            PyArray_DESCR_REPLACE(newtype);
            if (newtype == NULL) {
                return -1;
            }
            newtype->elsize = PyArray_DESCR(self)->elsize;
        }
        /* But no other flexible types */
        else {
            PyErr_SetString(PyExc_TypeError,
                    "data-type must not be 0-sized");
            Py_DECREF(newtype);
            return -1;
        }
    }


    if ((newtype->elsize != PyArray_DESCR(self)->elsize) &&
        (PyArray_NDIM(self) == 0 || !PyArray_ISONESEGMENT(self) ||
         PyDataType_HASSUBARRAY(newtype))) {
        goto fail;
    }
    if (PyArray_ISCONTIGUOUS(self)) {
        i = PyArray_NDIM(self) - 1;
    }
    else {
        i = 0;
    }
    if (newtype->elsize < PyArray_DESCR(self)->elsize) {
        /*
         * if it is compatible increase the size of the
         * dimension at end (or at the front for NPY_ARRAY_F_CONTIGUOUS)
         */
        if (PyArray_DESCR(self)->elsize % newtype->elsize != 0) {
            goto fail;
        }
        newdim = PyArray_DESCR(self)->elsize / newtype->elsize;
        PyArray_DIMS(self)[i] *= newdim;
        PyArray_STRIDES(self)[i] = newtype->elsize;
    }
    else if (newtype->elsize > PyArray_DESCR(self)->elsize) {
        /*
         * Determine if last (or first if NPY_ARRAY_F_CONTIGUOUS) dimension
         * is compatible
         */
        newdim = PyArray_DIMS(self)[i] * PyArray_DESCR(self)->elsize;
        if ((newdim % newtype->elsize) != 0) {
            goto fail;
        }
        PyArray_DIMS(self)[i] = newdim / newtype->elsize;
        PyArray_STRIDES(self)[i] = newtype->elsize;
    }

    /* fall through -- adjust type*/
    Py_DECREF(PyArray_DESCR(self));
    if (PyDataType_HASSUBARRAY(newtype)) {
        /*
         * create new array object from data and update
         * dimensions, strides and descr from it
         */
        PyArrayObject *temp;
        /*
         * We would decref newtype here.
         * temp will steal a reference to it
         */
        temp = (PyArrayObject *)
            PyArray_NewFromDescr(&PyArray_Type, newtype, PyArray_NDIM(self),
                                 PyArray_DIMS(self), PyArray_STRIDES(self),
                                 PyArray_DATA(self), PyArray_FLAGS(self), NULL);
        if (temp == NULL) {
            return -1;
        }
        PyDimMem_FREE(PyArray_DIMS(self));
        ((PyArrayObject_fields *)self)->dimensions = PyArray_DIMS(temp);
        ((PyArrayObject_fields *)self)->nd = PyArray_NDIM(temp);
        ((PyArrayObject_fields *)self)->strides = PyArray_STRIDES(temp);
        newtype = PyArray_DESCR(temp);
        Py_INCREF(PyArray_DESCR(temp));
        /* Fool deallocator not to delete these*/
        ((PyArrayObject_fields *)temp)->nd = 0;
        ((PyArrayObject_fields *)temp)->dimensions = NULL;
        Py_DECREF(temp);
    }

    ((PyArrayObject_fields *)self)->descr = newtype;
    PyArray_UpdateFlags(self, NPY_ARRAY_UPDATE_ALL);
    return 0;

 fail:
    PyErr_SetString(PyExc_ValueError, msg);
    Py_DECREF(newtype);
    return -1;
}

