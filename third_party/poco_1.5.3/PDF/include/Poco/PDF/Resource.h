//
// Resource.h
//
// $Id: //poco/Main/PDF/include/Poco/PDF/Resource.h#4 $
//
// Library: PDF
// Package: PDFCore
// Module:  Resource
//
// Definition of the Resource class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef PDF_Resource_INCLUDED
#define PDF_Resource_INCLUDED


#include "Poco/PDF/PDF.h"
#include <vector>


namespace Poco {
namespace PDF {


template <typename R>
class Resource
	/// A Resource represents a PDF resource resource.
{
public:
	typedef R Type;

	Resource(HPDF_Doc* pPDF, const R& resource, const std::string& name = ""): 
		_pPDF(pPDF),
		_resource(resource),
		_name(name)
		/// Creates the resource
	{
	}

	Resource(const Resource& other): 
		_pPDF(other._pPDF),
		_resource(other._resource),
		_name(other._name)
		/// Copy creates the resource.
	{
	}

	virtual ~Resource()
		/// Destroys the resource.
	{
	}

	Resource& operator = (const Resource& resource)
		/// Assignment operator.
	{
		Resource tmp(resource);
		swap(tmp);
		return *this;
	}

	operator const Type& () const
		/// Const conversion operator into reference to native type.
	{
		return _resource;
	}

	bool operator == (const Resource& other) const
		/// Equality operator.
	{
		return _pPDF == other._pPDF && _resource == other._resource;
	}

	void swap(Resource& other)
	{
		using std::swap;
		
		swap(_pPDF, other._pPDF);
		swap(_resource, other._resource);
		swap(_name, other._name);
	}

	virtual const std::string& name() const
	{
		return _name;
	}

protected:
	const R& handle() const
	{
		return _resource;
	}

private:
	Resource();

	HPDF_Doc*   _pPDF;
	R           _resource;
	std::string _name;
};


//
// typedefs
//

//typedef Resource<HPDF_Annotation>  Annotation;
typedef Resource<HPDF_ExtGState>   ExtGraphicsState;

typedef HPDF_TransMatrix         TransMatrix;
typedef HPDF_Rect                Rectangle;
typedef HPDF_Point               Point;
typedef HPDF_LineCap             LineCap;
typedef HPDF_LineJoin            LineJoin;
typedef HPDF_DashMode            DashMode;
typedef HPDF_RGBColor            RGBColor;
typedef HPDF_CMYKColor           CMYKColor;
typedef std::vector<HPDF_UINT16> PatternVec;
typedef HPDF_TextWidth           TextWidth;

} } // namespace Poco::PDF


#endif // PDF_Resource_INCLUDED
