//
// Variable.h
//
// $Id: //poco/1.4/CppParser/include/Poco/CppParser/Variable.h#1 $
//
// Library: CppParser
// Package: SymbolTable
// Module:  Variable
//
// Definition of the Variable class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef CppParser_Variable_INCLUDED
#define CppParser_Variable_INCLUDED


#include "Poco/CppParser/CppParser.h"
#include "Poco/CppParser/Decl.h"


namespace Poco {
namespace CppParser {


class CppParser_API Variable: public Decl
	/// This class represents (member) variable declaration.
{
public:
	enum Flags
	{
		VAR_STATIC  = 1,  /// The variable is static.
		VAR_MUTABLE = 2,  /// The variable is mutable.
		VAR_VOLATILE = 4, /// The variable is volatile.
		VAR_CONST    = 8  /// The variable is const.
	};
	
	Variable(const std::string& decl, NameSpace* pNameSpace);
		/// Creates the Variable.

	~Variable();
		/// Destroys the Variable.
		
	int flags() const;
		/// Returns the variable's flags.

	bool isPointer() const;
		/// Returns true iff the variable holds a pointer.

	Symbol::Kind kind() const;

	const std::string& declType() const;
		/// Returns the type of the parameter without const and & if present.
		///
		/// Example: a type const std::string& -> std::string, a type const std::string* returns std::string

		
private:
	int _flags;
	bool _isPointer;
	std::string _type;
};


//
// inlines
//
inline int Variable::flags() const
{
	return _flags;
}


inline bool Variable::isPointer() const
{
	return _isPointer;
}


inline const std::string& Variable::declType() const
{
	return _type;
}


} } // namespace Poco::CppParser


#endif // CppParser_Variable_INCLUDED
