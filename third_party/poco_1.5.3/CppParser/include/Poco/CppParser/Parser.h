//
// Parser.h
//
// $Id: //poco/1.4/CppParser/include/Poco/CppParser/Parser.h#1 $
//
// Library: CppParser
// Package: CppParser
// Module:  Parser
//
// Definition of the Parser class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef CppParser_Parser_INCLUDED
#define CppParser_Parser_INCLUDED


#include "Poco/CppParser/CppParser.h"
#include "Poco/CppParser/Tokenizer.h"
#include "Poco/CppParser/Symbol.h"
#include "Poco/CppParser/NameSpace.h"
#include "Poco/CountingStream.h"
#include <vector>


namespace Poco {
namespace CppParser {


class Enum;
class Struct;
class Function;


class CppParser_API Parser
	/// A minimal parser for C++ (header files).
	///
	/// The parser reads a (preprocessed) source or header file and
	/// builds a symbol table containing as much information as
	/// the parser is able to extract from the file.
	///
	/// A special comment syntax is used for inline API documentation.
	///
	/// A comment starting with three consecutive slashes (///) contains
	/// API documentation for a symbol (class, function, typedef, enum, etc.).
	/// API documentation comments always come after the declaration, with the
	/// exception of structs and classes, where the comments are expected
	/// immediately before the opening brace.
{
public:
	Parser(NameSpace::SymbolTable& gst, const std::string& file, std::istream& istr);
		/// Creates the Parser.

	~Parser();
		/// Destroys the Parser.

	void parse();
		/// Parses the file.

protected:
	const Poco::Token* parseFile(const Poco::Token* pNext);
	const Poco::Token* parseNameSpace(const Poco::Token* pNext);
	const Poco::Token* parseClass(const Poco::Token* pNext);
	const Poco::Token* parseClass(const Poco::Token* pNext, std::string& decl);
	const Poco::Token* parseTemplate(const Poco::Token* pNext);
	const Poco::Token* parseTemplateArgs(const Poco::Token* pNext, std::string& decl);
	const Poco::Token* parseVarFunc(const Poco::Token* pNext);
	const Poco::Token* parseVarFunc(const Poco::Token* pNext, std::string& decl);
	const Poco::Token* parseFriend(const Poco::Token* pNext);
	const Poco::Token* parseExtern(const Poco::Token* pNext);
	const Poco::Token* parseTypeDef(const Poco::Token* pNext);
	const Poco::Token* parseUsing(const Poco::Token* pNext);
	const Poco::Token* parseFunc(const Poco::Token* pNext, std::string& decl);
	const Poco::Token* parseParameters(const Poco::Token* pNext, Function* pFunc);
	const Poco::Token* parseBlock(const Poco::Token* pNext);
	const Poco::Token* parseEnum(const Poco::Token* pNext);
	const Poco::Token* parseEnumValue(const Poco::Token* pNext, Enum* pEnum);
	const Poco::Token* parseBaseClassList(const Poco::Token* pNext, Struct* pClass);
	const Poco::Token* parseClassMembers(const Poco::Token* pNext, Struct* pClass);
	const Poco::Token* parseAccess(const Poco::Token* pNext);
	const Poco::Token* parseIdentifier(const Poco::Token* pNext, std::string& id);
	
	void addSymbol(Symbol* pSymbol, int lineNumber, bool addGST = true);
	void pushNameSpace(NameSpace* pNameSpace, int lineNumber, bool addGST = true);
	void popNameSpace();
	NameSpace* currentNameSpace() const;

	static bool isIdentifier(const Poco::Token* pToken);
	static bool isOperator(const Poco::Token* pToken, int kind);
	static bool isKeyword(const Poco::Token* pToken, int kind);
	static bool isEOF(const Poco::Token* pToken);
	static void expectOperator(const Poco::Token* pToken, int kind, const std::string& msg);
	static void syntaxError(const std::string& msg);
	static void append(std::string& decl, const std::string& token);
	static void append(std::string& decl, const Poco::Token* pToken);

	const Poco::Token* next();
	const Poco::Token* nextPreprocessed();
	const Poco::Token* nextToken();

private:
	typedef std::vector<NameSpace*> NSStack;

	NameSpace::SymbolTable& _gst;
	Poco::CountingInputStream _istr;
	Tokenizer      _tokenizer;
	std::string    _file;
	std::string    _path;
	std::string    _currentPath;
	bool           _inFile;
	std::string    _package;
	std::string    _library;
	NSStack        _nsStack;
	Symbol*        _pCurrentSymbol;
	Symbol::Access _access;
	std::string    _doc;
	std::string    _attrs;
};


} } // namespace Poco::CppParser


#endif // CppParser_Parser_INCLUDED
