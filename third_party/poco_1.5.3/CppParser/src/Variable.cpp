//
// Variable.cpp
//
// $Id: //poco/1.4/CppParser/src/Variable.cpp#1 $
//
// Library: CppParser
// Package: SymbolTable
// Module:  Variable
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/CppParser/Variable.h"
#include "Poco/String.h"
#include <cstddef>


namespace Poco {
namespace CppParser {


Variable::Variable(const std::string& decl, NameSpace* pNameSpace):
	Decl(decl, pNameSpace),
	_flags(0),
	_isPointer(false),
	_type()
{
	if (hasAttr(decl, "static"))
		_flags |= VAR_STATIC;
	if (hasAttr(decl, "mutable"))
		_flags |= VAR_MUTABLE;
	if (hasAttr(decl, "volatile"))
		_flags |= VAR_VOLATILE;
	if (hasAttr(decl, "const"))
		_flags |= VAR_CONST;

	std::size_t pos = decl.rfind(name());
	std::string tmp = decl.substr(0, pos);
	tmp = Poco::trim(tmp);
	
	pos = tmp.rfind("*");
	_isPointer = (pos == (tmp.size()-1));
	
	Poco::replaceInPlace(tmp, "static ", "");
	Poco::replaceInPlace(tmp, "mutable ", "");
	Poco::replaceInPlace(tmp, "volatile ", "");
	Poco::replaceInPlace(tmp, "static\t", "");
	Poco::replaceInPlace(tmp, "mutable\t", "");
	Poco::replaceInPlace(tmp, "volatile\t", "");
	if (tmp.find("const ") == 0)
		tmp = tmp.substr(6);
	if (tmp.find("const\t") == 0)
		tmp = tmp.substr(6);
	
	std::size_t rightCut = tmp.size();
	while (rightCut > 0 && (tmp[rightCut-1] == '&' || tmp[rightCut-1] == '*' || tmp[rightCut-1] == '\t' || tmp[rightCut-1] == ' '))
		--rightCut;
	_type = Poco::trim(tmp.substr(0, rightCut));

}


Variable::~Variable()
{
}


Symbol::Kind Variable::kind() const
{
	return Symbol::SYM_VARIABLE;
}


} } // namespace Poco::CppParser
