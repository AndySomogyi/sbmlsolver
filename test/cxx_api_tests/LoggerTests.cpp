//
// Created by Ciaran on 10/05/2021.
//

#include "gtest/gtest.h"
#include "rrRoadRunner.h"
#include "RoadRunnerTest.h"
#include <filesystem>
#include <Poco/Message.h>
#include <Poco/Logger.h>
#include <Poco/Channel.h>
#include <Poco/SplitterChannel.h>
#include <Poco/ConsoleChannel.h>

using namespace rr;
//using Poco::Channel;
//using Poco::SplitterChannel;
//using Poco::AutoPtr;



class LoggerTests : public RoadRunnerTest {
public:

    std::filesystem::path fname = std::filesystem::current_path() / "log.log";

    LoggerTests() = default;

    ~LoggerTests() override {
        // temporarily set to false if you need to see logging file
        bool tearDown = false;
        if (tearDown) {
            // clean up any files generated by tests
            if (std::filesystem::exists(fname)) {
                std::filesystem::remove(fname);
            }
        }
    }
};

TEST_F(LoggerTests, LoggingBufferStream) {
    std::ostringstream os;
    LoggingBuffer buffer(1, fname.string().c_str(), __LINE__);
    auto &s = buffer.stream();
    s << "a logging message" << std::endl;
    os << s.rdbuf();
    ASSERT_STREQ("a logging message\n", os.str().c_str());

}

TEST_F(LoggerTests, SetLevel) {
    ASSERT_EQ(Logger::getLevel(), 3);
    Logger::setLevel(5);
    ASSERT_EQ(Logger::getLevel(), Logger::LOG_NOTICE);
}

TEST_F(LoggerTests, disableLogging) {
    // this does turn off logging. Not sure how to test though
    Logger::disableLogging();
    LoggingBuffer buffer(1, fname.string().c_str(), __LINE__);
    auto &s = buffer.stream();
    s << "a logging message" << std::endl; // does not output to console
}

TEST_F(LoggerTests, disableConsoleLogging) {
    // note: using the LoggingBuffer directly is bad
    // since getLogger does the initialization needed
    Poco::Logger &logger = getLogger();
    // only works after getLogger has been called for the first time
    Logger::disableConsoleLogging();
    // this is not output to console, but how to test ?
    logger.log(Poco::Message(__FILE__, "a logging message", Poco::Message::PRIO_CRITICAL));
}

TEST_F(LoggerTests, enableConsoleLogging) {
    // note: using the LoggingBuffer directly is bad
    // since getLogger does the initialization needed
    Poco::Logger &logger = getLogger();
    // only works after getLogger has been called for the first time
    // we disable the logger
    Logger::disableConsoleLogging();
    logger.log(Poco::Message(__FILE__, "is not output to console", Poco::Message::PRIO_CRITICAL));
    // and enable it again
    Logger::enableConsoleLogging();
    logger.log(Poco::Message(__FILE__, "is output to console", Poco::Message::PRIO_CRITICAL));
    // works as expected, but how to test?
}

/**
 * This test does not work - that is, the log file
 * that is expected is not written. Its possible that I'm not
 * using the file logger correctly but I don't know.
 *
 */
TEST_F(LoggerTests, DISABLED_enableFileLogging) {
    // note: using the LoggingBuffer directly is bad
    // since getLogger does the initialization needed
    Poco::Logger &logger = getLogger();
    Logger::enableFileLogging(fname.string(), Logger::LOG_CRITICAL);
    logger.log(Poco::Message(__FILE__, "is output to file", Poco::Message::PRIO_CRITICAL));
    // and enable it again
    Logger::disableConsoleLogging();
    logger.log(Poco::Message(__FILE__, "is not output to file", Poco::Message::PRIO_CRITICAL));
    // works as expected, but how to test?
    std::cout << "logger file: " << fname << std::endl;
    ASSERT_TRUE(std::filesystem::exists(fname)); // fails
}


TEST_F(LoggerTests, getCurrentLevelAsString) {
    Logger::setLevel(Logger::LOG_CRITICAL);
    std::string loggerLevel = Logger::getCurrentLevelAsString();
    ASSERT_STREQ("LOG_CRITICAL", loggerLevel.c_str());

}

TEST_F(LoggerTests, getFileName) {
    Logger::setLevel(Logger::LOG_CRITICAL);
    Logger::enableFileLogging(fname.string());
    std::cout << Logger::getFileName() << std::endl;
    ASSERT_STREQ(fname.string().c_str(), Logger::getFileName().c_str());

}

TEST_F(LoggerTests, setFormattingPattern) {
    Poco::Logger& logger = getLogger();
    Logger::setFormattingPattern("%p:%s:%t");
    logger.log(Poco::Message(__FILE__, "Formatted Logging", Poco::Message::PRIO_FATAL));
    // working, but again - how to test?
}

TEST_F(LoggerTests, getFormattingPattern) {
    Poco::Logger& logger = getLogger();
    Logger::setFormattingPattern("%p:%s:%t");
    ASSERT_STREQ("%p:%s:%t", Logger::getFormattingPattern().c_str());
}

TEST_F(LoggerTests, levelToString) {
    ASSERT_EQ("LOG_INFORMATION", Logger::levelToString(Logger::LOG_INFORMATION));

}

TEST_F(LoggerTests, stringToLevel) {
    ASSERT_EQ(6, Logger::stringToLevel("LOG_INFORMATION"));

}

TEST_F(LoggerTests, getColoredOutput_) {

}

TEST_F(LoggerTests, setColoredOutput_) {

}

TEST_F(LoggerTests, setProperty_) {

}

TEST_F(LoggerTests, log_) {

}

TEST_F(LoggerTests, setConsoleStream_) {

}


